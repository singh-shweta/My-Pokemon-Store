{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet } from \"../common/canUse.js\";\nimport { checkDocument } from \"./getFromAST.js\";\nimport { invariant } from \"../globals/index.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { wrap } from \"optimism\";\nimport { cacheSizes } from \"../caching/index.js\";\nfunction identity(document) {\n  return document;\n}\nvar DocumentTransform = /** @class */function () {\n  function DocumentTransform(transform, options) {\n    if (options === void 0) {\n      options = Object.create(null);\n    }\n    this.resultCache = canUseWeakSet ? new WeakSet() : new Set();\n    this.transform = transform;\n    if (options.getCacheKey) {\n      // Override default `getCacheKey` function, which returns [document].\n      this.getCacheKey = options.getCacheKey;\n    }\n    this.cached = options.cache !== false;\n    this.resetCache();\n  }\n  // This default implementation of getCacheKey can be overridden by providing\n  // options.getCacheKey to the DocumentTransform constructor. In general, a\n  // getCacheKey function may either return an array of keys (often including\n  // the document) to be used as a cache key, or undefined to indicate the\n  // transform for this document should not be cached.\n  DocumentTransform.prototype.getCacheKey = function (document) {\n    return [document];\n  };\n  DocumentTransform.identity = function () {\n    // No need to cache this transform since it just returns the document\n    // unchanged. This should save a bit of memory that would otherwise be\n    // needed to populate the `documentCache` of this transform.\n    return new DocumentTransform(identity, {\n      cache: false\n    });\n  };\n  DocumentTransform.split = function (predicate, left, right) {\n    if (right === void 0) {\n      right = DocumentTransform.identity();\n    }\n    return Object.assign(new DocumentTransform(function (document) {\n      var documentTransform = predicate(document) ? left : right;\n      return documentTransform.transformDocument(document);\n    },\n    // Reasonably assume both `left` and `right` transforms handle their own caching\n    {\n      cache: false\n    }), {\n      left: left,\n      right: right\n    });\n  };\n  /**\n   * Resets the internal cache of this transform, if it has one.\n   */\n  DocumentTransform.prototype.resetCache = function () {\n    var _this = this;\n    if (this.cached) {\n      var stableCacheKeys_1 = new Trie(canUseWeakMap);\n      this.performWork = wrap(DocumentTransform.prototype.performWork.bind(this), {\n        makeCacheKey: function (document) {\n          var cacheKeys = _this.getCacheKey(document);\n          if (cacheKeys) {\n            invariant(Array.isArray(cacheKeys), 69);\n            return stableCacheKeys_1.lookupArray(cacheKeys);\n          }\n        },\n        max: cacheSizes[\"documentTransform.cache\"],\n        cache: WeakCache\n      });\n    }\n  };\n  DocumentTransform.prototype.performWork = function (document) {\n    checkDocument(document);\n    return this.transform(document);\n  };\n  DocumentTransform.prototype.transformDocument = function (document) {\n    // If a user passes an already transformed result back to this function,\n    // immediately return it.\n    if (this.resultCache.has(document)) {\n      return document;\n    }\n    var transformedDocument = this.performWork(document);\n    this.resultCache.add(transformedDocument);\n    return transformedDocument;\n  };\n  DocumentTransform.prototype.concat = function (otherTransform) {\n    var _this = this;\n    return Object.assign(new DocumentTransform(function (document) {\n      return otherTransform.transformDocument(_this.transformDocument(document));\n    },\n    // Reasonably assume both transforms handle their own caching\n    {\n      cache: false\n    }), {\n      left: this,\n      right: otherTransform\n    });\n  };\n  return DocumentTransform;\n}();\nexport { DocumentTransform };","map":{"version":3,"sources":["../../../src/utilities/graphql/DocumentTransform.ts"],"names":[],"mappings":"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","sourcesContent":["import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet } from \"../common/canUse.js\";\nimport { checkDocument } from \"./getFromAST.js\";\nimport { invariant } from \"../globals/index.js\";\nimport type { DocumentNode } from \"graphql\";\nimport { WeakCache } from \"@wry/caches\";\nimport { wrap } from \"optimism\";\nimport { cacheSizes } from \"../caching/index.js\";\n\nexport type DocumentTransformCacheKey = ReadonlyArray<unknown>;\n\ntype TransformFn = (document: DocumentNode) => DocumentNode;\n\ninterface DocumentTransformOptions {\n  /**\n   * Determines whether to cache the transformed GraphQL document. Caching can speed up repeated calls to the document transform for the same input document. Set to `false` to completely disable caching for the document transform. When disabled, this option takes precedence over the [`getCacheKey`](#getcachekey) option.\n   *\n   * The default value is `true`.\n   */\n  cache?: boolean;\n  /**\n   * Defines a custom cache key for a GraphQL document that will determine whether to re-run the document transform when given the same input GraphQL document. Returns an array that defines the cache key. Return `undefined` to disable caching for that GraphQL document.\n   *\n   * > **Note:** The items in the array may be any type, but also need to be referentially stable to guarantee a stable cache key.\n   *\n   * The default implementation of this function returns the `document` as the cache key.\n   */\n  getCacheKey?: (\n    document: DocumentNode\n  ) => DocumentTransformCacheKey | undefined;\n}\n\nfunction identity(document: DocumentNode) {\n  return document;\n}\n\nexport class DocumentTransform {\n  private readonly transform: TransformFn;\n  private cached: boolean;\n\n  private readonly resultCache =\n    canUseWeakSet ? new WeakSet<DocumentNode>() : new Set<DocumentNode>();\n\n  // This default implementation of getCacheKey can be overridden by providing\n  // options.getCacheKey to the DocumentTransform constructor. In general, a\n  // getCacheKey function may either return an array of keys (often including\n  // the document) to be used as a cache key, or undefined to indicate the\n  // transform for this document should not be cached.\n  private getCacheKey(\n    document: DocumentNode\n  ): DocumentTransformCacheKey | undefined {\n    return [document];\n  }\n\n  static identity() {\n    // No need to cache this transform since it just returns the document\n    // unchanged. This should save a bit of memory that would otherwise be\n    // needed to populate the `documentCache` of this transform.\n    return new DocumentTransform(identity, { cache: false });\n  }\n\n  static split(\n    predicate: (document: DocumentNode) => boolean,\n    left: DocumentTransform,\n    right: DocumentTransform = DocumentTransform.identity()\n  ) {\n    return Object.assign(\n      new DocumentTransform(\n        (document) => {\n          const documentTransform = predicate(document) ? left : right;\n\n          return documentTransform.transformDocument(document);\n        },\n        // Reasonably assume both `left` and `right` transforms handle their own caching\n        { cache: false }\n      ),\n      { left, right }\n    );\n  }\n\n  constructor(\n    transform: TransformFn,\n    options: DocumentTransformOptions = Object.create(null)\n  ) {\n    this.transform = transform;\n\n    if (options.getCacheKey) {\n      // Override default `getCacheKey` function, which returns [document].\n      this.getCacheKey = options.getCacheKey;\n    }\n    this.cached = options.cache !== false;\n\n    this.resetCache();\n  }\n\n  /**\n   * Resets the internal cache of this transform, if it has one.\n   */\n  resetCache() {\n    if (this.cached) {\n      const stableCacheKeys = new Trie<WeakKey>(canUseWeakMap);\n      this.performWork = wrap(\n        DocumentTransform.prototype.performWork.bind(this),\n        {\n          makeCacheKey: (document) => {\n            const cacheKeys = this.getCacheKey(document);\n            if (cacheKeys) {\n              invariant(\n                Array.isArray(cacheKeys),\n                \"`getCacheKey` must return an array or undefined\"\n              );\n              return stableCacheKeys.lookupArray(cacheKeys);\n            }\n          },\n          max: cacheSizes[\"documentTransform.cache\"],\n          cache: WeakCache<any, any>,\n        }\n      );\n    }\n  }\n\n  private performWork(document: DocumentNode) {\n    checkDocument(document);\n    return this.transform(document);\n  }\n\n  transformDocument(document: DocumentNode) {\n    // If a user passes an already transformed result back to this function,\n    // immediately return it.\n    if (this.resultCache.has(document)) {\n      return document;\n    }\n\n    const transformedDocument = this.performWork(document);\n\n    this.resultCache.add(transformedDocument);\n\n    return transformedDocument;\n  }\n\n  concat(otherTransform: DocumentTransform): DocumentTransform {\n    return Object.assign(\n      new DocumentTransform(\n        (document) => {\n          return otherTransform.transformDocument(\n            this.transformDocument(document)\n          );\n        },\n        // Reasonably assume both transforms handle their own caching\n        { cache: false }\n      ),\n      {\n        left: this,\n        right: otherTransform,\n      }\n    );\n  }\n\n  /**\n   * @internal\n   * Used to iterate through all transforms that are concatenations or `split` links.\n   */\n  readonly left?: DocumentTransform;\n  /**\n   * @internal\n   * Used to iterate through all transforms that are concatenations or `split` links.\n   */\n  readonly right?: DocumentTransform;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}