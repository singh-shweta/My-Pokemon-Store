{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { invariant } from \"../globals/index.js\";\nimport { visit, Kind } from \"graphql\";\nimport { checkDocument, getOperationDefinition, getFragmentDefinition, getFragmentDefinitions, getMainDefinition } from \"./getFromAST.js\";\nimport { isField } from \"./storeUtils.js\";\nimport { createFragmentMap } from \"./fragments.js\";\nimport { isArray, isNonEmptyArray } from \"../common/arrays.js\";\nvar TYPENAME_FIELD = {\n  kind: Kind.FIELD,\n  name: {\n    kind: Kind.NAME,\n    value: \"__typename\"\n  }\n};\nfunction isEmpty(op, fragmentMap) {\n  return !op || op.selectionSet.selections.every(function (selection) {\n    return selection.kind === Kind.FRAGMENT_SPREAD && isEmpty(fragmentMap[selection.name.value], fragmentMap);\n  });\n}\nfunction nullIfDocIsEmpty(doc) {\n  return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;\n}\nfunction getDirectiveMatcher(configs) {\n  var names = new Map();\n  var tests = new Map();\n  configs.forEach(function (directive) {\n    if (directive) {\n      if (directive.name) {\n        names.set(directive.name, directive);\n      } else if (directive.test) {\n        tests.set(directive.test, directive);\n      }\n    }\n  });\n  return function (directive) {\n    var config = names.get(directive.name.value);\n    if (!config && tests.size) {\n      tests.forEach(function (testConfig, test) {\n        if (test(directive)) {\n          config = testConfig;\n        }\n      });\n    }\n    return config;\n  };\n}\nfunction makeInUseGetterFunction(defaultKey) {\n  var map = new Map();\n  return function inUseGetterFunction(key) {\n    if (key === void 0) {\n      key = defaultKey;\n    }\n    var inUse = map.get(key);\n    if (!inUse) {\n      map.set(key, inUse = {\n        // Variable and fragment spread names used directly within this\n        // operation or fragment definition, as identified by key. These sets\n        // will be populated during the first traversal of the document in\n        // removeDirectivesFromDocument below.\n        variables: new Set(),\n        fragmentSpreads: new Set()\n      });\n    }\n    return inUse;\n  };\n}\nexport function removeDirectivesFromDocument(directives, doc) {\n  checkDocument(doc);\n  // Passing empty strings to makeInUseGetterFunction means we handle anonymous\n  // operations as if their names were \"\". Anonymous fragment definitions are\n  // not supposed to be possible, but the same default naming strategy seems\n  // appropriate for that case as well.\n  var getInUseByOperationName = makeInUseGetterFunction(\"\");\n  var getInUseByFragmentName = makeInUseGetterFunction(\"\");\n  var getInUse = function (ancestors) {\n    for (var p = 0, ancestor = void 0; p < ancestors.length && (ancestor = ancestors[p]); ++p) {\n      if (isArray(ancestor)) continue;\n      if (ancestor.kind === Kind.OPERATION_DEFINITION) {\n        // If an operation is anonymous, we use the empty string as its key.\n        return getInUseByOperationName(ancestor.name && ancestor.name.value);\n      }\n      if (ancestor.kind === Kind.FRAGMENT_DEFINITION) {\n        return getInUseByFragmentName(ancestor.name.value);\n      }\n    }\n    globalThis.__DEV__ !== false && invariant.error(86);\n    return null;\n  };\n  var operationCount = 0;\n  for (var i = doc.definitions.length - 1; i >= 0; --i) {\n    if (doc.definitions[i].kind === Kind.OPERATION_DEFINITION) {\n      ++operationCount;\n    }\n  }\n  var directiveMatcher = getDirectiveMatcher(directives);\n  var shouldRemoveField = function (nodeDirectives) {\n    return isNonEmptyArray(nodeDirectives) && nodeDirectives.map(directiveMatcher).some(function (config) {\n      return config && config.remove;\n    });\n  };\n  var originalFragmentDefsByPath = new Map();\n  // Any time the first traversal of the document below makes a change like\n  // removing a fragment (by returning null), this variable should be set to\n  // true. Once it becomes true, it should never be set to false again. If this\n  // variable remains false throughout the traversal, then we can return the\n  // original doc immediately without any modifications.\n  var firstVisitMadeChanges = false;\n  var fieldOrInlineFragmentVisitor = {\n    enter: function (node) {\n      if (shouldRemoveField(node.directives)) {\n        firstVisitMadeChanges = true;\n        return null;\n      }\n    }\n  };\n  var docWithoutDirectiveSubtrees = visit(doc, {\n    // These two AST node types share the same implementation, defined above.\n    Field: fieldOrInlineFragmentVisitor,\n    InlineFragment: fieldOrInlineFragmentVisitor,\n    VariableDefinition: {\n      enter: function () {\n        // VariableDefinition nodes do not count as variables in use, though\n        // they do contain Variable nodes that might be visited below. To avoid\n        // counting variable declarations as usages, we skip visiting the\n        // contents of this VariableDefinition node by returning false.\n        return false;\n      }\n    },\n    Variable: {\n      enter: function (node, _key, _parent, _path, ancestors) {\n        var inUse = getInUse(ancestors);\n        if (inUse) {\n          inUse.variables.add(node.name.value);\n        }\n      }\n    },\n    FragmentSpread: {\n      enter: function (node, _key, _parent, _path, ancestors) {\n        if (shouldRemoveField(node.directives)) {\n          firstVisitMadeChanges = true;\n          return null;\n        }\n        var inUse = getInUse(ancestors);\n        if (inUse) {\n          inUse.fragmentSpreads.add(node.name.value);\n        }\n        // We might like to remove this FragmentSpread by returning null here if\n        // the corresponding FragmentDefinition node is also going to be removed\n        // by the logic below, but we can't control the relative order of those\n        // events, so we have to postpone the removal of dangling FragmentSpread\n        // nodes until after the current visit of the document has finished.\n      }\n    },\n    FragmentDefinition: {\n      enter: function (node, _key, _parent, path) {\n        originalFragmentDefsByPath.set(JSON.stringify(path), node);\n      },\n      leave: function (node, _key, _parent, path) {\n        var originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));\n        if (node === originalNode) {\n          // If the FragmentNode received by this leave function is identical to\n          // the one received by the corresponding enter function (above), then\n          // the visitor must not have made any changes within this\n          // FragmentDefinition node. This fragment definition may still be\n          // removed if there are no ...spread references to it, but it won't be\n          // removed just because it has only a __typename field.\n          return node;\n        }\n        if (\n        // This logic applies only if the document contains one or more\n        // operations, since removing all fragments from a document containing\n        // only fragments makes the document useless.\n        operationCount > 0 && node.selectionSet.selections.every(function (selection) {\n          return selection.kind === Kind.FIELD && selection.name.value === \"__typename\";\n        })) {\n          // This is a somewhat opinionated choice: if a FragmentDefinition ends\n          // up having no fields other than __typename, we remove the whole\n          // fragment definition, and later prune ...spread references to it.\n          getInUseByFragmentName(node.name.value).removed = true;\n          firstVisitMadeChanges = true;\n          return null;\n        }\n      }\n    },\n    Directive: {\n      leave: function (node) {\n        // If a matching directive is found, remove the directive itself. Note\n        // that this does not remove the target (field, argument, etc) of the\n        // directive, but only the directive itself.\n        if (directiveMatcher(node)) {\n          firstVisitMadeChanges = true;\n          return null;\n        }\n      }\n    }\n  });\n  if (!firstVisitMadeChanges) {\n    // If our first pass did not change anything about the document, then there\n    // is no cleanup we need to do, and we can return the original doc.\n    return doc;\n  }\n  // Utility for making sure inUse.transitiveVars is recursively populated.\n  // Because this logic assumes inUse.fragmentSpreads has been completely\n  // populated and inUse.removed has been set if appropriate,\n  // populateTransitiveVars must be called after that information has been\n  // collected by the first traversal of the document.\n  var populateTransitiveVars = function (inUse) {\n    if (!inUse.transitiveVars) {\n      inUse.transitiveVars = new Set(inUse.variables);\n      if (!inUse.removed) {\n        inUse.fragmentSpreads.forEach(function (childFragmentName) {\n          populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach(function (varName) {\n            inUse.transitiveVars.add(varName);\n          });\n        });\n      }\n    }\n    return inUse;\n  };\n  // Since we've been keeping track of fragment spreads used by particular\n  // operations and fragment definitions, we now need to compute the set of all\n  // spreads used (transitively) by any operations in the document.\n  var allFragmentNamesUsed = new Set();\n  docWithoutDirectiveSubtrees.definitions.forEach(function (def) {\n    if (def.kind === Kind.OPERATION_DEFINITION) {\n      populateTransitiveVars(getInUseByOperationName(def.name && def.name.value)).fragmentSpreads.forEach(function (childFragmentName) {\n        allFragmentNamesUsed.add(childFragmentName);\n      });\n    } else if (def.kind === Kind.FRAGMENT_DEFINITION &&\n    // If there are no operations in the document, then all fragment\n    // definitions count as usages of their own fragment names. This heuristic\n    // prevents accidentally removing all fragment definitions from the\n    // document just because it contains no operations that use the fragments.\n    operationCount === 0 && !getInUseByFragmentName(def.name.value).removed) {\n      allFragmentNamesUsed.add(def.name.value);\n    }\n  });\n  // Now that we have added all fragment spreads used by operations to the\n  // allFragmentNamesUsed set, we can complete the set by transitively adding\n  // all fragment spreads used by those fragments, and so on.\n  allFragmentNamesUsed.forEach(function (fragmentName) {\n    // Once all the childFragmentName strings added here have been seen already,\n    // the top-level allFragmentNamesUsed.forEach loop will terminate.\n    populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach(function (childFragmentName) {\n      allFragmentNamesUsed.add(childFragmentName);\n    });\n  });\n  var fragmentWillBeRemoved = function (fragmentName) {\n    return !!(\n    // A fragment definition will be removed if there are no spreads that refer\n    // to it, or the fragment was explicitly removed because it had no fields\n    // other than __typename.\n    !allFragmentNamesUsed.has(fragmentName) || getInUseByFragmentName(fragmentName).removed);\n  };\n  var enterVisitor = {\n    enter: function (node) {\n      if (fragmentWillBeRemoved(node.name.value)) {\n        return null;\n      }\n    }\n  };\n  return nullIfDocIsEmpty(visit(docWithoutDirectiveSubtrees, {\n    // If the fragment is going to be removed, then leaving any dangling\n    // FragmentSpread nodes with the same name would be a mistake.\n    FragmentSpread: enterVisitor,\n    // This is where the fragment definition is actually removed.\n    FragmentDefinition: enterVisitor,\n    OperationDefinition: {\n      leave: function (node) {\n        // Upon leaving each operation in the depth-first AST traversal, prune\n        // any variables that are declared by the operation but unused within.\n        if (node.variableDefinitions) {\n          var usedVariableNames_1 = populateTransitiveVars(\n          // If an operation is anonymous, we use the empty string as its key.\n          getInUseByOperationName(node.name && node.name.value)).transitiveVars;\n          // According to the GraphQL spec, all variables declared by an\n          // operation must either be used by that operation or used by some\n          // fragment included transitively into that operation:\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          //\n          // To stay on the right side of this validation rule, if/when we\n          // remove the last $var references from an operation or its fragments,\n          // we must also remove the corresponding $var declaration from the\n          // enclosing operation. This pruning applies only to operations and\n          // not fragment definitions, at the moment. Fragments may be able to\n          // declare variables eventually, but today they can only consume them.\n          if (usedVariableNames_1.size < node.variableDefinitions.length) {\n            return __assign(__assign({}, node), {\n              variableDefinitions: node.variableDefinitions.filter(function (varDef) {\n                return usedVariableNames_1.has(varDef.variable.name.value);\n              })\n            });\n          }\n        }\n      }\n    }\n  }));\n}\nexport var addTypenameToDocument = Object.assign(function (doc) {\n  return visit(doc, {\n    SelectionSet: {\n      enter: function (node, _key, parent) {\n        // Don't add __typename to OperationDefinitions.\n        if (parent && parent.kind === Kind.OPERATION_DEFINITION) {\n          return;\n        }\n        // No changes if no selections.\n        var selections = node.selections;\n        if (!selections) {\n          return;\n        }\n        // If selections already have a __typename, or are part of an\n        // introspection query, do nothing.\n        var skip = selections.some(function (selection) {\n          return isField(selection) && (selection.name.value === \"__typename\" || selection.name.value.lastIndexOf(\"__\", 0) === 0);\n        });\n        if (skip) {\n          return;\n        }\n        // If this SelectionSet is @export-ed as an input variable, it should\n        // not have a __typename field (see issue #4691).\n        var field = parent;\n        if (isField(field) && field.directives && field.directives.some(function (d) {\n          return d.name.value === \"export\";\n        })) {\n          return;\n        }\n        // Create and return a new SelectionSet with a __typename Field.\n        return __assign(__assign({}, node), {\n          selections: __spreadArray(__spreadArray([], selections, true), [TYPENAME_FIELD], false)\n        });\n      }\n    }\n  });\n}, {\n  added: function (field) {\n    return field === TYPENAME_FIELD;\n  }\n});\nvar connectionRemoveConfig = {\n  test: function (directive) {\n    var willRemove = directive.name.value === \"connection\";\n    if (willRemove) {\n      if (!directive.arguments || !directive.arguments.some(function (arg) {\n        return arg.name.value === \"key\";\n      })) {\n        globalThis.__DEV__ !== false && invariant.warn(87);\n      }\n    }\n    return willRemove;\n  }\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n  return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n  return !!selectionSet && selectionSet.selections && selectionSet.selections.some(function (selection) {\n    return hasDirectivesInSelection(directives, selection, nestedCheck);\n  });\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n  if (!isField(selection)) {\n    return true;\n  }\n  if (!selection.directives) {\n    return false;\n  }\n  return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\nfunction getArgumentMatcher(config) {\n  return function argumentMatcher(argument) {\n    return config.some(function (aConfig) {\n      return argument.value && argument.value.kind === Kind.VARIABLE && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n    });\n  };\n}\nexport function removeArgumentsFromDocument(config, doc) {\n  var argMatcher = getArgumentMatcher(config);\n  return nullIfDocIsEmpty(visit(doc, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          // Remove matching top level variables definitions.\n          variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {\n            return !config.some(function (arg) {\n              return arg.name === varDef.variable.name.value;\n            });\n          }) : []\n        });\n      }\n    },\n    Field: {\n      enter: function (node) {\n        // If `remove` is set to true for an argument, and an argument match\n        // is found for a field, remove the field as well.\n        var shouldRemoveField = config.some(function (argConfig) {\n          return argConfig.remove;\n        });\n        if (shouldRemoveField) {\n          var argMatchCount_1 = 0;\n          if (node.arguments) {\n            node.arguments.forEach(function (arg) {\n              if (argMatcher(arg)) {\n                argMatchCount_1 += 1;\n              }\n            });\n          }\n          if (argMatchCount_1 === 1) {\n            return null;\n          }\n        }\n      }\n    },\n    Argument: {\n      enter: function (node) {\n        // Remove all matching arguments.\n        if (argMatcher(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n}\nexport function removeFragmentSpreadFromDocument(config, doc) {\n  function enter(node) {\n    if (config.some(function (def) {\n      return def.name === node.name.value;\n    })) {\n      return null;\n    }\n  }\n  return nullIfDocIsEmpty(visit(doc, {\n    FragmentSpread: {\n      enter: enter\n    },\n    FragmentDefinition: {\n      enter: enter\n    }\n  }));\n}\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nexport function buildQueryFromSelectionSet(document) {\n  var definition = getMainDefinition(document);\n  var definitionOperation = definition.operation;\n  if (definitionOperation === \"query\") {\n    // Already a query, so return the existing document.\n    return document;\n  }\n  // Build a new query using the selection set of the main operation.\n  var modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          operation: \"query\"\n        });\n      }\n    }\n  });\n  return modifiedDoc;\n}\n// Remove fields / selection sets that include an @client directive.\nexport function removeClientSetsFromDocument(document) {\n  checkDocument(document);\n  var modifiedDoc = removeDirectivesFromDocument([{\n    test: function (directive) {\n      return directive.name.value === \"client\";\n    },\n    remove: true\n  }], document);\n  return modifiedDoc;\n}","map":{"version":3,"sources":["../../../src/utilities/graphql/transform.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS,QAAQ,qBAAqB;AAiB/C,SAAS,KAAK,EAAE,IAAI,QAAQ,SAAS;AAErC,SACE,aAAa,EACb,sBAAsB,EACtB,qBAAqB,EACrB,sBAAsB,EACtB,iBAAiB,QACZ,iBAAiB;AACxB,SAAS,OAAO,QAAQ,iBAAiB;AAEzC,SAAS,iBAAiB,QAAQ,gBAAgB;AAClD,SAAS,OAAO,EAAE,eAAe,QAAQ,qBAAqB;AA6B9D,IAAM,cAAc,GAAc;EAChC,IAAI,EAAE,IAAI,CAAC,KAAK;EAChB,IAAI,EAAE;IACJ,IAAI,EAAE,IAAI,CAAC,IAAI;IACf,KAAK,EAAE;EACR;CACF;AAED,SAAS,OAAO,CACd,EAAoD,EACpD,WAAwB,EAAA;EAExB,OACE,CAAC,EAAE,IACH,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAC9B,UAAC,SAAS,EAAA;IACR,OAAA,SAAS,CAAC,IAAI,KAAK,IAAI,CAAC,eAAe,IACvC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,WAAW,CAAC;EADvD,CACuD,CAC1D;AAEL;AAEA,SAAS,gBAAgB,CAAC,GAAiB,EAAA;EACzC,OACI,OAAO,CACL,sBAAsB,CAAC,GAAG,CAAC,IAAI,qBAAqB,CAAC,GAAG,CAAC,EACzD,iBAAiB,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAC/C,GAED,IAAI,GACJ,GAAG;AACT;AAEA,SAAS,mBAAmB,CAC1B,OAAuD,EAAA;EAEvD,IAAM,KAAK,GAAG,IAAI,GAAG,CAAA,CAAsD;EAE3E,IAAM,KAAK,GAAG,IAAI,GAAG,CAAA,CAGlB;EAEH,OAAO,CAAC,OAAO,CAAC,UAAC,SAAS,EAAA;IACxB,IAAI,SAAS,EAAE;MACb,IAAI,SAAS,CAAC,IAAI,EAAE;QAClB,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC;MACtC,CAAC,MAAM,IAAI,SAAS,CAAC,IAAI,EAAE;QACzB,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC;MACtC;IACF;EACF,CAAC,CAAC;EAEF,OAAO,UAAC,SAAwB,EAAA;IAC9B,IAAI,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;IAC5C,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,IAAI,EAAE;MACzB,KAAK,CAAC,OAAO,CAAC,UAAC,UAAU,EAAE,IAAI,EAAA;QAC7B,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;UACnB,MAAM,GAAG,UAAU;QACrB;MACF,CAAC,CAAC;IACJ;IACA,OAAO,MAAM;EACf,CAAC;AACH;AAcA,SAAS,uBAAuB,CAAO,UAAgB,EAAA;EACrD,IAAM,GAAG,GAAG,IAAI,GAAG,CAAA,CAA2B;EAE9C,OAAO,SAAS,mBAAmB,CACjC,GAAsB,EAAA;IAAtB,IAAA,GAAA,KAAA,KAAA,CAAA,EAAA;MAAA,GAAA,GAAA,UAAsB;IAAA;IAEtB,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACxB,IAAI,CAAC,KAAK,EAAE;MACV,GAAG,CAAC,GAAG,CACL,GAAG,EACF,KAAK,GAAG;QACP;QACA;QACA;QACA;QACA,SAAS,EAAE,IAAI,GAAG,CAAA,CAAE;QACpB,eAAe,EAAE,IAAI,GAAG,CAAA;MACzB,CAAC,CACH;IACH;IACA,OAAO,KAAK;EACd,CAAC;AACH;AAEA,OAAM,SAAU,4BAA4B,CAC1C,UAAmC,EACnC,GAAiB,EAAA;EAEjB,aAAa,CAAC,GAAG,CAAC;EAElB;EACA;EACA;EACA;EACA,IAAM,uBAAuB,GAAG,uBAAuB,CAAS,EAAE,CAAC;EACnE,IAAM,sBAAsB,GAAG,uBAAuB,CAAS,EAAE,CAAC;EAClE,IAAM,QAAQ,GAAG,SAAA,CACf,SAAoD,EAAA;IAEpD,KACE,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,GAAA,KAAA,CAA8B,EACjD,CAAC,GAAG,SAAS,CAAC,MAAM,KAAK,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,EACjD,EAAE,CAAC,EACH;MACA,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE;MACvB,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,oBAAoB,EAAE;QAC/C;QACA,OAAO,uBAAuB,CAAC,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;MACtE;MACA,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,mBAAmB,EAAE;QAC9C,OAAO,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;MACpD;IACF;IACA,UAAU,CAAA,OAAM,KAAA,KAAA,IAAA,SAAA,CAAA,KAAA,CAAA,EAAA,CAAA;IAChB,OAAO,IAAI;EACb,CAAC;EAED,IAAI,cAAc,GAAG,CAAC;EACtB,KAAK,IAAI,CAAC,GAAG,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;IACpD,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,oBAAoB,EAAE;MACzD,EAAE,cAAc;IAClB;EACF;EAEA,IAAM,gBAAgB,GAAG,mBAAmB,CAAC,UAAU,CAAC;EACxD,IAAM,iBAAiB,GAAG,SAAA,CAAC,cAAuC,EAAA;IAChE,OAAA,eAAe,CAAC,cAAc,CAAC,IAC/B,cAAc,CACX,GAAG,CAAC,gBAAgB,CAAC,CACrB,IAAI,CACH,UAAC,MAAyC,EAAA;MAAK,OAAA,MAAM,IAAI,MAAM,CAAC,MAAM;IAAvB,CAAuB,CACvE;EALH,CAKG;EAEL,IAAM,0BAA0B,GAAG,IAAI,GAAG,CAAA,CAAkC;EAE5E;EACA;EACA;EACA;EACA;EACA,IAAI,qBAAqB,GAAG,KAAK;EAEjC,IAAM,4BAA4B,GAE9B;IACF,KAAK,EAAA,SAAA,CAAC,IAAI,EAAA;MACR,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;QACtC,qBAAqB,GAAG,IAAI;QAC5B,OAAO,IAAI;MACb;IACF;GACD;EAED,IAAM,2BAA2B,GAAG,KAAK,CAAC,GAAG,EAAE;IAC7C;IACA,KAAK,EAAE,4BAA4B;IACnC,cAAc,EAAE,4BAA4B;IAE5C,kBAAkB,EAAE;MAClB,KAAK,EAAA,SAAA,CAAA,EAAA;QACH;QACA;QACA;QACA;QACA,OAAO,KAAK;MACd;KACD;IAED,QAAQ,EAAE;MACR,KAAK,EAAA,SAAA,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAA;QACzC,IAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC;QACjC,IAAI,KAAK,EAAE;UACT,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QACtC;MACF;KACD;IAED,cAAc,EAAE;MACd,KAAK,EAAA,SAAA,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAA;QACzC,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;UACtC,qBAAqB,GAAG,IAAI;UAC5B,OAAO,IAAI;QACb;QACA,IAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC;QACjC,IAAI,KAAK,EAAE;UACT,KAAK,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QAC5C;QACA;QACA;QACA;QACA;QACA;MACF;KACD;IAED,kBAAkB,EAAE;MAClB,KAAK,EAAA,SAAA,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAA;QAC7B,0BAA0B,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;MAC5D,CAAC;MACD,KAAK,EAAA,SAAA,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAA;QAC7B,IAAM,YAAY,GAAG,0BAA0B,CAAC,GAAG,CACjD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CACrB;QACD,IAAI,IAAI,KAAK,YAAY,EAAE;UACzB;UACA;UACA;UACA;UACA;UACA;UACA,OAAO,IAAI;QACb;QAEA;QACE;QACA;QACA;QACA,cAAc,GAAG,CAAC,IAClB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAChC,UAAC,SAAS,EAAA;UACR,OAAA,SAAS,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,IAC7B,SAAS,CAAC,IAAI,CAAC,KAAK,KAAK,YAAY;QADrC,CACqC,CACxC,EACD;UACA;UACA;UACA;UACA,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,GAAG,IAAI;UACtD,qBAAqB,GAAG,IAAI;UAC5B,OAAO,IAAI;QACb;MACF;KACD;IAED,SAAS,EAAE;MACT,KAAK,EAAA,SAAA,CAAC,IAAI,EAAA;QACR;QACA;QACA;QACA,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE;UAC1B,qBAAqB,GAAG,IAAI;UAC5B,OAAO,IAAI;QACb;MACF;IACD;GACF,CAAC;EAEF,IAAI,CAAC,qBAAqB,EAAE;IAC1B;IACA;IACA,OAAO,GAAG;EACZ;EAEA;EACA;EACA;EACA;EACA;EACA,IAAM,sBAAsB,GAAG,SAAA,CAAC,KAAwB,EAAA;IACtD,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;MACzB,KAAK,CAAC,cAAc,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC;MAC/C,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;QAClB,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,iBAAiB,EAAA;UAC9C,sBAAsB,CACpB,sBAAsB,CAAC,iBAAiB,CAAC,CAC1C,CAAC,cAAe,CAAC,OAAO,CAAC,UAAC,OAAO,EAAA;YAChC,KAAK,CAAC,cAAe,CAAC,GAAG,CAAC,OAAO,CAAC;UACpC,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;IACF;IACA,OAAO,KAAK;EACd,CAAC;EAED;EACA;EACA;EACA,IAAM,oBAAoB,GAAG,IAAI,GAAG,CAAA,CAAU;EAC9C,2BAA2B,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,GAAG,EAAA;IAClD,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,oBAAoB,EAAE;MAC1C,sBAAsB,CACpB,uBAAuB,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CACpD,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,iBAAiB,EAAA;QAC1C,oBAAoB,CAAC,GAAG,CAAC,iBAAiB,CAAC;MAC7C,CAAC,CAAC;IACJ,CAAC,MAAM,IACL,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,mBAAmB;IACrC;IACA;IACA;IACA;IACA,cAAc,KAAK,CAAC,IACpB,CAAC,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,EAC/C;MACA,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;IAC1C;EACF,CAAC,CAAC;EACF;EACA;EACA;EACA,oBAAoB,CAAC,OAAO,CAAC,UAAC,YAAY,EAAA;IACxC;IACA;IACA,sBAAsB,CACpB,sBAAsB,CAAC,YAAY,CAAC,CACrC,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,iBAAiB,EAAA;MAC1C,oBAAoB,CAAC,GAAG,CAAC,iBAAiB,CAAC;IAC7C,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAM,qBAAqB,GAAG,SAAA,CAAC,YAAoB,EAAA;IACjD,OAAA,CAAC;IACC;IACA;IACA;IAEE,CAAC,oBAAoB,CAAC,GAAG,CAAC,YAAY,CAAC,IACvC,sBAAsB,CAAC,YAAY,CAAC,CAAC,OAAO,CAE/C;EARD,CAQC;EAEH,IAAM,YAAY,GAEd;IACF,KAAK,EAAA,SAAA,CAAC,IAAI,EAAA;MACR,IAAI,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAC1C,OAAO,IAAI;MACb;IACF;GACD;EAED,OAAO,gBAAgB,CACrB,KAAK,CAAC,2BAA2B,EAAE;IACjC;IACA;IACA,cAAc,EAAE,YAAY;IAE5B;IACA,kBAAkB,EAAE,YAAY;IAEhC,mBAAmB,EAAE;MACnB,KAAK,EAAA,SAAA,CAAC,IAAI,EAAA;QACR;QACA;QACA,IAAI,IAAI,CAAC,mBAAmB,EAAE;UAC5B,IAAM,mBAAiB,GAAG,sBAAsB;UAC9C;UACA,uBAAuB,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CACtD,CAAC,cAAe;UAEjB;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,IAAI,mBAAiB,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE;YAC5D,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,IAAI,CAAA,EAAA;cACP,mBAAmB,EAAE,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,UAAC,MAAM,EAAA;gBAC1D,OAAA,mBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;cAAjD,CAAiD;YAClD,CAAA,CAAA;UAEL;QACF;MACF;IACD;GACF,CAAC,CACH;AACH;AAEA,OAAO,IAAM,qBAAqB,GAAG,MAAM,CAAC,MAAM,CAChD,UAAiC,GAAU,EAAA;EACzC,OAAO,KAAK,CAAC,GAAG,EAAE;IAChB,YAAY,EAAE;MACZ,KAAK,EAAA,SAAA,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAA;QACtB;QACA,IACE,MAAM,IACL,MAAkC,CAAC,IAAI,KACtC,IAAI,CAAC,oBAAoB,EAC3B;UACA;QACF;QAEA;QACQ,IAAA,UAAU,GAAK,IAAI,CAAA,UAAT;QAClB,IAAI,CAAC,UAAU,EAAE;UACf;QACF;QAEA;QACA;QACA,IAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,UAAC,SAAS,EAAA;UACrC,OACE,OAAO,CAAC,SAAS,CAAC,KACjB,SAAS,CAAC,IAAI,CAAC,KAAK,KAAK,YAAY,IACpC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QAEtD,CAAC,CAAC;QACF,IAAI,IAAI,EAAE;UACR;QACF;QAEA;QACA;QACA,IAAM,KAAK,GAAG,MAAmB;QACjC,IACE,OAAO,CAAC,KAAK,CAAC,IACd,KAAK,CAAC,UAAU,IAChB,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,UAAC,CAAC,EAAA;UAAK,OAAA,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,QAAQ;QAAzB,CAAyB,CAAC,EACvD;UACA;QACF;QAEA;QACA,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,IAAI,CAAA,EAAA;UACP,UAAU,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAM,UAAU,EAAA,IAAA,CAAA,EAAA,CAAE,cAAc,CAAA,EAAA,KAAA;QAAA,CAAA,CAAA;MAE9C;IACD;GACF,CAAC;AACJ,CAAC,EACD;EACE,KAAK,EAAA,SAAA,CAAC,KAAgB,EAAA;IACpB,OAAO,KAAK,KAAK,cAAc;EACjC;CACD,CACF;AAED,IAAM,sBAAsB,GAAG;EAC7B,IAAI,EAAE,SAAA,CAAC,SAAwB,EAAA;IAC7B,IAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,KAAK,YAAY;IACxD,IAAI,UAAU,EAAE;MACd,IACE,CAAC,SAAS,CAAC,SAAS,IACpB,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,UAAC,GAAG,EAAA;QAAK,OAAA,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK;MAAxB,CAAwB,CAAC,EAC5D;QACA,UAAU,CAAA,OACR,KAAA,KAAA,IAAA,SAAA,CAAA,IAAA,CAAA,EAAA,CAAA;MACE;IAEN;IACF,OAAC,UAAA;EAED;CACF;AACD,OAAC,SAAA,qCAAA,CAAA,GAAA,EAAA;EAEF,OAAM,4BAAU,CAAA,CAAA,sBAAuD,CAAA,EAAA,aAAA,CAAA,GAAA,CAAA,CAAA;AACrE;AAIF,SAAC,2BAAA,CAAA,UAAA,EAAA,YAAA,EAAA,WAAA,EAAA;EAED,IAAA,WAAS,KAAA,KAAA,CAAA,EAAA;IAAA,WACP,GAAgC,IAChC;EAAA;EACA,OAAA,CAAA,CAAA,YAAA,IAEA,YACI,CAAA,UAAY,IACd,YAAY,CAAC,UAAU,CAAA,IAAA,CAAA,UAAA,SAAA,EAAA;IACvB,OAAA,wBAA6B,CAAA,UAAC,EAAS,SAAA,EAAA,WAAA,CAAA;IACrC;AAAA;AAGN,SAAC,wBAAA,CAAA,UAAA,EAAA,SAAA,EAAA,WAAA,EAAA;EAED,IAAA,WAAS,KAAA,KAAA,CAAA,EAAA;IACP,WAAgC,GAChC,IAAA;EAAA;EACA,IAAA,CAAA,OAAA,CAAA,SAAA,CAAA,EAAA;IAEI,OAAC,IAAQ;EACX;EACF,IAAC,CAAA,SAAA,CAAA,UAAA,EAAA;IAEG,OAAC,KAAU;EACb;EACF,OAAC,SAAA,CAAA,UAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,UAAA,CAAA,CAAA,IAED,WACE,IACC,2BAAW,CAAA,UAAA,EAAA,SAAA,CAAA,YAAA,EAAA,WAAA,CAAA;AACV;AAMN,SAAC,kBAAA,CAAA,MAAA,EAAA;EAED,OAAS,SAAA,eAAkD,CAAA,QAAA,EAAA;IACzD,OAAO,MAAS,CAAA,IAAA,CAAA,UAAgB,OAAsB,EAAA;MACpD,OAAO,QACL,CAAA,KAAA,IACE,QAAA,CAAA,KAAS,CAAA,IAAK,KAAA,IAAA,CAAA,QAAA,IACd,QAAQ,CAAC,KAAK,CAAC,IAAI,KACnB,OAAQ,CAAC,IAAA,KAAM,QAAI,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,IAClB,OAAQ,CAAI,IAAA,IAAK,OAAS,CAAA,IAAM,CAAA,QAAK,CAAK,CAAA;MACzC;GAJF;AAMN;AACF,OAAC,SAAA,2BAAA,CAAA,MAAA,EAAA,GAAA,EAAA;EAED,IAAM,UAAU,GAAA,kBAAA,CAAA,MACd,CAAA;EAGA,OAAM,gBAAa,CAAA,KAAA,CAAA,GAAA,EAAkB;IAErC,mBAAuB,EACrB;MACE,KAAA,EAAA,SAAA,CAAqB,IAAA,EAAA;QACnB,OAAK,QAAC,CAAA,QAAI,CAAA,CAAA,CAAA,EAAA,IAAA,CAAA,EAAA;UACR;UAEE,mBAAA,EAAA,IAAA,CAAA,mBAAA,GACA,IAAA,CAAA,mBACO,CAAA,MAAA,CAAA,UAAoB,MAAC,EAAA;YACpB,OAAC,CAAA,MAAA,CAAA,IAAA,CAAmB,UACtB,GAAA,EAAA;cAAA,OAAO,GAAA,CAAA,IAAA,KAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA;YAAA,CAAA,CAAA;YACL,GAGH;QAAA,CAAA,CAAA;MACH;KAEN;IACD,KAAA,EAAA;MAED,KAAO,EAAA,SAAA,CAAA,IAAA,EAAA;QACL;QACE;QACA,IAAA,iBAAA,GAAA,MAAA,CAAA,IAAA,CAAA,UAAA,SAAkD,EAAA;UAAA,OAAA,SAAA,CAAA,MAAA;QAAA,CAAA,CAAA;QAClD,IAAM,iBAAiB,EAAA;UAInB,IAAA,eAAmB,GAAC,CAAA;UACtB,IAAI,IAAA,CAAA,SAAA,EAAa;YACb,IAAI,CAAC,SAAS,CAAA,OAAG,CAAA,UAAA,GAAA,EAAA;cACf,IAAC,UAAU,CAAA,GAAO,CAAC,EAAA;gBACjB,eAAe,IAAG,CAAA;cACpB;cACF;UACF;UACF,IAAC,eAAA,KAAA,CAAA,EAAA;YAEG,OAAA,IAAA;UACF;QACF;MACF;KACF;IACD,QAAA,EAAA;MAED,KAAQ,EAAE,SAAA,CAAA,IAAA,EAAA;QACR;QACE,IAAA,UAAA,CAAA,IAAA,CAAA,EAAA;UACI,OAAA,IAAW;QACb;MACF;IACF;KACD;AACF;AAEL,OAAC,SAAA,gCAAA,CAAA,MAAA,EAAA,GAAA,EAAA;EAED,SAAM,KAAU,CAAA,IAAA,EAAA;IAId,IAAA,MAAc,CACZ,IAAiD,CAAA,UAAA,GAAA,EAAA;MAAA,OAAA,GAAA,CAAA,IAAA,KAAA,IAAA,CAAA,IAAA,CAAA,KAAA;IAAA,CAAA,CAAA,EAAA;MAE7C,OAAO,IAAI;IACb;EACF;EACF,OAAC,gBAAA,CAAA,KAAA,CAAA,GAAA,EAAA;IAED,cAAO,EAAA;MAAA,KACL,EAAK;IAAM,CAAA;IACT,kBAAkB,EAAA;MAAA,KAAK,EAAA;IAAE;KACzB;AACD;AAEL;AAEA;AACA;AACA,OAAA,SAAA,0BAAkC,CAAA,QAAA,EAAA;EAClC,IAAM,UAAU,GAAA,iBAAA,CAAA,QACd,CAAA;EAEA,IAAM,mBAAa,GAAA,UAAkB,CAAA,SAAU;EAC/C,IAAM,mBAAmB,KAA6B,OAAA,EAAY;IAE9D;IACF,OAAA,QAAA;EACA;EACF;EAEA,IAAA,WAAA,GAAA,KAAA,CAAA,QAAA,EAAA;IACM,mBAAmB,EAAC;MACxB,KAAA,EAAA,SAAA,CAAqB,IAAA,EAAA;QACnB,OAAK,QAAC,CAAA,QAAI,CAAA,CAAA,CAAA,EAAA,IAAA,CAAA,EAAA;UAAA,SAAA,EAAA;QAAA,CAAA,CAAA;MACR;IAIF;IACD;EACF,OAAE,WAAA;AACH;AACF;AAEA,OAAA,SAAA,4BAAA,CAAA,QAAA,EAAA;EACA,aAAgB,CAAA,QAAA,CAAA;EAGd,IAAA,WAAc,GAAA,4BAAU,CAAA,CAEpB;IAEA,IAAA,EAAA,SAAA,CAAA,SAAA,EAAA;MAAA,OAAA,SAAA,CAAA,IAAA,CAAA,KAAA,KAAA,QAAA;IAAA,CAAA;IACE,MAAM,EAAA;GACN,C,EACD,QAAA,CAAA;EACF,OACD,WACA;AAEF","sourcesContent":["import { invariant } from \"../globals/index.js\";\n\nimport type {\n  DocumentNode,\n  SelectionNode,\n  SelectionSetNode,\n  OperationDefinitionNode,\n  FieldNode,\n  DirectiveNode,\n  FragmentDefinitionNode,\n  ArgumentNode,\n  FragmentSpreadNode,\n  VariableDefinitionNode,\n  ASTNode,\n  ASTVisitFn,\n  InlineFragmentNode,\n} from \"graphql\";\nimport { visit, Kind } from \"graphql\";\n\nimport {\n  checkDocument,\n  getOperationDefinition,\n  getFragmentDefinition,\n  getFragmentDefinitions,\n  getMainDefinition,\n} from \"./getFromAST.js\";\nimport { isField } from \"./storeUtils.js\";\nimport type { FragmentMap } from \"./fragments.js\";\nimport { createFragmentMap } from \"./fragments.js\";\nimport { isArray, isNonEmptyArray } from \"../common/arrays.js\";\n\n// https://github.com/graphql/graphql-js/blob/8d7c8fccf5a9846a50785de04abda58a7eb13fc0/src/language/visitor.ts#L20-L23\ninterface EnterLeaveVisitor<TVisitedNode extends ASTNode> {\n  readonly enter?: ASTVisitFn<TVisitedNode>;\n  readonly leave?: ASTVisitFn<TVisitedNode>;\n}\n\nexport type RemoveNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n  remove?: boolean;\n};\n\nexport type GetNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n};\n\nexport type RemoveDirectiveConfig = RemoveNodeConfig<DirectiveNode>;\nexport type GetDirectiveConfig = GetNodeConfig<DirectiveNode>;\nexport type RemoveArgumentsConfig = RemoveNodeConfig<ArgumentNode>;\nexport type GetFragmentSpreadConfig = GetNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentSpreadConfig = RemoveNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentDefinitionConfig =\n  RemoveNodeConfig<FragmentDefinitionNode>;\nexport type RemoveVariableDefinitionConfig =\n  RemoveNodeConfig<VariableDefinitionNode>;\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: Kind.FIELD,\n  name: {\n    kind: Kind.NAME,\n    value: \"__typename\",\n  },\n};\n\nfunction isEmpty(\n  op: OperationDefinitionNode | FragmentDefinitionNode,\n  fragmentMap: FragmentMap\n): boolean {\n  return (\n    !op ||\n    op.selectionSet.selections.every(\n      (selection) =>\n        selection.kind === Kind.FRAGMENT_SPREAD &&\n        isEmpty(fragmentMap[selection.name.value], fragmentMap)\n    )\n  );\n}\n\nfunction nullIfDocIsEmpty(doc: DocumentNode) {\n  return (\n      isEmpty(\n        getOperationDefinition(doc) || getFragmentDefinition(doc),\n        createFragmentMap(getFragmentDefinitions(doc))\n      )\n    ) ?\n      null\n    : doc;\n}\n\nfunction getDirectiveMatcher(\n  configs: (RemoveDirectiveConfig | GetDirectiveConfig)[]\n) {\n  const names = new Map<string, RemoveDirectiveConfig | GetDirectiveConfig>();\n\n  const tests = new Map<\n    (directive: DirectiveNode) => boolean,\n    RemoveDirectiveConfig | GetDirectiveConfig\n  >();\n\n  configs.forEach((directive) => {\n    if (directive) {\n      if (directive.name) {\n        names.set(directive.name, directive);\n      } else if (directive.test) {\n        tests.set(directive.test, directive);\n      }\n    }\n  });\n\n  return (directive: DirectiveNode) => {\n    let config = names.get(directive.name.value);\n    if (!config && tests.size) {\n      tests.forEach((testConfig, test) => {\n        if (test(directive)) {\n          config = testConfig;\n        }\n      });\n    }\n    return config;\n  };\n}\n\n// Helper interface and function used by removeDirectivesFromDocument to keep\n// track of variable references and fragments spreads found within a given\n// operation or fragment definition.\ninterface InternalInUseInfo {\n  variables: Set<string>;\n  fragmentSpreads: Set<string>;\n  // Set to true when we deliberately remove a fragment definition, so we can\n  // make sure also to remove dangling ...spreads that refer to it.\n  removed?: boolean;\n  // Populated by the populateTransitiveVars helper function below.\n  transitiveVars?: Set<string>;\n}\nfunction makeInUseGetterFunction<TKey>(defaultKey: TKey) {\n  const map = new Map<TKey, InternalInUseInfo>();\n\n  return function inUseGetterFunction(\n    key: TKey = defaultKey\n  ): InternalInUseInfo {\n    let inUse = map.get(key);\n    if (!inUse) {\n      map.set(\n        key,\n        (inUse = {\n          // Variable and fragment spread names used directly within this\n          // operation or fragment definition, as identified by key. These sets\n          // will be populated during the first traversal of the document in\n          // removeDirectivesFromDocument below.\n          variables: new Set(),\n          fragmentSpreads: new Set(),\n        })\n      );\n    }\n    return inUse;\n  };\n}\n\nexport function removeDirectivesFromDocument(\n  directives: RemoveDirectiveConfig[],\n  doc: DocumentNode\n): DocumentNode | null {\n  checkDocument(doc);\n\n  // Passing empty strings to makeInUseGetterFunction means we handle anonymous\n  // operations as if their names were \"\". Anonymous fragment definitions are\n  // not supposed to be possible, but the same default naming strategy seems\n  // appropriate for that case as well.\n  const getInUseByOperationName = makeInUseGetterFunction<string>(\"\");\n  const getInUseByFragmentName = makeInUseGetterFunction<string>(\"\");\n  const getInUse = (\n    ancestors: readonly (ASTNode | readonly ASTNode[])[]\n  ): InternalInUseInfo | null => {\n    for (\n      let p = 0, ancestor: ASTNode | readonly ASTNode[];\n      p < ancestors.length && (ancestor = ancestors[p]);\n      ++p\n    ) {\n      if (isArray(ancestor)) continue;\n      if (ancestor.kind === Kind.OPERATION_DEFINITION) {\n        // If an operation is anonymous, we use the empty string as its key.\n        return getInUseByOperationName(ancestor.name && ancestor.name.value);\n      }\n      if (ancestor.kind === Kind.FRAGMENT_DEFINITION) {\n        return getInUseByFragmentName(ancestor.name.value);\n      }\n    }\n    invariant.error(`Could not find operation or fragment`);\n    return null;\n  };\n\n  let operationCount = 0;\n  for (let i = doc.definitions.length - 1; i >= 0; --i) {\n    if (doc.definitions[i].kind === Kind.OPERATION_DEFINITION) {\n      ++operationCount;\n    }\n  }\n\n  const directiveMatcher = getDirectiveMatcher(directives);\n  const shouldRemoveField = (nodeDirectives: FieldNode[\"directives\"]) =>\n    isNonEmptyArray(nodeDirectives) &&\n    nodeDirectives\n      .map(directiveMatcher)\n      .some(\n        (config: RemoveDirectiveConfig | undefined) => config && config.remove\n      );\n\n  const originalFragmentDefsByPath = new Map<string, FragmentDefinitionNode>();\n\n  // Any time the first traversal of the document below makes a change like\n  // removing a fragment (by returning null), this variable should be set to\n  // true. Once it becomes true, it should never be set to false again. If this\n  // variable remains false throughout the traversal, then we can return the\n  // original doc immediately without any modifications.\n  let firstVisitMadeChanges = false;\n\n  const fieldOrInlineFragmentVisitor: EnterLeaveVisitor<\n    FieldNode | InlineFragmentNode\n  > = {\n    enter(node) {\n      if (shouldRemoveField(node.directives)) {\n        firstVisitMadeChanges = true;\n        return null;\n      }\n    },\n  };\n\n  const docWithoutDirectiveSubtrees = visit(doc, {\n    // These two AST node types share the same implementation, defined above.\n    Field: fieldOrInlineFragmentVisitor,\n    InlineFragment: fieldOrInlineFragmentVisitor,\n\n    VariableDefinition: {\n      enter() {\n        // VariableDefinition nodes do not count as variables in use, though\n        // they do contain Variable nodes that might be visited below. To avoid\n        // counting variable declarations as usages, we skip visiting the\n        // contents of this VariableDefinition node by returning false.\n        return false;\n      },\n    },\n\n    Variable: {\n      enter(node, _key, _parent, _path, ancestors) {\n        const inUse = getInUse(ancestors);\n        if (inUse) {\n          inUse.variables.add(node.name.value);\n        }\n      },\n    },\n\n    FragmentSpread: {\n      enter(node, _key, _parent, _path, ancestors) {\n        if (shouldRemoveField(node.directives)) {\n          firstVisitMadeChanges = true;\n          return null;\n        }\n        const inUse = getInUse(ancestors);\n        if (inUse) {\n          inUse.fragmentSpreads.add(node.name.value);\n        }\n        // We might like to remove this FragmentSpread by returning null here if\n        // the corresponding FragmentDefinition node is also going to be removed\n        // by the logic below, but we can't control the relative order of those\n        // events, so we have to postpone the removal of dangling FragmentSpread\n        // nodes until after the current visit of the document has finished.\n      },\n    },\n\n    FragmentDefinition: {\n      enter(node, _key, _parent, path) {\n        originalFragmentDefsByPath.set(JSON.stringify(path), node);\n      },\n      leave(node, _key, _parent, path) {\n        const originalNode = originalFragmentDefsByPath.get(\n          JSON.stringify(path)\n        );\n        if (node === originalNode) {\n          // If the FragmentNode received by this leave function is identical to\n          // the one received by the corresponding enter function (above), then\n          // the visitor must not have made any changes within this\n          // FragmentDefinition node. This fragment definition may still be\n          // removed if there are no ...spread references to it, but it won't be\n          // removed just because it has only a __typename field.\n          return node;\n        }\n\n        if (\n          // This logic applies only if the document contains one or more\n          // operations, since removing all fragments from a document containing\n          // only fragments makes the document useless.\n          operationCount > 0 &&\n          node.selectionSet.selections.every(\n            (selection) =>\n              selection.kind === Kind.FIELD &&\n              selection.name.value === \"__typename\"\n          )\n        ) {\n          // This is a somewhat opinionated choice: if a FragmentDefinition ends\n          // up having no fields other than __typename, we remove the whole\n          // fragment definition, and later prune ...spread references to it.\n          getInUseByFragmentName(node.name.value).removed = true;\n          firstVisitMadeChanges = true;\n          return null;\n        }\n      },\n    },\n\n    Directive: {\n      leave(node) {\n        // If a matching directive is found, remove the directive itself. Note\n        // that this does not remove the target (field, argument, etc) of the\n        // directive, but only the directive itself.\n        if (directiveMatcher(node)) {\n          firstVisitMadeChanges = true;\n          return null;\n        }\n      },\n    },\n  });\n\n  if (!firstVisitMadeChanges) {\n    // If our first pass did not change anything about the document, then there\n    // is no cleanup we need to do, and we can return the original doc.\n    return doc;\n  }\n\n  // Utility for making sure inUse.transitiveVars is recursively populated.\n  // Because this logic assumes inUse.fragmentSpreads has been completely\n  // populated and inUse.removed has been set if appropriate,\n  // populateTransitiveVars must be called after that information has been\n  // collected by the first traversal of the document.\n  const populateTransitiveVars = (inUse: InternalInUseInfo) => {\n    if (!inUse.transitiveVars) {\n      inUse.transitiveVars = new Set(inUse.variables);\n      if (!inUse.removed) {\n        inUse.fragmentSpreads.forEach((childFragmentName) => {\n          populateTransitiveVars(\n            getInUseByFragmentName(childFragmentName)\n          ).transitiveVars!.forEach((varName) => {\n            inUse.transitiveVars!.add(varName);\n          });\n        });\n      }\n    }\n    return inUse;\n  };\n\n  // Since we've been keeping track of fragment spreads used by particular\n  // operations and fragment definitions, we now need to compute the set of all\n  // spreads used (transitively) by any operations in the document.\n  const allFragmentNamesUsed = new Set<string>();\n  docWithoutDirectiveSubtrees.definitions.forEach((def) => {\n    if (def.kind === Kind.OPERATION_DEFINITION) {\n      populateTransitiveVars(\n        getInUseByOperationName(def.name && def.name.value)\n      ).fragmentSpreads.forEach((childFragmentName) => {\n        allFragmentNamesUsed.add(childFragmentName);\n      });\n    } else if (\n      def.kind === Kind.FRAGMENT_DEFINITION &&\n      // If there are no operations in the document, then all fragment\n      // definitions count as usages of their own fragment names. This heuristic\n      // prevents accidentally removing all fragment definitions from the\n      // document just because it contains no operations that use the fragments.\n      operationCount === 0 &&\n      !getInUseByFragmentName(def.name.value).removed\n    ) {\n      allFragmentNamesUsed.add(def.name.value);\n    }\n  });\n  // Now that we have added all fragment spreads used by operations to the\n  // allFragmentNamesUsed set, we can complete the set by transitively adding\n  // all fragment spreads used by those fragments, and so on.\n  allFragmentNamesUsed.forEach((fragmentName) => {\n    // Once all the childFragmentName strings added here have been seen already,\n    // the top-level allFragmentNamesUsed.forEach loop will terminate.\n    populateTransitiveVars(\n      getInUseByFragmentName(fragmentName)\n    ).fragmentSpreads.forEach((childFragmentName) => {\n      allFragmentNamesUsed.add(childFragmentName);\n    });\n  });\n\n  const fragmentWillBeRemoved = (fragmentName: string) =>\n    !!(\n      // A fragment definition will be removed if there are no spreads that refer\n      // to it, or the fragment was explicitly removed because it had no fields\n      // other than __typename.\n      (\n        !allFragmentNamesUsed.has(fragmentName) ||\n        getInUseByFragmentName(fragmentName).removed\n      )\n    );\n\n  const enterVisitor: EnterLeaveVisitor<\n    FragmentSpreadNode | FragmentDefinitionNode\n  > = {\n    enter(node) {\n      if (fragmentWillBeRemoved(node.name.value)) {\n        return null;\n      }\n    },\n  };\n\n  return nullIfDocIsEmpty(\n    visit(docWithoutDirectiveSubtrees, {\n      // If the fragment is going to be removed, then leaving any dangling\n      // FragmentSpread nodes with the same name would be a mistake.\n      FragmentSpread: enterVisitor,\n\n      // This is where the fragment definition is actually removed.\n      FragmentDefinition: enterVisitor,\n\n      OperationDefinition: {\n        leave(node) {\n          // Upon leaving each operation in the depth-first AST traversal, prune\n          // any variables that are declared by the operation but unused within.\n          if (node.variableDefinitions) {\n            const usedVariableNames = populateTransitiveVars(\n              // If an operation is anonymous, we use the empty string as its key.\n              getInUseByOperationName(node.name && node.name.value)\n            ).transitiveVars!;\n\n            // According to the GraphQL spec, all variables declared by an\n            // operation must either be used by that operation or used by some\n            // fragment included transitively into that operation:\n            // https://spec.graphql.org/draft/#sec-All-Variables-Used\n            //\n            // To stay on the right side of this validation rule, if/when we\n            // remove the last $var references from an operation or its fragments,\n            // we must also remove the corresponding $var declaration from the\n            // enclosing operation. This pruning applies only to operations and\n            // not fragment definitions, at the moment. Fragments may be able to\n            // declare variables eventually, but today they can only consume them.\n            if (usedVariableNames.size < node.variableDefinitions.length) {\n              return {\n                ...node,\n                variableDefinitions: node.variableDefinitions.filter((varDef) =>\n                  usedVariableNames.has(varDef.variable.name.value)\n                ),\n              };\n            }\n          }\n        },\n      },\n    })\n  );\n}\n\nexport const addTypenameToDocument = Object.assign(\n  function <TNode extends ASTNode>(doc: TNode): TNode {\n    return visit(doc, {\n      SelectionSet: {\n        enter(node, _key, parent) {\n          // Don't add __typename to OperationDefinitions.\n          if (\n            parent &&\n            (parent as OperationDefinitionNode).kind ===\n              Kind.OPERATION_DEFINITION\n          ) {\n            return;\n          }\n\n          // No changes if no selections.\n          const { selections } = node;\n          if (!selections) {\n            return;\n          }\n\n          // If selections already have a __typename, or are part of an\n          // introspection query, do nothing.\n          const skip = selections.some((selection) => {\n            return (\n              isField(selection) &&\n              (selection.name.value === \"__typename\" ||\n                selection.name.value.lastIndexOf(\"__\", 0) === 0)\n            );\n          });\n          if (skip) {\n            return;\n          }\n\n          // If this SelectionSet is @export-ed as an input variable, it should\n          // not have a __typename field (see issue #4691).\n          const field = parent as FieldNode;\n          if (\n            isField(field) &&\n            field.directives &&\n            field.directives.some((d) => d.name.value === \"export\")\n          ) {\n            return;\n          }\n\n          // Create and return a new SelectionSet with a __typename Field.\n          return {\n            ...node,\n            selections: [...selections, TYPENAME_FIELD],\n          };\n        },\n      },\n    });\n  },\n  {\n    added(field: FieldNode): boolean {\n      return field === TYPENAME_FIELD;\n    },\n  }\n);\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => {\n    const willRemove = directive.name.value === \"connection\";\n    if (willRemove) {\n      if (\n        !directive.arguments ||\n        !directive.arguments.some((arg) => arg.name.value === \"key\")\n      ) {\n        invariant.warn(\n          \"Removing an @connection directive even though it does not have a key. \" +\n            \"You may want to use the key parameter to specify a store key.\"\n        );\n      }\n    }\n\n    return willRemove;\n  },\n};\n\nexport function removeConnectionDirectiveFromDocument(doc: DocumentNode) {\n  return removeDirectivesFromDocument(\n    [connectionRemoveConfig],\n    checkDocument(doc)\n  );\n}\n\nfunction hasDirectivesInSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode | undefined,\n  nestedCheck = true\n): boolean {\n  return (\n    !!selectionSet &&\n    selectionSet.selections &&\n    selectionSet.selections.some((selection) =>\n      hasDirectivesInSelection(directives, selection, nestedCheck)\n    )\n  );\n}\n\nfunction hasDirectivesInSelection(\n  directives: GetDirectiveConfig[],\n  selection: SelectionNode,\n  nestedCheck = true\n): boolean {\n  if (!isField(selection)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  return (\n    selection.directives.some(getDirectiveMatcher(directives)) ||\n    (nestedCheck &&\n      hasDirectivesInSelectionSet(\n        directives,\n        selection.selectionSet,\n        nestedCheck\n      ))\n  );\n}\n\nfunction getArgumentMatcher(config: RemoveArgumentsConfig[]) {\n  return function argumentMatcher(argument: ArgumentNode) {\n    return config.some(\n      (aConfig: RemoveArgumentsConfig) =>\n        argument.value &&\n        argument.value.kind === Kind.VARIABLE &&\n        argument.value.name &&\n        (aConfig.name === argument.value.name.value ||\n          (aConfig.test && aConfig.test(argument)))\n    );\n  };\n}\n\nexport function removeArgumentsFromDocument(\n  config: RemoveArgumentsConfig[],\n  doc: DocumentNode\n): DocumentNode | null {\n  const argMatcher = getArgumentMatcher(config);\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      OperationDefinition: {\n        enter(node) {\n          return {\n            ...node,\n            // Remove matching top level variables definitions.\n            variableDefinitions:\n              node.variableDefinitions ?\n                node.variableDefinitions.filter(\n                  (varDef) =>\n                    !config.some(\n                      (arg) => arg.name === varDef.variable.name.value\n                    )\n                )\n              : [],\n          };\n        },\n      },\n\n      Field: {\n        enter(node) {\n          // If `remove` is set to true for an argument, and an argument match\n          // is found for a field, remove the field as well.\n          const shouldRemoveField = config.some(\n            (argConfig) => argConfig.remove\n          );\n\n          if (shouldRemoveField) {\n            let argMatchCount = 0;\n            if (node.arguments) {\n              node.arguments.forEach((arg) => {\n                if (argMatcher(arg)) {\n                  argMatchCount += 1;\n                }\n              });\n            }\n\n            if (argMatchCount === 1) {\n              return null;\n            }\n          }\n        },\n      },\n\n      Argument: {\n        enter(node) {\n          // Remove all matching arguments.\n          if (argMatcher(node)) {\n            return null;\n          }\n        },\n      },\n    })\n  );\n}\n\nexport function removeFragmentSpreadFromDocument(\n  config: RemoveFragmentSpreadConfig[],\n  doc: DocumentNode\n): DocumentNode | null {\n  function enter(\n    node: FragmentSpreadNode | FragmentDefinitionNode\n  ): null | void {\n    if (config.some((def) => def.name === node.name.value)) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      FragmentSpread: { enter },\n      FragmentDefinition: { enter },\n    })\n  );\n}\n\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nexport function buildQueryFromSelectionSet(\n  document: DocumentNode\n): DocumentNode {\n  const definition = getMainDefinition(document);\n  const definitionOperation = (<OperationDefinitionNode>definition).operation;\n\n  if (definitionOperation === \"query\") {\n    // Already a query, so return the existing document.\n    return document;\n  }\n\n  // Build a new query using the selection set of the main operation.\n  const modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter(node) {\n        return {\n          ...node,\n          operation: \"query\",\n        };\n      },\n    },\n  });\n  return modifiedDoc;\n}\n\n// Remove fields / selection sets that include an @client directive.\nexport function removeClientSetsFromDocument(\n  document: DocumentNode\n): DocumentNode | null {\n  checkDocument(document);\n\n  let modifiedDoc = removeDirectivesFromDocument(\n    [\n      {\n        test: (directive: DirectiveNode) => directive.name.value === \"client\",\n        remove: true,\n      },\n    ],\n    document\n  );\n\n  return modifiedDoc;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}