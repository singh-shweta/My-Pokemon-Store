{"ast":null,"code":"function defaultDispose() {}\nexport class StrongCache {\n  constructor(max = Infinity, dispose = defaultDispose) {\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new Map();\n    this.newest = null;\n    this.oldest = null;\n  }\n  has(key) {\n    return this.map.has(key);\n  }\n  get(key) {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n  get size() {\n    return this.map.size;\n  }\n  getNode(key) {\n    const node = this.map.get(key);\n    if (node && node !== this.newest) {\n      const {\n        older,\n        newer\n      } = node;\n      if (newer) {\n        newer.older = older;\n      }\n      if (older) {\n        older.newer = newer;\n      }\n      node.older = this.newest;\n      node.older.newer = node;\n      node.newer = null;\n      this.newest = node;\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n    return node;\n  }\n  set(key, value) {\n    let node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n    this.newest = node;\n    this.oldest = this.oldest || node;\n    this.map.set(key, node);\n    return node.value;\n  }\n  clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n  delete(key) {\n    const node = this.map.get(key);\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n      this.map.delete(key);\n      this.dispose(node.value, key);\n      return true;\n    }\n    return false;\n  }\n}","map":{"version":3,"sources":["../src/strong.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["function defaultDispose() { }\nexport class StrongCache {\n    constructor(max = Infinity, dispose = defaultDispose) {\n        this.max = max;\n        this.dispose = dispose;\n        this.map = new Map();\n        this.newest = null;\n        this.oldest = null;\n    }\n    has(key) {\n        return this.map.has(key);\n    }\n    get(key) {\n        const node = this.getNode(key);\n        return node && node.value;\n    }\n    get size() {\n        return this.map.size;\n    }\n    getNode(key) {\n        const node = this.map.get(key);\n        if (node && node !== this.newest) {\n            const { older, newer } = node;\n            if (newer) {\n                newer.older = older;\n            }\n            if (older) {\n                older.newer = newer;\n            }\n            node.older = this.newest;\n            node.older.newer = node;\n            node.newer = null;\n            this.newest = node;\n            if (node === this.oldest) {\n                this.oldest = newer;\n            }\n        }\n        return node;\n    }\n    set(key, value) {\n        let node = this.getNode(key);\n        if (node) {\n            return node.value = value;\n        }\n        node = {\n            key,\n            value,\n            newer: null,\n            older: this.newest\n        };\n        if (this.newest) {\n            this.newest.newer = node;\n        }\n        this.newest = node;\n        this.oldest = this.oldest || node;\n        this.map.set(key, node);\n        return node.value;\n    }\n    clean() {\n        while (this.oldest && this.map.size > this.max) {\n            this.delete(this.oldest.key);\n        }\n    }\n    delete(key) {\n        const node = this.map.get(key);\n        if (node) {\n            if (node === this.newest) {\n                this.newest = node.older;\n            }\n            if (node === this.oldest) {\n                this.oldest = node.newer;\n            }\n            if (node.newer) {\n                node.newer.older = node.older;\n            }\n            if (node.older) {\n                node.older.newer = node.newer;\n            }\n            this.map.delete(key);\n            this.dispose(node.value, key);\n            return true;\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=strong.js.map"]},"metadata":{},"sourceType":"module"}