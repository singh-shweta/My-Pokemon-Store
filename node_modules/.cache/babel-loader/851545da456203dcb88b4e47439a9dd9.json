{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { createMakeWatchQueryOptions, getDefaultFetchPolicy, getObsQueryOptions, toQueryResult, useQueryInternals } from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nvar EAGER_METHODS = [\"refetch\", \"reobserve\", \"fetchMore\", \"updateQuery\", \"startPolling\", \"stopPolling\", \"subscribeToMore\"];\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery(query, options) {\n  var _a;\n  var execOptionsRef = React.useRef();\n  var optionsRef = React.useRef();\n  var queryRef = React.useRef();\n  var merged = mergeOptions(options, execOptionsRef.current || {});\n  var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n  var queryHookOptions = __assign(__assign({}, merged), {\n    skip: !execOptionsRef.current\n  });\n  var _b = useQueryInternals(document, queryHookOptions),\n    obsQueryFields = _b.obsQueryFields,\n    useQueryResult = _b.result,\n    client = _b.client,\n    resultData = _b.resultData,\n    observable = _b.observable,\n    onQueryExecuted = _b.onQueryExecuted;\n  var initialFetchPolicy = observable.options.initialFetchPolicy || getDefaultFetchPolicy(queryHookOptions.defaultOptions, client.defaultOptions);\n  var forceUpdateState = React.useReducer(function (tick) {\n    return tick + 1;\n  }, 0)[1];\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  var eagerMethods = React.useMemo(function () {\n    var eagerMethods = {};\n    var _loop_1 = function (key) {\n      var method = obsQueryFields[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    };\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n      _loop_1(key);\n    }\n    return eagerMethods;\n  }, [forceUpdateState, obsQueryFields]);\n  var called = !!execOptionsRef.current;\n  var result = React.useMemo(function () {\n    return __assign(__assign(__assign({}, useQueryResult), eagerMethods), {\n      called: called\n    });\n  }, [useQueryResult, eagerMethods, called]);\n  var execute = React.useCallback(function (executeOptions) {\n    execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), {\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n    }) : {\n      fetchPolicy: initialFetchPolicy\n    };\n    var options = mergeOptions(optionsRef.current, __assign({\n      query: queryRef.current\n    }, execOptionsRef.current));\n    var promise = executeQuery(resultData, observable, client, document, __assign(__assign({}, options), {\n      skip: false\n    }), onQueryExecuted).then(function (queryResult) {\n      return Object.assign(queryResult, eagerMethods);\n    });\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(function () {});\n    return promise;\n  }, [client, document, eagerMethods, initialFetchPolicy, observable, resultData, onQueryExecuted]);\n  var executeRef = React.useRef(execute);\n  useIsomorphicLayoutEffect(function () {\n    executeRef.current = execute;\n  });\n  var stableExecute = React.useCallback(function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return executeRef.current.apply(executeRef, args);\n  }, []);\n  return [stableExecute, result];\n}\nfunction executeQuery(resultData, observable, client, currentQuery, options, onQueryExecuted) {\n  var query = options.query || currentQuery;\n  var watchQueryOptions = createMakeWatchQueryOptions(client, query, options, false)(observable);\n  var concast = observable.reobserveAsConcast(getObsQueryOptions(observable, client, options, watchQueryOptions));\n  onQueryExecuted(watchQueryOptions);\n  return new Promise(function (resolve) {\n    var result;\n    // Subscribe to the concast independently of the ObservableQuery in case\n    // the component gets unmounted before the promise resolves. This prevents\n    // the concast from terminating early and resolving with `undefined` when\n    // there are no more subscribers for the concast.\n    concast.subscribe({\n      next: function (value) {\n        result = value;\n      },\n      error: function () {\n        resolve(toQueryResult(observable.getCurrentResult(), resultData.previousData, observable, client));\n      },\n      complete: function () {\n        resolve(toQueryResult(result, resultData.previousData, observable, client));\n      }\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/react/hooks/useLazyQuery.ts"],"names":[],"mappings":";AAEA,OAAO,KAAK,KAAK,MAAM,SAAS;AAQhC,SAAS,YAAY,QAAQ,0BAA0B;AAUvD,SACE,2BAA2B,EAC3B,qBAAqB,EACrB,kBAAkB,EAClB,aAAa,EACb,iBAAiB,QACZ,eAAe;AACtB,SAAS,yBAAyB,QAAQ,yCAAyC;AAEnF;AACA;AACA,IAAM,aAAa,GAAG,CACpB,SAAS,EACT,WAAW,EACX,WAAW,EACX,aAAa,EACb,cAAc,EACd,aAAa,EACb,iBAAiB,CACT;AAEV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCG;AACH,OAAM,SAAU,YAAY,CAI1B,KAA0D,EAC1D,OAAmE,EAAA;;EAEnE,IAAM,cAAc,GAClB,KAAK,CAAC,MAAM,CAAA,CAAwD;EACtE,IAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAA,CAA2C;EAC1E,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAA,CAE1B;EACH,IAAM,MAAM,GAAG,YAAY,CAAC,OAAO,EAAE,cAAc,CAAC,OAAO,IAAI,CAAA,CAAE,CAAC;EAClE,IAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,MAAM,KAAA,IAAA,IAAN,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAN,MAAM,CAAE,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,KAAK;EAEvC;EACA;EACA,UAAU,CAAC,OAAO,GAAG,OAAO;EAC5B,QAAQ,CAAC,OAAO,GAAG,QAAQ;EAE3B,IAAM,gBAAgB,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACjB,MAAM,CAAA,EAAA;IACT,IAAI,EAAE,CAAC,cAAc,CAAC;EAAO,CAAA,CAC9B;EACK,IAAA,EAAA,GAOF,iBAAiB,CAAC,QAAQ,EAAE,gBAAgB,CAAC;IAN/C,cAAc,GAAA,EAAA,CAAA,cAAA;IACN,cAAc,GAAA,EAAA,CAAA,MAAA;IACtB,MAAM,GAAA,EAAA,CAAA,MAAA;IACN,UAAU,GAAA,EAAA,CAAA,UAAA;IACV,UAAU,GAAA,EAAA,CAAA,UAAA;IACV,eAAe,GAAA,EAAA,CAAA,eACgC;EAEjD,IAAM,kBAAkB,GACtB,UAAU,CAAC,OAAO,CAAC,kBAAkB,IACrC,qBAAqB,CACnB,gBAAgB,CAAC,cAAc,EAC/B,MAAM,CAAC,cAAc,CACtB;EAEH,IAAM,gBAAgB,GAAG,KAAK,CAAC,UAAU,CAAC,UAAC,IAAI,EAAA;IAAK,OAAA,IAAI,GAAG,CAAC;EAAR,CAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACnE;EACA,IAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,YAAA;IACjC,IAAM,YAAY,GAAwB,CAAA,CAAE;4BACjC,GAAG,EAAA;MACZ,IAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC;MAClC,YAAY,CAAC,GAAG,CAAC,GAAG,YAAA;QAClB,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;UAC3B,cAAc,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;UAC5C;UACA,gBAAgB,CAAA,CAAE;QACpB;QACA;QACA,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC;MACtC,CAAC;;IAVH,KAAkB,IAAA,EAAA,GAAA,CAAa,EAAb,eAAA,GAAA,aAAa,EAAb,EAAA,GAAA,eAAA,CAAA,MAAa,EAAb,EAAA,EAAa,EAAA;MAA1B,IAAM,GAAG,GAAA,eAAA,CAAA,EAAA,CAAA;cAAH,GAAG,CAAA;IAWb;IAED,OAAO,YAAqC;EAC9C,CAAC,EAAE,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;EAEtC,IAAM,MAAM,GAAG,CAAC,CAAC,cAAc,CAAC,OAAO;EACvC,IAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAC1B,YAAA;IAAM,OAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACD,cAAc,CAAA,EACd,YAAY,CAAA,EAAA;MACf,MAAM,EAAA;IAAA,CAAA,CAAA;EAHF,CAIJ,EACF,CAAC,cAAc,EAAE,YAAY,EAAE,MAAM,CAAC,CACvC;EAED,IAAM,OAAO,GAAG,KAAK,CAAC,WAAW,CAC/B,UAAC,cAAc,EAAA;IACb,cAAc,CAAC,OAAO,GACpB,cAAc,GAAE,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAET,cAAc,CAAA,EAAA;MACjB,WAAW,EAAE,cAAc,CAAC,WAAW,IAAI;IAAkB,CAAA,CAAA,GAE/D;MACE,WAAW,EAAE;KACd;IAEL,IAAM,OAAO,GAAG,YAAY,CAAC,UAAU,CAAC,OAAO,EAAA,QAAA,CAAA;MAC7C,KAAK,EAAE,QAAQ,CAAC;IAAO,CAAA,EACpB,cAAc,CAAC,OAAO,CAAA,CACzB;IAEF,IAAM,OAAO,GAAG,YAAY,CAC1B,UAAU,EACV,UAAU,EACV,MAAM,EACN,QAAQ,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACH,OAAO,CAAA,EAAA;MAAE,IAAI,EAAE;IAAK,CAAA,CAAA,EACzB,eAAe,CAChB,CAAC,IAAI,CAAC,UAAC,WAAW,EAAA;MAAK,OAAA,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,YAAY,CAAC;IAAxC,CAAwC,CAAC;IAEjE;IACA;IACA,OAAO,CAAC,KAAK,CAAC,YAAA,CAAO,CAAC,CAAC;IAEvB,OAAO,OAAO;EAChB,CAAC,EACD,CACE,MAAM,EACN,QAAQ,EACR,YAAY,EACZ,kBAAkB,EAClB,UAAU,EACV,UAAU,EACV,eAAe,CAChB,CACF;EAED,IAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;EACxC,yBAAyB,CAAC,YAAA;IACxB,UAAU,CAAC,OAAO,GAAG,OAAO;EAC9B,CAAC,CAAC;EAEF,IAAM,aAAa,GAAG,KAAK,CAAC,WAAW,CACrC,YAAA;IAAC,IAAA,IAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAO,EAAP,EAAA,GAAA,SAAA,CAAA,MAAO,EAAP,EAAA,EAAO,EAAA;MAAP,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IAAY,OAAA,UAAU,CAAC,OAAO,CAAA,KAAA,CAAlB,UAAU,EAAY,IAAI,CAAA;EAA1B,CAA2B,EACxC,EAAE,CACH;EACD,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC;AAChC;AAEA,SAAS,YAAY,CACnB,UAA6C,EAC7C,UAA+C,EAC/C,MAA4B,EAC5B,YAA0B,EAC1B,OAEC,EACD,eAAwE,EAAA;EAExE,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,YAAY;EAC3C,IAAM,iBAAiB,GAAG,2BAA2B,CACnD,MAAM,EACN,KAAK,EACL,OAAO,EACP,KAAK,CACN,CAAC,UAAU,CAAC;EAEb,IAAM,OAAO,GAAG,UAAU,CAAC,kBAAkB,CAC3C,kBAAkB,CAAC,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB,CAAC,CACnE;EACD,eAAe,CAAC,iBAAiB,CAAC;EAElC,OAAO,IAAI,OAAO,CAEhB,UAAC,OAAO,EAAA;IACR,IAAI,MAAgC;IAEpC;IACA;IACA;IACA;IACA,OAAO,CAAC,SAAS,CAAC;MAChB,IAAI,EAAE,SAAA,CAAC,KAAK,EAAA;QACV,MAAM,GAAG,KAAK;MAChB,CAAC;MACD,KAAK,EAAE,SAAA,CAAA,EAAA;QACL,OAAO,CACL,aAAa,CACX,UAAU,CAAC,gBAAgB,CAAA,CAAE,EAC7B,UAAU,CAAC,YAAY,EACvB,UAAU,EACV,MAAM,CACP,CACF;MACH,CAAC;MACD,QAAQ,EAAE,SAAA,CAAA,EAAA;QACR,OAAO,CACL,aAAa,CAAC,MAAM,EAAE,UAAU,CAAC,YAAY,EAAE,UAAU,EAAE,MAAM,CAAC,CACnE;MACH;KACD,CAAC;EACJ,CAAC,CAAC;AACJ","sourcesContent":["import type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport * as React from \"rehackt\";\n\nimport type {\n  ApolloClient,\n  ApolloQueryResult,\n  OperationVariables,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type {\n  LazyQueryHookExecOptions,\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  NoInfer,\n  QueryHookOptions,\n  QueryResult,\n} from \"../types/types.js\";\nimport type { InternalResult, ObsQueryWithMeta } from \"./useQuery.js\";\nimport {\n  createMakeWatchQueryOptions,\n  getDefaultFetchPolicy,\n  getObsQueryOptions,\n  toQueryResult,\n  useQueryInternals,\n} from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  \"refetch\",\n  \"reobserve\",\n  \"fetchMore\",\n  \"updateQuery\",\n  \"startPolling\",\n  \"stopPolling\",\n  \"subscribeToMore\",\n] as const;\n\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): LazyQueryResultTuple<TData, TVariables> {\n  const execOptionsRef =\n    React.useRef<Partial<LazyQueryHookExecOptions<TData, TVariables>>>();\n  const optionsRef = React.useRef<LazyQueryHookOptions<TData, TVariables>>();\n  const queryRef = React.useRef<\n    DocumentNode | TypedDocumentNode<TData, TVariables>\n  >();\n  const merged = mergeOptions(options, execOptionsRef.current || {});\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n\n  const queryHookOptions = {\n    ...merged,\n    skip: !execOptionsRef.current,\n  };\n  const {\n    obsQueryFields,\n    result: useQueryResult,\n    client,\n    resultData,\n    observable,\n    onQueryExecuted,\n  } = useQueryInternals(document, queryHookOptions);\n\n  const initialFetchPolicy =\n    observable.options.initialFetchPolicy ||\n    getDefaultFetchPolicy(\n      queryHookOptions.defaultOptions,\n      client.defaultOptions\n    );\n\n  const forceUpdateState = React.useReducer((tick) => tick + 1, 0)[1];\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = React.useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = obsQueryFields[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods as typeof obsQueryFields;\n  }, [forceUpdateState, obsQueryFields]);\n\n  const called = !!execOptionsRef.current;\n  const result = React.useMemo(\n    () => ({\n      ...useQueryResult,\n      ...eagerMethods,\n      called,\n    }),\n    [useQueryResult, eagerMethods, called]\n  );\n\n  const execute = React.useCallback<LazyQueryResultTuple<TData, TVariables>[0]>(\n    (executeOptions) => {\n      execOptionsRef.current =\n        executeOptions ?\n          {\n            ...executeOptions,\n            fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n          }\n        : {\n            fetchPolicy: initialFetchPolicy,\n          };\n\n      const options = mergeOptions(optionsRef.current, {\n        query: queryRef.current,\n        ...execOptionsRef.current,\n      });\n\n      const promise = executeQuery(\n        resultData,\n        observable,\n        client,\n        document,\n        { ...options, skip: false },\n        onQueryExecuted\n      ).then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n      // Because the return value of `useLazyQuery` is usually floated, we need\n      // to catch the promise to prevent unhandled rejections.\n      promise.catch(() => {});\n\n      return promise;\n    },\n    [\n      client,\n      document,\n      eagerMethods,\n      initialFetchPolicy,\n      observable,\n      resultData,\n      onQueryExecuted,\n    ]\n  );\n\n  const executeRef = React.useRef(execute);\n  useIsomorphicLayoutEffect(() => {\n    executeRef.current = execute;\n  });\n\n  const stableExecute = React.useCallback<typeof execute>(\n    (...args) => executeRef.current(...args),\n    []\n  );\n  return [stableExecute, result];\n}\n\nfunction executeQuery<TData, TVariables extends OperationVariables>(\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObsQueryWithMeta<TData, TVariables>,\n  client: ApolloClient<object>,\n  currentQuery: DocumentNode,\n  options: QueryHookOptions<TData, TVariables> & {\n    query?: DocumentNode;\n  },\n  onQueryExecuted: (options: WatchQueryOptions<TVariables, TData>) => void\n) {\n  const query = options.query || currentQuery;\n  const watchQueryOptions = createMakeWatchQueryOptions(\n    client,\n    query,\n    options,\n    false\n  )(observable);\n\n  const concast = observable.reobserveAsConcast(\n    getObsQueryOptions(observable, client, options, watchQueryOptions)\n  );\n  onQueryExecuted(watchQueryOptions);\n\n  return new Promise<\n    Omit<QueryResult<TData, TVariables>, (typeof EAGER_METHODS)[number]>\n  >((resolve) => {\n    let result: ApolloQueryResult<TData>;\n\n    // Subscribe to the concast independently of the ObservableQuery in case\n    // the component gets unmounted before the promise resolves. This prevents\n    // the concast from terminating early and resolving with `undefined` when\n    // there are no more subscribers for the concast.\n    concast.subscribe({\n      next: (value) => {\n        result = value;\n      },\n      error: () => {\n        resolve(\n          toQueryResult(\n            observable.getCurrentResult(),\n            resultData.previousData,\n            observable,\n            client\n          )\n        );\n      },\n      complete: () => {\n        resolve(\n          toQueryResult(result, resultData.previousData, observable, client)\n        );\n      },\n    });\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}