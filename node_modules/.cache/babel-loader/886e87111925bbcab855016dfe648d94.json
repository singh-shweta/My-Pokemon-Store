{"ast":null,"code":"import { newInvariantError } from \"../globals/index.js\";\nimport { isNonNullObject } from \"../common/objects.js\";\nimport { getFragmentFromSelection } from \"./fragments.js\";\nimport { canonicalStringify } from \"../common/canonicalStringify.js\";\nexport function makeReference(id) {\n  return {\n    __ref: String(id)\n  };\n}\nexport function isReference(obj) {\n  return Boolean(obj && typeof obj === \"object\" && typeof obj.__ref === \"string\");\n}\nexport function isDocumentNode(value) {\n  return isNonNullObject(value) && value.kind === \"Document\" && Array.isArray(value.definitions);\n}\nfunction isStringValue(value) {\n  return value.kind === \"StringValue\";\n}\nfunction isBooleanValue(value) {\n  return value.kind === \"BooleanValue\";\n}\nfunction isIntValue(value) {\n  return value.kind === \"IntValue\";\n}\nfunction isFloatValue(value) {\n  return value.kind === \"FloatValue\";\n}\nfunction isVariable(value) {\n  return value.kind === \"Variable\";\n}\nfunction isObjectValue(value) {\n  return value.kind === \"ObjectValue\";\n}\nfunction isListValue(value) {\n  return value.kind === \"ListValue\";\n}\nfunction isEnumValue(value) {\n  return value.kind === \"EnumValue\";\n}\nfunction isNullValue(value) {\n  return value.kind === \"NullValue\";\n}\nexport function valueToObjectRepresentation(argObj, name, value, variables) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    var nestedArgObj_1 = {};\n    value.fields.map(function (obj) {\n      return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n    });\n    argObj[name.value] = nestedArgObj_1;\n  } else if (isVariable(value)) {\n    var variableValue = (variables || {})[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(function (listValue) {\n      var nestedArgArrayObj = {};\n      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n      return nestedArgArrayObj[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw newInvariantError(85, name.value, value.kind);\n  }\n}\nexport function storeKeyNameFromField(field, variables) {\n  var directivesObj = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(function (directive) {\n      directivesObj[directive.name.value] = {};\n      if (directive.arguments) {\n        directive.arguments.forEach(function (_a) {\n          var name = _a.name,\n            value = _a.value;\n          return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n        });\n      }\n    });\n  }\n  var argObj = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n        value = _a.value;\n      return valueToObjectRepresentation(argObj, name, value, variables);\n    });\n  }\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\"connection\", \"include\", \"skip\", \"client\", \"rest\", \"export\", \"nonreactive\"];\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nvar storeKeyNameStringify = canonicalStringify;\nexport var getStoreKeyName = Object.assign(function (fieldName, args, directives) {\n  if (args && directives && directives[\"connection\"] && directives[\"connection\"][\"key\"]) {\n    if (directives[\"connection\"][\"filter\"] && directives[\"connection\"][\"filter\"].length > 0) {\n      var filterKeys = directives[\"connection\"][\"filter\"] ? directives[\"connection\"][\"filter\"] : [];\n      filterKeys.sort();\n      var filteredArgs_1 = {};\n      filterKeys.forEach(function (key) {\n        filteredArgs_1[key] = args[key];\n      });\n      return \"\".concat(directives[\"connection\"][\"key\"], \"(\").concat(storeKeyNameStringify(filteredArgs_1), \")\");\n    } else {\n      return directives[\"connection\"][\"key\"];\n    }\n  }\n  var completeFieldName = fieldName;\n  if (args) {\n    // We can't use `JSON.stringify` here since it's non-deterministic,\n    // and can lead to different store key names being created even though\n    // the `args` object used during creation has the same properties/values.\n    var stringifiedArgs = storeKeyNameStringify(args);\n    completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n  }\n  if (directives) {\n    Object.keys(directives).forEach(function (key) {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += \"@\".concat(key, \"(\").concat(storeKeyNameStringify(directives[key]), \")\");\n      } else {\n        completeFieldName += \"@\".concat(key);\n      }\n    });\n  }\n  return completeFieldName;\n}, {\n  setStringify: function (s) {\n    var previous = storeKeyNameStringify;\n    storeKeyNameStringify = s;\n    return previous;\n  }\n});\nexport function argumentsObjectFromField(field, variables) {\n  if (field.arguments && field.arguments.length) {\n    var argObj_1 = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n        value = _a.value;\n      return valueToObjectRepresentation(argObj_1, name, value, variables);\n    });\n    return argObj_1;\n  }\n  return null;\n}\nexport function resultKeyNameFromField(field) {\n  return field.alias ? field.alias.value : field.name.value;\n}\nexport function getTypenameFromResult(result, selectionSet, fragmentMap) {\n  var fragments;\n  for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {\n    var selection = _a[_i];\n    if (isField(selection)) {\n      if (selection.name.value === \"__typename\") {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else if (fragments) {\n      fragments.push(selection);\n    } else {\n      fragments = [selection];\n    }\n  }\n  if (typeof result.__typename === \"string\") {\n    return result.__typename;\n  }\n  if (fragments) {\n    for (var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++) {\n      var selection = fragments_1[_b];\n      var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);\n      if (typeof typename === \"string\") {\n        return typename;\n      }\n    }\n  }\n}\nexport function isField(selection) {\n  return selection.kind === \"Field\";\n}\nexport function isInlineFragment(selection) {\n  return selection.kind === \"InlineFragment\";\n}","map":{"version":3,"sources":["../../../src/utilities/graphql/storeUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { newInvariantError } from \"../globals/index.js\";\n\nimport type {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n  SelectionSetNode,\n  DocumentNode,\n  FragmentSpreadNode,\n} from \"graphql\";\n\nimport { isNonNullObject } from \"../common/objects.js\";\nimport type { FragmentMap } from \"./fragments.js\";\nimport { getFragmentFromSelection } from \"./fragments.js\";\nimport { canonicalStringify } from \"../common/canonicalStringify.js\";\n\nexport interface Reference {\n  readonly __ref: string;\n}\n\nexport function makeReference(id: string): Reference {\n  return { __ref: String(id) };\n}\n\nexport function isReference(obj: any): obj is Reference {\n  return Boolean(\n    obj && typeof obj === \"object\" && typeof obj.__ref === \"string\"\n  );\n}\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | Reference\n  | Reference[]\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport interface StoreObject {\n  __typename?: string;\n  [storeFieldName: string]: StoreValue;\n}\n\n/**\n * Workaround for a TypeScript quirk:\n * types per default have an implicit index signature that makes them\n * assignable to `StoreObject`.\n * interfaces do not have that implicit index signature, so they cannot\n * be assigned to `StoreObject`.\n * This type just maps over a type or interface that is passed in,\n * implicitly adding the index signature.\n * That way, the result can be assigned to `StoreObject`.\n *\n * This is important if some user-defined interface is used e.g.\n * in cache.modify, where the `toReference` method expects a\n * `StoreObject` as input.\n */\nexport type AsStoreObject<T extends { __typename?: string }> = {\n  [K in keyof T]: T[K];\n};\n\nexport function isDocumentNode(value: any): value is DocumentNode {\n  return (\n    isNonNullObject(value) &&\n    (value as DocumentNode).kind === \"Document\" &&\n    Array.isArray((value as DocumentNode).definitions)\n  );\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === \"StringValue\";\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === \"BooleanValue\";\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === \"IntValue\";\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === \"FloatValue\";\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === \"Variable\";\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === \"ObjectValue\";\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === \"ListValue\";\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === \"EnumValue\";\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === \"NullValue\";\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map((obj) =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables)\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map((listValue) => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw newInvariantError(\n      `The inline argument \"%s\" of kind \"%s\"` +\n        \"is not supported. Use variables instead of inline arguments to \" +\n        \"overcome this limitation.\",\n      name.value,\n      (value as any).kind\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach((directive) => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables\n          )\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables)\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  \"connection\",\n  \"include\",\n  \"skip\",\n  \"client\",\n  \"rest\",\n  \"export\",\n  \"nonreactive\",\n];\n\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nlet storeKeyNameStringify: (value: any) => string = canonicalStringify;\n\nexport const getStoreKeyName = Object.assign(\n  function (\n    fieldName: string,\n    args?: Record<string, any> | null,\n    directives?: Directives\n  ): string {\n    if (\n      args &&\n      directives &&\n      directives[\"connection\"] &&\n      directives[\"connection\"][\"key\"]\n    ) {\n      if (\n        directives[\"connection\"][\"filter\"] &&\n        (directives[\"connection\"][\"filter\"] as string[]).length > 0\n      ) {\n        const filterKeys =\n          directives[\"connection\"][\"filter\"] ?\n            (directives[\"connection\"][\"filter\"] as string[])\n          : [];\n        filterKeys.sort();\n\n        const filteredArgs = {} as { [key: string]: any };\n        filterKeys.forEach((key) => {\n          filteredArgs[key] = args[key];\n        });\n\n        return `${directives[\"connection\"][\"key\"]}(${storeKeyNameStringify(\n          filteredArgs\n        )})`;\n      } else {\n        return directives[\"connection\"][\"key\"];\n      }\n    }\n\n    let completeFieldName: string = fieldName;\n\n    if (args) {\n      // We can't use `JSON.stringify` here since it's non-deterministic,\n      // and can lead to different store key names being created even though\n      // the `args` object used during creation has the same properties/values.\n      const stringifiedArgs: string = storeKeyNameStringify(args);\n      completeFieldName += `(${stringifiedArgs})`;\n    }\n\n    if (directives) {\n      Object.keys(directives).forEach((key) => {\n        if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n        if (directives[key] && Object.keys(directives[key]).length) {\n          completeFieldName += `@${key}(${storeKeyNameStringify(\n            directives[key]\n          )})`;\n        } else {\n          completeFieldName += `@${key}`;\n        }\n      });\n    }\n\n    return completeFieldName;\n  },\n  {\n    setStringify(s: typeof storeKeyNameStringify) {\n      const previous = storeKeyNameStringify;\n      storeKeyNameStringify = s;\n      return previous;\n    },\n  }\n);\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables?: Record<string, any>\n): Object | null {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables)\n    );\n    return argObj;\n  }\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function getTypenameFromResult(\n  result: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  fragmentMap?: FragmentMap\n): string | undefined {\n  let fragments: undefined | Array<InlineFragmentNode | FragmentSpreadNode>;\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === \"__typename\") {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else if (fragments) {\n      fragments.push(selection);\n    } else {\n      fragments = [selection];\n    }\n  }\n  if (typeof result.__typename === \"string\") {\n    return result.__typename;\n  }\n  if (fragments) {\n    for (const selection of fragments) {\n      const typename = getTypenameFromResult(\n        result,\n        getFragmentFromSelection(selection, fragmentMap)!.selectionSet,\n        fragmentMap\n      );\n      if (typeof typename === \"string\") {\n        return typename;\n      }\n    }\n  }\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === \"Field\";\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode\n): selection is InlineFragmentNode {\n  return selection.kind === \"InlineFragment\";\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}