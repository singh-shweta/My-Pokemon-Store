{"ast":null,"code":"import { wrapPromiseWithState } from \"../../../utilities/index.js\";\nimport * as React from \"rehackt\";\n// Prevent webpack from complaining about our feature detection of the\n// use property of the React namespace, which is expected not\n// to exist when using current stable versions, and that's fine.\nvar useKey = \"use\";\nvar realHook = React[useKey];\n// This is named with two underscores to allow this hook to evade typical rules of\n// hooks (i.e. it can be used conditionally)\nexport var __use = realHook || function __use(promise) {\n  var statefulPromise = wrapPromiseWithState(promise);\n  switch (statefulPromise.status) {\n    case \"pending\":\n      throw statefulPromise;\n    case \"rejected\":\n      throw statefulPromise.reason;\n    case \"fulfilled\":\n      return statefulPromise.value;\n  }\n};","map":{"version":3,"sources":["../../../../src/react/hooks/internal/__use.ts"],"names":[],"mappings":"AAAA,SAAS,oBAAoB,QAAQ,6BAA6B;AAClE,OAAO,KAAK,KAAK,MAAM,SAAS;AAGhC;AACA;AACA;AACA,IAAM,MAAM,GAAG,KAA2B;AAC1C,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAoB;AAEjD;AACA;AACA,OAAO,IAAM,KAAK,GAChB,QAAQ,IACR,SAAS,KAAK,CAAS,OAAwB,EAAA;EAC7C,IAAM,eAAe,GAAG,oBAAoB,CAAC,OAAO,CAAC;EAErD,QAAQ,eAAe,CAAC,MAAM;IAC5B,KAAK,SAAS;MACZ,MAAM,eAAe;IACvB,KAAK,UAAU;MACb,MAAM,eAAe,CAAC,MAAM;IAC9B,KAAK,WAAW;MACd,OAAO,eAAe,CAAC,KAAK;EAChC;AACF,CAAC","sourcesContent":["import { wrapPromiseWithState } from \"../../../utilities/index.js\";\nimport * as React from \"rehackt\";\n\ntype Use = <T>(promise: Promise<T>) => T;\n// Prevent webpack from complaining about our feature detection of the\n// use property of the React namespace, which is expected not\n// to exist when using current stable versions, and that's fine.\nconst useKey = \"use\" as keyof typeof React;\nconst realHook = React[useKey] as Use | undefined;\n\n// This is named with two underscores to allow this hook to evade typical rules of\n// hooks (i.e. it can be used conditionally)\nexport const __use =\n  realHook ||\n  function __use<TValue>(promise: Promise<TValue>) {\n    const statefulPromise = wrapPromiseWithState(promise);\n\n    switch (statefulPromise.status) {\n      case \"pending\":\n        throw statefulPromise;\n      case \"rejected\":\n        throw statefulPromise.reason;\n      case \"fulfilled\":\n        return statefulPromise.value;\n    }\n  };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}