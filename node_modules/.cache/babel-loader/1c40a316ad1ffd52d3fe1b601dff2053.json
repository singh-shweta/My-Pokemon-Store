{"ast":null,"code":"export function createFulfilledPromise(value) {\n  var promise = Promise.resolve(value);\n  promise.status = \"fulfilled\";\n  promise.value = value;\n  return promise;\n}\nexport function createRejectedPromise(reason) {\n  var promise = Promise.reject(reason);\n  // prevent potential edge cases leaking unhandled error rejections\n  promise.catch(function () {});\n  promise.status = \"rejected\";\n  promise.reason = reason;\n  return promise;\n}\nexport function isStatefulPromise(promise) {\n  return \"status\" in promise;\n}\nexport function wrapPromiseWithState(promise) {\n  if (isStatefulPromise(promise)) {\n    return promise;\n  }\n  var pendingPromise = promise;\n  pendingPromise.status = \"pending\";\n  pendingPromise.then(function (value) {\n    if (pendingPromise.status === \"pending\") {\n      var fulfilledPromise = pendingPromise;\n      fulfilledPromise.status = \"fulfilled\";\n      fulfilledPromise.value = value;\n    }\n  }, function (reason) {\n    if (pendingPromise.status === \"pending\") {\n      var rejectedPromise = pendingPromise;\n      rejectedPromise.status = \"rejected\";\n      rejectedPromise.reason = reason;\n    }\n  });\n  return promise;\n}","map":{"version":3,"sources":["../../../src/utilities/promises/decoration.ts"],"names":[],"mappings":"AAmBA,OAAM,SAAU,sBAAsB,CAAS,KAAa,EAAA;EAC1D,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAA6B;EAElE,OAAO,CAAC,MAAM,GAAG,WAAW;EAC5B,OAAO,CAAC,KAAK,GAAG,KAAK;EAErB,OAAO,OAAO;AAChB;AAEA,OAAM,SAAU,qBAAqB,CAAmB,MAAe,EAAA;EACrE,IAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAA4B;EAEjE;EACA,OAAO,CAAC,KAAK,CAAC,YAAA,CAAO,CAAC,CAAC;EAEvB,OAAO,CAAC,MAAM,GAAG,UAAU;EAC3B,OAAO,CAAC,MAAM,GAAG,MAAM;EAEvB,OAAO,OAAO;AAChB;AAEA,OAAM,SAAU,iBAAiB,CAC/B,OAAwB,EAAA;EAExB,OAAO,QAAQ,IAAI,OAAO;AAC5B;AAEA,OAAM,SAAU,oBAAoB,CAClC,OAAwB,EAAA;EAExB,IAAI,iBAAiB,CAAC,OAAO,CAAC,EAAE;IAC9B,OAAO,OAAO;EAChB;EAEA,IAAM,cAAc,GAAG,OAAiC;EACxD,cAAc,CAAC,MAAM,GAAG,SAAS;EAEjC,cAAc,CAAC,IAAI,CACjB,UAAC,KAAK,EAAA;IACJ,IAAI,cAAc,CAAC,MAAM,KAAK,SAAS,EAAE;MACvC,IAAM,gBAAgB,GACpB,cAAqD;MAEvD,gBAAgB,CAAC,MAAM,GAAG,WAAW;MACrC,gBAAgB,CAAC,KAAK,GAAG,KAAK;IAChC;EACF,CAAC,EACD,UAAC,MAAe,EAAA;IACd,IAAI,cAAc,CAAC,MAAM,KAAK,SAAS,EAAE;MACvC,IAAM,eAAe,GACnB,cAAoD;MAEtD,eAAe,CAAC,MAAM,GAAG,UAAU;MACnC,eAAe,CAAC,MAAM,GAAG,MAAM;IACjC;EACF,CAAC,CACF;EAED,OAAO,OAAmC;AAC5C","sourcesContent":["export interface PendingPromise<TValue> extends Promise<TValue> {\n  status: \"pending\";\n}\n\nexport interface FulfilledPromise<TValue> extends Promise<TValue> {\n  status: \"fulfilled\";\n  value: TValue;\n}\n\nexport interface RejectedPromise<TValue> extends Promise<TValue> {\n  status: \"rejected\";\n  reason: unknown;\n}\n\nexport type PromiseWithState<TValue> =\n  | PendingPromise<TValue>\n  | FulfilledPromise<TValue>\n  | RejectedPromise<TValue>;\n\nexport function createFulfilledPromise<TValue>(value: TValue) {\n  const promise = Promise.resolve(value) as FulfilledPromise<TValue>;\n\n  promise.status = \"fulfilled\";\n  promise.value = value;\n\n  return promise;\n}\n\nexport function createRejectedPromise<TValue = unknown>(reason: unknown) {\n  const promise = Promise.reject(reason) as RejectedPromise<TValue>;\n\n  // prevent potential edge cases leaking unhandled error rejections\n  promise.catch(() => {});\n\n  promise.status = \"rejected\";\n  promise.reason = reason;\n\n  return promise;\n}\n\nexport function isStatefulPromise<TValue>(\n  promise: Promise<TValue>\n): promise is PromiseWithState<TValue> {\n  return \"status\" in promise;\n}\n\nexport function wrapPromiseWithState<TValue>(\n  promise: Promise<TValue>\n): PromiseWithState<TValue> {\n  if (isStatefulPromise(promise)) {\n    return promise;\n  }\n\n  const pendingPromise = promise as PendingPromise<TValue>;\n  pendingPromise.status = \"pending\";\n\n  pendingPromise.then(\n    (value) => {\n      if (pendingPromise.status === \"pending\") {\n        const fulfilledPromise =\n          pendingPromise as unknown as FulfilledPromise<TValue>;\n\n        fulfilledPromise.status = \"fulfilled\";\n        fulfilledPromise.value = value;\n      }\n    },\n    (reason: unknown) => {\n      if (pendingPromise.status === \"pending\") {\n        const rejectedPromise =\n          pendingPromise as unknown as RejectedPromise<TValue>;\n\n        rejectedPromise.status = \"rejected\";\n        rejectedPromise.reason = reason;\n      }\n    }\n  );\n\n  return promise as PromiseWithState<TValue>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}