{"ast":null,"code":"import { WeakCache, StrongCache } from \"@wry/caches\";\nvar scheduledCleanup = new WeakSet();\nfunction schedule(cache) {\n  if (cache.size <= (cache.max || -1)) {\n    return;\n  }\n  if (!scheduledCleanup.has(cache)) {\n    scheduledCleanup.add(cache);\n    setTimeout(function () {\n      cache.clean();\n      scheduledCleanup.delete(cache);\n    }, 100);\n  }\n}\n/**\n * @internal\n * A version of WeakCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of WeakCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `WeakCache`.\n */\nexport var AutoCleanedWeakCache = function (max, dispose) {\n  /*\n  Some builds of `WeakCache` are function prototypes, some are classes.\n  This library still builds with an ES5 target, so we can't extend the\n  real classes.\n  Instead, we have to use this workaround until we switch to a newer build\n  target.\n  */\n  var cache = new WeakCache(max, dispose);\n  cache.set = function (key, value) {\n    var ret = WeakCache.prototype.set.call(this, key, value);\n    schedule(this);\n    return ret;\n  };\n  return cache;\n};\n/**\n * @internal\n * A version of StrongCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of StrongCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `StrongCache`.\n */\nexport var AutoCleanedStrongCache = function (max, dispose) {\n  /*\n  Some builds of `StrongCache` are function prototypes, some are classes.\n  This library still builds with an ES5 target, so we can't extend the\n  real classes.\n  Instead, we have to use this workaround until we switch to a newer build\n  target.\n  */\n  var cache = new StrongCache(max, dispose);\n  cache.set = function (key, value) {\n    var ret = StrongCache.prototype.set.call(this, key, value);\n    schedule(this);\n    return ret;\n  };\n  return cache;\n};","map":{"version":3,"sources":["../../../src/utilities/caching/caches.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,EAAE,WAAW,QAAQ,aAAa;AAOpD,IAAM,gBAAgB,GAAG,IAAI,OAAO,CAAA,CAAkB;AACtD,SAAS,QAAQ,CAAC,KAAqB,EAAA;EACrC,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE;IACnC;EACF;EACA,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IAChC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC;IAC3B,UAAU,CAAC,YAAA;MACT,KAAK,CAAC,KAAK,CAAA,CAAE;MACb,gBAAgB,CAAC,MAAM,CAAC,KAAK,CAAC;IAChC,CAAC,EAAE,GAAG,CAAC;EACT;AACF;AACA;;;;;;;;;;AAUG;AACH,OAAO,IAAM,oBAAoB,GAAG,SAAA,CAClC,GAAwB,EACxB,OAAsD,EAAA;EAEtD;;;;;;AAME;EACF,IAAM,KAAK,GAAG,IAAI,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC;EACzC,KAAK,CAAC,GAAG,GAAG,UAAU,GAAQ,EAAE,KAAU,EAAA;IACxC,IAAM,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC;IAC1D,QAAQ,CAAC,IAA6B,CAAC;IACvC,OAAO,GAAG;EACZ,CAAC;EACD,OAAO,KAAK;AACd,CAA4B;AAM5B;;;;;;;;;;AAUG;AACH,OAAO,IAAM,sBAAsB,GAAG,SAAA,CACpC,GAAwB,EACxB,OAAsD,EAAA;EAEtD;;;;;;AAME;EACF,IAAM,KAAK,GAAG,IAAI,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC;EAC3C,KAAK,CAAC,GAAG,GAAG,UAAU,GAAQ,EAAE,KAAU,EAAA;IACxC,IAAM,GAAG,GAAG,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC;IAC5D,QAAQ,CAAC,IAA6B,CAAC;IACvC,OAAO,GAAG;EACZ,CAAC;EACD,OAAO,KAAK;AACd,CAA8B","sourcesContent":["import { WeakCache, StrongCache } from \"@wry/caches\";\n\ninterface CleanableCache {\n  size: number;\n  max?: number;\n  clean: () => void;\n}\nconst scheduledCleanup = new WeakSet<CleanableCache>();\nfunction schedule(cache: CleanableCache) {\n  if (cache.size <= (cache.max || -1)) {\n    return;\n  }\n  if (!scheduledCleanup.has(cache)) {\n    scheduledCleanup.add(cache);\n    setTimeout(() => {\n      cache.clean();\n      scheduledCleanup.delete(cache);\n    }, 100);\n  }\n}\n/**\n * @internal\n * A version of WeakCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of WeakCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `WeakCache`.\n */\nexport const AutoCleanedWeakCache = function (\n  max?: number | undefined,\n  dispose?: ((value: any, key: any) => void) | undefined\n) {\n  /*\n  Some builds of `WeakCache` are function prototypes, some are classes.\n  This library still builds with an ES5 target, so we can't extend the\n  real classes.\n  Instead, we have to use this workaround until we switch to a newer build\n  target.\n  */\n  const cache = new WeakCache(max, dispose);\n  cache.set = function (key: any, value: any) {\n    const ret = WeakCache.prototype.set.call(this, key, value);\n    schedule(this as any as CleanableCache);\n    return ret;\n  };\n  return cache;\n} as any as typeof WeakCache;\n/**\n * @internal\n */\nexport type AutoCleanedWeakCache<K extends object, V> = WeakCache<K, V>;\n\n/**\n * @internal\n * A version of StrongCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of StrongCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `StrongCache`.\n */\nexport const AutoCleanedStrongCache = function (\n  max?: number | undefined,\n  dispose?: ((value: any, key: any) => void) | undefined\n) {\n  /*\n  Some builds of `StrongCache` are function prototypes, some are classes.\n  This library still builds with an ES5 target, so we can't extend the\n  real classes.\n  Instead, we have to use this workaround until we switch to a newer build\n  target.\n  */\n  const cache = new StrongCache(max, dispose);\n  cache.set = function (key: any, value: any) {\n    const ret = StrongCache.prototype.set.call(this, key, value);\n    schedule(this as any as CleanableCache);\n    return ret;\n  };\n  return cache;\n} as any as typeof StrongCache;\n/**\n * @internal\n */\nexport type AutoCleanedStrongCache<K, V> = StrongCache<K, V>;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}