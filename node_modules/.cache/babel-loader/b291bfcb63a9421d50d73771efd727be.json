{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { getApolloContext } from \"./ApolloContext.js\";\nexport var ApolloProvider = function (_a) {\n  var client = _a.client,\n    children = _a.children;\n  var ApolloContext = getApolloContext();\n  var parentContext = React.useContext(ApolloContext);\n  var context = React.useMemo(function () {\n    return __assign(__assign({}, parentContext), {\n      client: client || parentContext.client\n    });\n  }, [parentContext, client]);\n  invariant(context.client, 47);\n  return React.createElement(ApolloContext.Provider, {\n    value: context\n  }, children);\n};","map":{"version":3,"sources":["../../../src/react/context/ApolloProvider.tsx"],"names":[],"mappings":";AAAA,SAAS,SAAS,QAAQ,kCAAkC;AAE5D,OAAO,KAAK,KAAK,MAAM,SAAS;AAIhC,SAAS,gBAAgB,QAAQ,oBAAoB;AAOrD,OAAO,IAAM,cAAc,GAA4C,SAAA,CAAC,EAGvE,EAAA;MAFC,MAAM,GAAA,EAAA,CAAA,MAAA;IACN,QAAQ,GAAA,EAAA,CAAA,QAAA;EAER,IAAM,aAAa,GAAG,gBAAgB,CAAA,CAAE;EACxC,IAAM,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC;EAErD,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,YAAA;IAC5B,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,aAAa,CAAA,EAAA;MAChB,MAAM,EAAE,MAAM,IAAI,aAAa,CAAC;IAAM,CAAA,CAAA;EAE1C,CAAC,EAAE,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;EAE3B,SAAS,CACP,OAAO,CAAC,MAAM,EACd,EAAA,CAAA;EACE,OAAA,KAAA,CAAA,aAAA,CAAA,aAAA,CAAA,QAAA,EAAA;IAAA,KACF,EAAA;EAAA,CAAA,EAAA,QAAA,CAAA;CAEF","sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport * as React from \"rehackt\";\nimport type * as ReactTypes from \"react\";\n\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { getApolloContext } from \"./ApolloContext.js\";\n\nexport interface ApolloProviderProps<TCache> {\n  client: ApolloClient<TCache>;\n  children: ReactTypes.ReactNode | ReactTypes.ReactNode[] | null;\n}\n\nexport const ApolloProvider: ReactTypes.FC<ApolloProviderProps<any>> = ({\n  client,\n  children,\n}) => {\n  const ApolloContext = getApolloContext();\n  const parentContext = React.useContext(ApolloContext);\n\n  const context = React.useMemo(() => {\n    return {\n      ...parentContext,\n      client: client || parentContext.client,\n    };\n  }, [parentContext, client]);\n\n  invariant(\n    context.client,\n    \"ApolloProvider was not passed a client instance. Make \" +\n      'sure you pass in your client via the \"client\" prop.'\n  );\n\n  return (\n    <ApolloContext.Provider value={context}>{children}</ApolloContext.Provider>\n  );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}