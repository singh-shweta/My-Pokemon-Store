{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation(mutation, options) {\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  var _a = React.useState({\n      called: false,\n      loading: false,\n      client: client\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  var ref = React.useRef({\n    result: result,\n    mutationId: 0,\n    isMounted: true,\n    client: client,\n    mutation: mutation,\n    options: options\n  });\n  useIsomorphicLayoutEffect(function () {\n    Object.assign(ref.current, {\n      client: client,\n      options: options,\n      mutation: mutation\n    });\n  });\n  var execute = React.useCallback(function (executeOptions) {\n    if (executeOptions === void 0) {\n      executeOptions = {};\n    }\n    var _a = ref.current,\n      options = _a.options,\n      mutation = _a.mutation;\n    var baseOptions = __assign(__assign({}, options), {\n      mutation: mutation\n    });\n    var client = executeOptions.client || ref.current.client;\n    if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client: client\n      });\n    }\n    var mutationId = ++ref.current.mutationId;\n    var clientOptions = mergeOptions(baseOptions, executeOptions);\n    return client.mutate(clientOptions).then(function (response) {\n      var _a, _b;\n      var data = response.data,\n        errors = response.errors;\n      var error = errors && errors.length > 0 ? new ApolloError({\n        graphQLErrors: errors\n      }) : void 0;\n      var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n      if (error && onError) {\n        onError(error, clientOptions);\n      }\n      if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n        var result_1 = {\n          called: true,\n          loading: false,\n          data: data,\n          error: error,\n          client: client\n        };\n        if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n          setResult(ref.current.result = result_1);\n        }\n      }\n      var onCompleted = executeOptions.onCompleted || ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onCompleted);\n      if (!error) {\n        onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n      }\n      return response;\n    }).catch(function (error) {\n      var _a;\n      if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n        var result_2 = {\n          loading: false,\n          error: error,\n          data: void 0,\n          called: true,\n          client: client\n        };\n        if (!equal(ref.current.result, result_2)) {\n          setResult(ref.current.result = result_2);\n        }\n      }\n      var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n      if (onError) {\n        onError(error, clientOptions);\n        // TODO(brian): why are we returning this here???\n        return {\n          data: void 0,\n          errors: error\n        };\n      }\n      throw error;\n    });\n  }, []);\n  var reset = React.useCallback(function () {\n    if (ref.current.isMounted) {\n      var result_3 = {\n        called: false,\n        loading: false,\n        client: ref.current.client\n      };\n      Object.assign(ref.current, {\n        mutationId: 0,\n        result: result_3\n      });\n      setResult(result_3);\n    }\n  }, []);\n  React.useEffect(function () {\n    var current = ref.current;\n    current.isMounted = true;\n    return function () {\n      current.isMounted = false;\n    };\n  }, []);\n  return [execute, __assign({\n    reset: reset\n  }, result)];\n}","map":{"version":3,"sources":["../../../src/react/hooks/useMutation.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,SAAS;AAiBhC,SAAS,YAAY,QAAQ,0BAA0B;AACvD,SAAS,KAAK,QAAQ,eAAe;AACrC,SAAS,YAAY,EAAE,kBAAkB,QAAQ,oBAAoB;AACrE,SAAS,WAAW,QAAQ,uBAAuB;AACnD,SAAS,eAAe,QAAQ,sBAAsB;AACtD,SAAS,yBAAyB,QAAQ,yCAAyC;AAEnF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CG;AACH,OAAM,SAAU,WAAW,CAMzB,QAA6D,EAC7D,OAKC,EAAA;EAED,IAAM,MAAM,GAAG,eAAe,CAAC,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,MAAM,CAAC;EAC/C,kBAAkB,CAAC,QAAQ,EAAE,YAAY,CAAC,QAAQ,CAAC;EAC7C,IAAA,EAAA,GAAsB,KAAK,CAAC,QAAQ,CAAgC;MACxE,MAAM,EAAE,KAAK;MACb,OAAO,EAAE,KAAK;MACd,MAAM,EAAA;KACP,CAAC;IAJK,MAAM,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,SAAS,GAAA,EAAA,CAAA,CAAA,CAItB;EAEF,IAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;IACvB,MAAM,EAAA,MAAA;IACN,UAAU,EAAE,CAAC;IACb,SAAS,EAAE,IAAI;IACf,MAAM,EAAA,MAAA;IACN,QAAQ,EAAA,QAAA;IACR,OAAO,EAAA;GACR,CAAC;EAEF,yBAAyB,CAAC,YAAA;IACxB,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE;MAAE,MAAM,EAAA,MAAA;MAAE,OAAO,EAAA,OAAA;MAAE,QAAQ,EAAA;IAAA,CAAE,CAAC;EAC3D,CAAC,CAAC;EAEF,IAAM,OAAO,GAAG,KAAK,CAAC,WAAW,CAC/B,UACE,cAKM,EAAA;IALN,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;MAAA,cAAA,GAAA,CAAA,CAKM;IAAA;IAEA,IAAA,EAAA,GAAwB,GAAG,CAAC,OAAO;MAAjC,OAAO,GAAA,EAAA,CAAA,OAAA;MAAE,QAAQ,GAAA,EAAA,CAAA,QAAgB;IACzC,IAAM,WAAW,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAQ,OAAO,CAAA,EAAA;MAAE,QAAQ,EAAA;IAAA,CAAA,CAAE;IAC5C,IAAM,MAAM,GAAG,cAAc,CAAC,MAAM,IAAI,GAAG,CAAC,OAAO,CAAC,MAAM;IAE1D,IACE,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,IAC3B,CAAC,WAAW,CAAC,aAAa,IAC1B,GAAG,CAAC,OAAO,CAAC,SAAS,EACrB;MACA,SAAS,CACN,GAAG,CAAC,OAAO,CAAC,MAAM,GAAG;QACpB,OAAO,EAAE,IAAI;QACb,KAAK,EAAE,KAAK,CAAC;QACb,IAAI,EAAE,KAAK,CAAC;QACZ,MAAM,EAAE,IAAI;QACZ,MAAM,EAAA;MACP,CAAC,CACH;IACH;IAEA,IAAM,UAAU,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,UAAU;IAC3C,IAAM,aAAa,GAAG,YAAY,CAAC,WAAW,EAAE,cAAc,CAAC;IAE/D,OAAO,MAAM,CACV,MAAM,CAAC,aAA2D,CAAC,CACnE,IAAI,CAAC,UAAC,QAAQ,EAAA;;MACL,IAAA,IAAI,GAAa,QAAQ,CAAA,IAArB;QAAE,MAAM,GAAK,QAAQ,CAAA,MAAb;MACpB,IAAM,KAAK,GACT,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,GACzB,IAAI,WAAW,CAAC;QAAE,aAAa,EAAE;MAAM,CAAE,CAAC,GAC1C,KAAK,CAAC;MAEV,IAAM,OAAO,GACX,cAAc,CAAC,OAAO,KAAI,CAAA,EAAA,GAAA,GAAG,CAAC,OAAO,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,CAAA;MAExD,IAAI,KAAK,IAAI,OAAO,EAAE;QACpB,OAAO,CACL,KAAK,EACL,aAA2D,CAC5D;MACH;MAEA,IACE,UAAU,KAAK,GAAG,CAAC,OAAO,CAAC,UAAU,IACrC,CAAC,aAAa,CAAC,aAAa,EAC5B;QACA,IAAM,QAAM,GAAG;UACb,MAAM,EAAE,IAAI;UACZ,OAAO,EAAE,KAAK;UACd,IAAI,EAAA,IAAA;UACJ,KAAK,EAAA,KAAA;UACL,MAAM,EAAA;SACP;QAED,IAAI,GAAG,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,QAAM,CAAC,EAAE;UAC/D,SAAS,CAAE,GAAG,CAAC,OAAO,CAAC,MAAM,GAAG,QAAO,CAAC;QAC1C;MACF;MAEA,IAAM,WAAW,GACf,cAAc,CAAC,WAAW,KAAI,CAAA,EAAA,GAAA,GAAG,CAAC,OAAO,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,CAAA;MAEhE,IAAI,CAAC,KAAK,EAAE;QACV,WAAW,KAAA,IAAA,IAAX,WAAW,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAX,WAAW,CACT,QAAQ,CAAC,IAAK,EACd,aAA2D,CAC5D;MACH;MAEA,OAAO,QAAQ;IACjB,CAAC,CAAC,CACD,KAAK,CAAC,UAAC,KAAK,EAAA;;MACX,IAAI,UAAU,KAAK,GAAG,CAAC,OAAO,CAAC,UAAU,IAAI,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE;QAClE,IAAM,QAAM,GAAG;UACb,OAAO,EAAE,KAAK;UACd,KAAK,EAAA,KAAA;UACL,IAAI,EAAE,KAAK,CAAC;UACZ,MAAM,EAAE,IAAI;UACZ,MAAM,EAAA;SACP;QAED,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,QAAM,CAAC,EAAE;UACtC,SAAS,CAAE,GAAG,CAAC,OAAO,CAAC,MAAM,GAAG,QAAO,CAAC;QAC1C;MACF;MAEA,IAAM,OAAO,GACX,cAAc,CAAC,OAAO,KAAI,CAAA,EAAA,GAAA,GAAG,CAAC,OAAO,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,CAAA;MAExD,IAAI,OAAO,EAAE;QACX,OAAO,CACL,KAAK,EACL,aAA2D,CAC5D;QAED;QACA,OAAO;UAAE,IAAI,EAAE,KAAK,CAAC;UAAE,MAAM,EAAE;QAAK,CAAE;MACxC;MAEA,MAAM,KAAK;IACb,CAAC,CAAC;EACN,CAAC,EACD,EAAE,CACH;EAED,IAAM,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,YAAA;IAC9B,IAAI,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE;MACzB,IAAM,QAAM,GAAG;QACb,MAAM,EAAE,KAAK;QACb,OAAO,EAAE,KAAK;QACd,MAAM,EAAE,GAAG,CAAC,OAAO,CAAC;OACrB;MACD,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE;QAAE,UAAU,EAAE,CAAC;QAAE,MAAM,EAAA;MAAA,CAAE,CAAC;MACrD,SAAS,CAAC,QAAM,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,KAAK,CAAC,SAAS,CAAC,YAAA;IACd,IAAM,OAAO,GAAG,GAAG,CAAC,OAAO;IAC3B,OAAO,CAAC,SAAS,GAAG,IAAI;IAExB,OAAO,YAAA;MACL,OAAO,CAAC,SAAS,GAAG,KAAK;IAC3B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAAC,OAAO,EAAA,QAAA,CAAA;IAAI,KAAK,EAAA;EAAA,CAAA,EAAK,MAAM,CAAA,CAAG;AACxC","sourcesContent":["import * as React from \"rehackt\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport type {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport type {\n  ApolloCache,\n  DefaultContext,\n  MutationOptions,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>,\n    TContext,\n    TCache\n  >\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = React.useState<Omit<MutationResult, \"reset\">>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = React.useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    Object.assign(ref.current, { client, options, mutation });\n  });\n\n  const execute = React.useCallback(\n    (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {}\n    ) => {\n      const { options, mutation } = ref.current;\n      const baseOptions = { ...options, mutation };\n      const client = executeOptions.client || ref.current.client;\n\n      if (\n        !ref.current.result.loading &&\n        !baseOptions.ignoreResults &&\n        ref.current.isMounted\n      ) {\n        setResult(\n          (ref.current.result = {\n            loading: true,\n            error: void 0,\n            data: void 0,\n            called: true,\n            client,\n          })\n        );\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(baseOptions, executeOptions);\n\n      return client\n        .mutate(clientOptions as MutationOptions<TData, OperationVariables>)\n        .then((response) => {\n          const { data, errors } = response;\n          const error =\n            errors && errors.length > 0 ?\n              new ApolloError({ graphQLErrors: errors })\n            : void 0;\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (error && onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          if (\n            mutationId === ref.current.mutationId &&\n            !clientOptions.ignoreResults\n          ) {\n            const result = {\n              called: true,\n              loading: false,\n              data,\n              error,\n              client,\n            };\n\n            if (ref.current.isMounted && !equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onCompleted =\n            executeOptions.onCompleted || ref.current.options?.onCompleted;\n\n          if (!error) {\n            onCompleted?.(\n              response.data!,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          return response;\n        })\n        .catch((error) => {\n          if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n            const result = {\n              loading: false,\n              error,\n              data: void 0,\n              called: true,\n              client,\n            };\n\n            if (!equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n\n            // TODO(brian): why are we returning this here???\n            return { data: void 0, errors: error };\n          }\n\n          throw error;\n        });\n    },\n    []\n  );\n\n  const reset = React.useCallback(() => {\n    if (ref.current.isMounted) {\n      const result = {\n        called: false,\n        loading: false,\n        client: ref.current.client,\n      };\n      Object.assign(ref.current, { mutationId: 0, result });\n      setResult(result);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const current = ref.current;\n    current.isMounted = true;\n\n    return () => {\n      current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}