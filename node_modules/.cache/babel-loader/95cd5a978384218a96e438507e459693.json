{"ast":null,"code":"import { isPlainObject } from \"./objects.js\";\nexport function omitDeep(value, key) {\n  return __omitDeep(value, key);\n}\nfunction __omitDeep(value, key, known) {\n  if (known === void 0) {\n    known = new Map();\n  }\n  if (known.has(value)) {\n    return known.get(value);\n  }\n  var modified = false;\n  if (Array.isArray(value)) {\n    var array_1 = [];\n    known.set(value, array_1);\n    value.forEach(function (value, index) {\n      var result = __omitDeep(value, key, known);\n      modified || (modified = result !== value);\n      array_1[index] = result;\n    });\n    if (modified) {\n      return array_1;\n    }\n  } else if (isPlainObject(value)) {\n    var obj_1 = Object.create(Object.getPrototypeOf(value));\n    known.set(value, obj_1);\n    Object.keys(value).forEach(function (k) {\n      if (k === key) {\n        modified = true;\n        return;\n      }\n      var result = __omitDeep(value[k], key, known);\n      modified || (modified = result !== value[k]);\n      obj_1[k] = result;\n    });\n    if (modified) {\n      return obj_1;\n    }\n  }\n  return value;\n}","map":{"version":3,"sources":["../../../src/utilities/common/omitDeep.ts"],"names":[],"mappings":"AACA,SAAS,aAAa,QAAQ,cAAc;AAE5C,OAAM,SAAU,QAAQ,CAAsB,KAAQ,EAAE,GAAM,EAAA;EAC5D,OAAO,UAAU,CAAC,KAAK,EAAE,GAAG,CAAC;AAC/B;AAEA,SAAS,UAAU,CACjB,KAAQ,EACR,GAAM,EACN,KAA2B,EAAA;EAA3B,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA;IAAA,KAAA,GAAA,IAAY,GAAG,CAAA,CAAY;EAAA;EAE3B,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IACpB,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC;EACzB;EAEA,IAAI,QAAQ,GAAG,KAAK;EAEpB,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;IACxB,IAAM,OAAK,GAAU,EAAE;IACvB,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,OAAK,CAAC;IAEvB,KAAK,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,KAAK,EAAA;MACzB,IAAM,MAAM,GAAG,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC;MAC5C,QAAQ,KAAR,QAAQ,GAAK,MAAM,KAAK,KAAK,CAAA;MAE7B,OAAK,CAAC,KAAK,CAAC,GAAG,MAAM;IACvB,CAAC,CAAC;IAEF,IAAI,QAAQ,EAAE;MACZ,OAAO,OAAuB;IAChC;EACF,CAAC,MAAM,IAAI,aAAa,CAAC,KAAK,CAAC,EAAE;IAC/B,IAAM,KAAG,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACvD,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,KAAG,CAAC;IAErB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;MAC3B,IAAI,CAAC,KAAK,GAAG,EAAE;QACb,QAAQ,GAAG,IAAI;QACf;MACF;MAEA,IAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC;MAC/C,QAAQ,KAAR,QAAQ,GAAK,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,CAAA;MAEhC,KAAG,CAAC,CAAC,CAAC,GAAG,MAAM;IACjB,CAAC,CAAC;IAEF,IAAI,QAAQ,EAAE;MACZ,OAAO,KAAG;IACZ;EACF;EAEA,OAAO,KAAuB;AAChC","sourcesContent":["import type { DeepOmit } from \"../types/DeepOmit.js\";\nimport { isPlainObject } from \"./objects.js\";\n\nexport function omitDeep<T, K extends string>(value: T, key: K) {\n  return __omitDeep(value, key);\n}\n\nfunction __omitDeep<T, K extends string>(\n  value: T,\n  key: K,\n  known = new Map<any, any>()\n): DeepOmit<T, K> {\n  if (known.has(value)) {\n    return known.get(value);\n  }\n\n  let modified = false;\n\n  if (Array.isArray(value)) {\n    const array: any[] = [];\n    known.set(value, array);\n\n    value.forEach((value, index) => {\n      const result = __omitDeep(value, key, known);\n      modified ||= result !== value;\n\n      array[index] = result;\n    });\n\n    if (modified) {\n      return array as DeepOmit<T, K>;\n    }\n  } else if (isPlainObject(value)) {\n    const obj = Object.create(Object.getPrototypeOf(value));\n    known.set(value, obj);\n\n    Object.keys(value).forEach((k) => {\n      if (k === key) {\n        modified = true;\n        return;\n      }\n\n      const result = __omitDeep(value[k], key, known);\n      modified ||= result !== value[k];\n\n      obj[k] = result;\n    });\n\n    if (modified) {\n      return obj;\n    }\n  }\n\n  return value as DeepOmit<T, K>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}