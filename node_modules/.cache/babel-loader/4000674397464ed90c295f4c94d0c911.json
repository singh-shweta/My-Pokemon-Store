{"ast":null,"code":"import { isNonNullObject } from \"./objects.js\";\nimport { isNonEmptyArray } from \"./arrays.js\";\nimport { DeepMerger } from \"./mergeDeep.js\";\nexport function isExecutionPatchIncrementalResult(value) {\n  return \"incremental\" in value;\n}\nexport function isExecutionPatchInitialResult(value) {\n  return \"hasNext\" in value && \"data\" in value;\n}\nexport function isExecutionPatchResult(value) {\n  return isExecutionPatchIncrementalResult(value) || isExecutionPatchInitialResult(value);\n}\n// This function detects an Apollo payload result before it is transformed\n// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n// once it leaves the link chain.\nexport function isApolloPayloadResult(value) {\n  return isNonNullObject(value) && \"payload\" in value;\n}\nexport function mergeIncrementalData(prevResult, result) {\n  var mergedData = prevResult;\n  var merger = new DeepMerger();\n  if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n    result.incremental.forEach(function (_a) {\n      var data = _a.data,\n        path = _a.path;\n      for (var i = path.length - 1; i >= 0; --i) {\n        var key = path[i];\n        var isNumericKey = !isNaN(+key);\n        var parent_1 = isNumericKey ? [] : {};\n        parent_1[key] = data;\n        data = parent_1;\n      }\n      mergedData = merger.merge(mergedData, data);\n    });\n  }\n  return mergedData;\n}","map":{"version":3,"sources":["../../../src/utilities/common/incrementalResult.ts"],"names":[],"mappings":"AAOA,SAAS,eAAe,QAAQ,cAAc;AAC9C,SAAS,eAAe,QAAQ,aAAa;AAC7C,SAAS,UAAU,QAAQ,gBAAgB;AAE3C,OAAM,SAAU,iCAAiC,CAC/C,KAAqB,EAAA;EAErB,OAAO,aAAa,IAAI,KAAK;AAC/B;AAEA,OAAM,SAAU,6BAA6B,CAC3C,KAAqB,EAAA;EAErB,OAAO,SAAS,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK;AAC9C;AAEA,OAAM,SAAU,sBAAsB,CACpC,KAAqB,EAAA;EAErB,OACE,iCAAiC,CAAC,KAAK,CAAC,IACxC,6BAA6B,CAAC,KAAK,CAAC;AAExC;AAEA;AACA;AACA;AACA,OAAM,SAAU,qBAAqB,CACnC,KAAc,EAAA;EAEd,OAAO,eAAe,CAAC,KAAK,CAAC,IAAI,SAAS,IAAI,KAAK;AACrD;AAEA,OAAM,SAAU,oBAAoB,CAClC,UAAiB,EACjB,MAAmC,EAAA;EAEnC,IAAI,UAAU,GAAG,UAAU;EAC3B,IAAM,MAAM,GAAG,IAAI,UAAU,CAAA,CAAE;EAC/B,IACE,iCAAiC,CAAC,MAAM,CAAC,IACzC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC,EACnC;IACA,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,EAAc,EAAA;UAAZ,IAAI,GAAA,EAAA,CAAA,IAAA;QAAE,IAAI,GAAA,EAAA,CAAA,IAAA;MACtC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;QACzC,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;QACnB,IAAM,YAAY,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;QACjC,IAAM,QAAM,GAAiC,YAAY,GAAG,EAAE,GAAG,CAAA,CAAE;QACnE,QAAM,CAAC,GAAG,CAAC,GAAG,IAAI;QAClB,IAAI,GAAG,QAAqB;MAC9B;MACA,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC;IAC7C,CAAC,CAAC;EACJ;EACA,OAAO,UAAmB;AAC5B","sourcesContent":["import type {\n  ExecutionPatchIncrementalResult,\n  ExecutionPatchInitialResult,\n  ExecutionPatchResult,\n  ApolloPayloadResult,\n  FetchResult,\n} from \"../../link/core/index.js\";\nimport { isNonNullObject } from \"./objects.js\";\nimport { isNonEmptyArray } from \"./arrays.js\";\nimport { DeepMerger } from \"./mergeDeep.js\";\n\nexport function isExecutionPatchIncrementalResult<T>(\n  value: FetchResult<T>\n): value is ExecutionPatchIncrementalResult {\n  return \"incremental\" in value;\n}\n\nexport function isExecutionPatchInitialResult<T>(\n  value: FetchResult<T>\n): value is ExecutionPatchInitialResult<T> {\n  return \"hasNext\" in value && \"data\" in value;\n}\n\nexport function isExecutionPatchResult<T>(\n  value: FetchResult<T>\n): value is ExecutionPatchResult<T> {\n  return (\n    isExecutionPatchIncrementalResult(value) ||\n    isExecutionPatchInitialResult(value)\n  );\n}\n\n// This function detects an Apollo payload result before it is transformed\n// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n// once it leaves the link chain.\nexport function isApolloPayloadResult(\n  value: unknown\n): value is ApolloPayloadResult {\n  return isNonNullObject(value) && \"payload\" in value;\n}\n\nexport function mergeIncrementalData<TData extends object>(\n  prevResult: TData,\n  result: ExecutionPatchResult<TData>\n) {\n  let mergedData = prevResult;\n  const merger = new DeepMerger();\n  if (\n    isExecutionPatchIncrementalResult(result) &&\n    isNonEmptyArray(result.incremental)\n  ) {\n    result.incremental.forEach(({ data, path }) => {\n      for (let i = path.length - 1; i >= 0; --i) {\n        const key = path[i];\n        const isNumericKey = !isNaN(+key);\n        const parent: Record<string | number, any> = isNumericKey ? [] : {};\n        parent[key] = data;\n        data = parent as typeof data;\n      }\n      mergedData = merger.merge(mergedData, data);\n    });\n  }\n  return mergedData as TData;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}