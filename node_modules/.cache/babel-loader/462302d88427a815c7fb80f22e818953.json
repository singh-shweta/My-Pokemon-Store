{"ast":null,"code":"import { Observable } from \"./Observable.js\";\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap(observable, mapFn, catchFn) {\n  return new Observable(function (observer) {\n    var promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then: function (callback) {\n        return new Promise(function (resolve) {\n          return resolve(callback());\n        });\n      }\n    };\n    function makeCallback(examiner, key) {\n      return function (arg) {\n        if (examiner) {\n          var both = function () {\n            // If the observer is closed, we don't want to continue calling the\n            // mapping function - it's result will be swallowed anyways.\n            return observer.closed ? /* will be swallowed */0 : examiner(arg);\n          };\n          promiseQueue = promiseQueue.then(both, both).then(function (result) {\n            return observer.next(result);\n          }, function (error) {\n            return observer.error(error);\n          });\n        } else {\n          observer[key](arg);\n        }\n      };\n    }\n    var handler = {\n      next: makeCallback(mapFn, \"next\"),\n      error: makeCallback(catchFn, \"error\"),\n      complete: function () {\n        // no need to reassign `promiseQueue`, after `observer.complete`,\n        // the observer will be closed and short-circuit everything anyways\n        /*promiseQueue = */\n        promiseQueue.then(function () {\n          return observer.complete();\n        });\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}","map":{"version":3,"sources":["../../../src/utilities/observables/asyncMap.ts"],"names":[],"mappings":"AACA,SAAS,UAAU,QAAQ,iBAAiB;AAE5C;AACA;AACA,OAAM,SAAU,QAAQ,CACtB,UAAyB,EACzB,KAAuC,EACvC,OAA4C,EAAA;EAE5C,OAAO,IAAI,UAAU,CAAI,UAAC,QAAQ,EAAA;IAChC,IAAI,YAAY,GAAG;MACjB;MACA;MACA;MACA,IAAI,EAAA,SAAA,CAAC,QAAmB,EAAA;QACtB,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAA;UAAK,OAAA,OAAO,CAAC,QAAQ,CAAA,CAAE,CAAC;QAAnB,CAAmB,CAAC;MACtD;KACgB;IAElB,SAAS,YAAY,CACnB,QAAuC,EACvC,GAAqB,EAAA;MAErB,OAAO,UAAC,GAAG,EAAA;QACT,IAAI,QAAQ,EAAE;UACZ,IAAM,IAAI,GAAG,SAAA,CAAA,EAAA;YACX;YACA;YACA,OAAA,QAAQ,CAAC,MAAM,GACb,uBAAyB,CAAS,GAClC,QAAQ,CAAC,GAAG,CAAC;UAFf,CAEe;UAEjB,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAC/C,UAAC,MAAM,EAAA;YAAK,OAAA,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;UAArB,CAAqB,EACjC,UAAC,KAAK,EAAA;YAAK,OAAA,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC;UAArB,CAAqB,CACjC;QACH,CAAC,MAAM;UACL,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;QACpB;MACF,CAAC;IACH;IAEA,IAAM,OAAO,GAAgB;MAC3B,IAAI,EAAE,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC;MACjC,KAAK,EAAE,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC;MACrC,QAAQ,EAAA,SAAA,CAAA,EAAA;QACN;QACA;QACA;QAAoB,YAAY,CAAC,IAAI,CAAC,YAAA;UAAM,OAAA,QAAQ,CAAC,QAAQ,CAAA,CAAE;QAAnB,CAAmB,CAAC;MAClE;KACD;IAED,IAAM,GAAG,GAAG,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC;IACzC,OAAO,YAAA;MAAM,OAAA,GAAG,CAAC,WAAW,CAAA,CAAE;IAAjB,CAAiB;EAChC,CAAC,CAAC;AACJ","sourcesContent":["import type { Observer } from \"./Observable.js\";\nimport { Observable } from \"./Observable.js\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>\n): Observable<R> {\n  return new Observable<R>((observer) => {\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise((resolve) => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      key: \"next\" | \"error\"\n    ): (arg: any) => void {\n      return (arg) => {\n        if (examiner) {\n          const both = () =>\n            // If the observer is closed, we don't want to continue calling the\n            // mapping function - it's result will be swallowed anyways.\n            observer.closed ?\n              /* will be swallowed */ (0 as any)\n            : examiner(arg);\n\n          promiseQueue = promiseQueue.then(both, both).then(\n            (result) => observer.next(result),\n            (error) => observer.error(error)\n          );\n        } else {\n          observer[key](arg);\n        }\n      };\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, \"next\"),\n      error: makeCallback(catchFn, \"error\"),\n      complete() {\n        // no need to reassign `promiseQueue`, after `observer.complete`,\n        // the observer will be closed and short-circuit everything anyways\n        /*promiseQueue = */ promiseQueue.then(() => observer.complete());\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}