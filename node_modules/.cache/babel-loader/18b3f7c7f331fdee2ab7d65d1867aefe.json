{"ast":null,"code":"/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */\nimport { canUseAsyncIteratorSymbol } from \"../../utilities/index.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\nfunction isNodeResponse(value) {\n  return !!value.body;\n}\nfunction isReadableStream(value) {\n  return !!value.getReader;\n}\nfunction isAsyncIterableIterator(value) {\n  return !!(canUseAsyncIteratorSymbol && value[Symbol.asyncIterator]);\n}\nfunction isStreamableBlob(value) {\n  return !!value.stream;\n}\nfunction isBlob(value) {\n  return !!value.arrayBuffer;\n}\nfunction isNodeReadableStream(value) {\n  return !!value.pipe;\n}\nexport function responseIterator(response) {\n  var body = response;\n  if (isNodeResponse(response)) body = response.body;\n  if (isAsyncIterableIterator(body)) return asyncIterator(body);\n  if (isReadableStream(body)) return readerIterator(body.getReader());\n  // this errors without casting to ReadableStream<T>\n  // because Blob.stream() returns a NodeJS ReadableStream\n  if (isStreamableBlob(body)) {\n    return readerIterator(body.stream().getReader());\n  }\n  if (isBlob(body)) return promiseIterator(body.arrayBuffer());\n  if (isNodeReadableStream(body)) return nodeStreamIterator(body);\n  throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}","map":{"version":3,"sources":["../../../src/link/http/responseIterator.ts"],"names":[],"mappings":"AAAA;;;AAGG;AAIH,SAAS,yBAAyB,QAAQ,0BAA0B;AAEpE,OAAO,aAAa,MAAM,sBAAsB;AAChD,OAAO,kBAAkB,MAAM,2BAA2B;AAC1D,OAAO,eAAe,MAAM,wBAAwB;AACpD,OAAO,cAAc,MAAM,uBAAuB;AAElD,SAAS,cAAc,CAAC,KAAU,EAAA;EAChC,OAAO,CAAC,CAAE,KAAsB,CAAC,IAAI;AACvC;AAEA,SAAS,gBAAgB,CAAC,KAAU,EAAA;EAClC,OAAO,CAAC,CAAE,KAA6B,CAAC,SAAS;AACnD;AAEA,SAAS,uBAAuB,CAC9B,KAAU,EAAA;EAEV,OAAO,CAAC,EACN,yBAAyB,IACxB,KAAoC,CAAC,MAAM,CAAC,aAAa,CAAC,CAC5D;AACH;AAEA,SAAS,gBAAgB,CAAC,KAAU,EAAA;EAClC,OAAO,CAAC,CAAE,KAAc,CAAC,MAAM;AACjC;AAEA,SAAS,MAAM,CAAC,KAAU,EAAA;EACxB,OAAO,CAAC,CAAE,KAAc,CAAC,WAAW;AACtC;AAEA,SAAS,oBAAoB,CAAC,KAAU,EAAA;EACtC,OAAO,CAAC,CAAE,KAA4B,CAAC,IAAI;AAC7C;AAEA,OAAM,SAAU,gBAAgB,CAC9B,QAAiC,EAAA;EAEjC,IAAI,IAAI,GAAY,QAAQ;EAE5B,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE,IAAI,GAAG,QAAQ,CAAC,IAAI;EAElD,IAAI,uBAAuB,CAAC,IAAI,CAAC,EAAE,OAAO,aAAa,CAAI,IAAI,CAAC;EAEhE,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,OAAO,cAAc,CAAI,IAAI,CAAC,SAAS,CAAA,CAAE,CAAC;EAEtE;EACA;EACA,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE;IAC1B,OAAO,cAAc,CAClB,IAAI,CAAC,MAAM,CAAA,CAAmC,CAAC,SAAS,CAAA,CAAE,CAC5D;EACH;EAEA,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,eAAe,CAAI,IAAI,CAAC,WAAW,CAAA,CAAE,CAAC;EAE/D,IAAI,oBAAoB,CAAC,IAAI,CAAC,EAAE,OAAO,kBAAkB,CAAI,IAAI,CAAC;EAElE,MAAM,IAAI,KAAK,CACb,4EAA4E,CAC7E;AACH","sourcesContent":["/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */\n\nimport type { Response as NodeResponse } from \"node-fetch\";\nimport type { Readable as NodeReadableStream } from \"stream\";\nimport { canUseAsyncIteratorSymbol } from \"../../utilities/index.js\";\n\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\n\nfunction isNodeResponse(value: any): value is NodeResponse {\n  return !!(value as NodeResponse).body;\n}\n\nfunction isReadableStream(value: any): value is ReadableStream<any> {\n  return !!(value as ReadableStream<any>).getReader;\n}\n\nfunction isAsyncIterableIterator(\n  value: any\n): value is AsyncIterableIterator<any> {\n  return !!(\n    canUseAsyncIteratorSymbol &&\n    (value as AsyncIterableIterator<any>)[Symbol.asyncIterator]\n  );\n}\n\nfunction isStreamableBlob(value: any): value is Blob {\n  return !!(value as Blob).stream;\n}\n\nfunction isBlob(value: any): value is Blob {\n  return !!(value as Blob).arrayBuffer;\n}\n\nfunction isNodeReadableStream(value: any): value is NodeReadableStream {\n  return !!(value as NodeReadableStream).pipe;\n}\n\nexport function responseIterator<T>(\n  response: Response | NodeResponse\n): AsyncIterableIterator<T> {\n  let body: unknown = response;\n\n  if (isNodeResponse(response)) body = response.body;\n\n  if (isAsyncIterableIterator(body)) return asyncIterator<T>(body);\n\n  if (isReadableStream(body)) return readerIterator<T>(body.getReader());\n\n  // this errors without casting to ReadableStream<T>\n  // because Blob.stream() returns a NodeJS ReadableStream\n  if (isStreamableBlob(body)) {\n    return readerIterator<T>(\n      (body.stream() as unknown as ReadableStream<T>).getReader()\n    );\n  }\n\n  if (isBlob(body)) return promiseIterator<T>(body.arrayBuffer());\n\n  if (isNodeReadableStream(body)) return nodeStreamIterator<T>(body);\n\n  throw new Error(\n    \"Unknown body type for responseIterator. Please pass a streamable response.\"\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}