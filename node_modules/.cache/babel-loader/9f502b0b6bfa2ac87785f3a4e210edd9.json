{"ast":null,"code":"import * as React from \"rehackt\";\nimport { assertWrappedQueryRef, getWrappedPromise, unwrapQueryRef, updateWrappedQueryRef } from \"../internal/index.js\";\nimport { __use, wrapHook } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useReadQuery(queryRef) {\n  var unwrapped = unwrapQueryRef(queryRef);\n  return wrapHook(\"useReadQuery\", _useReadQuery, unwrapped ? unwrapped[\"observable\"]\n  // in the case of a \"transported\" queryRef object, we need to use the\n  // client that's available to us at the current position in the React tree\n  // that ApolloClient will then have the job to recreate a real queryRef from\n  // the transported object\n  // This is just a context read - it's fine to do this conditionally.\n  // This hook wrapper also shouldn't be optimized by React Compiler.\n  // eslint-disable-next-line react-compiler/react-compiler\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  : useApolloClient())(queryRef);\n}\nfunction _useReadQuery(queryRef) {\n  assertWrappedQueryRef(queryRef);\n  var internalQueryRef = React.useMemo(function () {\n    return unwrapQueryRef(queryRef);\n  }, [queryRef]);\n  var getPromise = React.useCallback(function () {\n    return getWrappedPromise(queryRef);\n  }, [queryRef]);\n  if (internalQueryRef.disposed) {\n    internalQueryRef.reinitialize();\n    updateWrappedQueryRef(queryRef, internalQueryRef.promise);\n  }\n  React.useEffect(function () {\n    return internalQueryRef.retain();\n  }, [internalQueryRef]);\n  var promise = useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    return internalQueryRef.listen(function (promise) {\n      updateWrappedQueryRef(queryRef, promise);\n      forceUpdate();\n    });\n  }, [internalQueryRef, queryRef]), getPromise, getPromise);\n  var result = __use(promise);\n  return React.useMemo(function () {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result)\n    };\n  }, [result]);\n}","map":{"version":3,"sources":["../../../src/react/hooks/useReadQuery.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,SAAS;AAChC,SACE,qBAAqB,EACrB,iBAAiB,EACjB,cAAc,EACd,qBAAqB,QAChB,sBAAsB;AAE7B,SAAS,KAAK,EAAE,QAAQ,QAAQ,qBAAqB;AACrD,SAAS,aAAa,QAAQ,uBAAuB;AACrD,SAAS,oBAAoB,QAAQ,2BAA2B;AAGhE,SAAS,eAAe,QAAQ,sBAAsB;AA2BtD,OAAM,SAAU,YAAY,CAC1B,QAAyB,EAAA;EAEzB,IAAM,SAAS,GAAG,cAAc,CAAC,QAAQ,CAAC;EAE1C,OAAO,QAAQ,CACb,cAAc,EACd,aAAa,EACb,SAAS,GACP,SAAS,CAAC,YAAY;EACtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA,EACA,eAAe,CAAA,CAAE,CACpB,CAAC,QAAQ,CAAC;AACb;AAEA,SAAS,aAAa,CACpB,QAAyB,EAAA;EAEzB,qBAAqB,CAAC,QAAQ,CAAC;EAC/B,IAAM,gBAAgB,GAAG,KAAK,CAAC,OAAO,CACpC,YAAA;IAAM,OAAA,cAAc,CAAC,QAAQ,CAAC;EAAxB,CAAwB,EAC9B,CAAC,QAAQ,CAAC,CACX;EAED,IAAM,UAAU,GAAG,KAAK,CAAC,WAAW,CAClC,YAAA;IAAM,OAAA,iBAAiB,CAAC,QAAQ,CAAC;EAA3B,CAA2B,EACjC,CAAC,QAAQ,CAAC,CACX;EAED,IAAI,gBAAgB,CAAC,QAAQ,EAAE;IAC7B,gBAAgB,CAAC,YAAY,CAAA,CAAE;IAC/B,qBAAqB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,OAAO,CAAC;EAC3D;EAEA,KAAK,CAAC,SAAS,CAAC,YAAA;IAAM,OAAA,gBAAgB,CAAC,MAAM,CAAA,CAAE;EAAzB,CAAyB,EAAE,CAAC,gBAAgB,CAAC,CAAC;EAEpE,IAAM,OAAO,GAAG,oBAAoB,CAClC,KAAK,CAAC,WAAW,CACf,UAAC,WAAW,EAAA;IACV,OAAO,gBAAgB,CAAC,MAAM,CAAC,UAAC,OAAO,EAAA;MACrC,qBAAqB,CAAC,QAAQ,EAAE,OAAO,CAAC;MACxC,WAAW,CAAA,CAAE;IACf,CAAC,CAAC;EACJ,CAAC,EACD,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAC7B,EACD,UAAU,EACV,UAAU,CACX;EAED,IAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC;EAE7B,OAAO,KAAK,CAAC,OAAO,CAAC,YAAA;IACnB,OAAO;MACL,IAAI,EAAE,MAAM,CAAC,IAAI;MACjB,aAAa,EAAE,MAAM,CAAC,aAAa;MACnC,KAAK,EAAE,aAAa,CAAC,MAAM;KAC5B;EACH,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;AACd","sourcesContent":["import * as React from \"rehackt\";\nimport {\n  assertWrappedQueryRef,\n  getWrappedPromise,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n} from \"../internal/index.js\";\nimport type { QueryRef } from \"../internal/index.js\";\nimport { __use, wrapHook } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { ApolloError } from \"../../errors/index.js\";\nimport type { NetworkStatus } from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\nexport interface UseReadQueryResult<TData = unknown> {\n  /**\n   * An object containing the result of your GraphQL query after it completes.\n   *\n   * This value might be `undefined` if a query results in one or more errors\n   * (depending on the query's `errorPolicy`).\n   */\n  data: TData;\n  /**\n   * If the query produces one or more errors, this object contains either an\n   * array of `graphQLErrors` or a single `networkError`. Otherwise, this value\n   * is `undefined`.\n   *\n   * This property can be ignored when using the default `errorPolicy` or an\n   * `errorPolicy` of `none`. The hook will throw the error instead of setting\n   * this property.\n   */\n  error: ApolloError | undefined;\n  /**\n   * A number indicating the current network state of the query's associated\n   * request. {@link https://github.com/apollographql/apollo-client/blob/d96f4578f89b933c281bb775a39503f6cdb59ee8/src/core/networkStatus.ts#L4 | See possible values}.\n   */\n  networkStatus: NetworkStatus;\n}\n\nexport function useReadQuery<TData>(\n  queryRef: QueryRef<TData>\n): UseReadQueryResult<TData> {\n  const unwrapped = unwrapQueryRef(queryRef);\n\n  return wrapHook(\n    \"useReadQuery\",\n    _useReadQuery,\n    unwrapped ?\n      unwrapped[\"observable\"]\n      // in the case of a \"transported\" queryRef object, we need to use the\n      // client that's available to us at the current position in the React tree\n      // that ApolloClient will then have the job to recreate a real queryRef from\n      // the transported object\n      // This is just a context read - it's fine to do this conditionally.\n      // This hook wrapper also shouldn't be optimized by React Compiler.\n      // eslint-disable-next-line react-compiler/react-compiler\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n    : useApolloClient()\n  )(queryRef);\n}\n\nfunction _useReadQuery<TData>(\n  queryRef: QueryRef<TData>\n): UseReadQueryResult<TData> {\n  assertWrappedQueryRef(queryRef);\n  const internalQueryRef = React.useMemo(\n    () => unwrapQueryRef(queryRef),\n    [queryRef]\n  );\n\n  const getPromise = React.useCallback(\n    () => getWrappedPromise(queryRef),\n    [queryRef]\n  );\n\n  if (internalQueryRef.disposed) {\n    internalQueryRef.reinitialize();\n    updateWrappedQueryRef(queryRef, internalQueryRef.promise);\n  }\n\n  React.useEffect(() => internalQueryRef.retain(), [internalQueryRef]);\n\n  const promise = useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        return internalQueryRef.listen((promise) => {\n          updateWrappedQueryRef(queryRef, promise);\n          forceUpdate();\n        });\n      },\n      [internalQueryRef, queryRef]\n    ),\n    getPromise,\n    getPromise\n  );\n\n  const result = __use(promise);\n\n  return React.useMemo(() => {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result),\n    };\n  }, [result]);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}