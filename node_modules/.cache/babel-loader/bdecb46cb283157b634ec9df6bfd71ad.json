{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport { argumentsObjectFromField, DeepMerger, isNonEmptyArray, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, isArray } from \"./helpers.js\";\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nvar specifierInfoCache = Object.create(null);\nfunction lookupSpecifierInfo(spec) {\n  // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n  // just arrays of strings or nested KeySpecifier arrays, and the order of the\n  // array elements is important (and suitably preserved by JSON.stringify).\n  var cacheKey = JSON.stringify(spec);\n  return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = Object.create(null));\n}\nexport function keyFieldsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {\n    var extract = function (from, key) {\n      return context.readField(key, from);\n    };\n    var keyObject = context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {\n      var extracted = extractKeyPath(context.storeObject, schemaKeyPath,\n      // Using context.readField to extract paths from context.storeObject\n      // allows the extraction to see through Reference objects and respect\n      // custom read functions.\n      extract);\n      if (extracted === void 0 && object !== context.storeObject && hasOwn.call(object, schemaKeyPath[0])) {\n        // If context.storeObject fails to provide a value for the requested\n        // path, fall back to the raw result object, if it has a top-level key\n        // matching the first key in the path (schemaKeyPath[0]). This allows\n        // key fields included in the written data to be saved in the cache\n        // even if they are not selected explicitly in context.selectionSet.\n        // Not being mentioned by context.selectionSet is convenient here,\n        // since it means these extra fields cannot be affected by field\n        // aliasing, which is why we can use extractKey instead of\n        // context.readField for this extraction.\n        extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n      }\n      invariant(extracted !== void 0, 4, schemaKeyPath.join(\".\"), object);\n      return extracted;\n    });\n    return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n  });\n}\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nexport function keyArgsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyArgsFn || (info.keyArgsFn = function (args, _a) {\n    var field = _a.field,\n      variables = _a.variables,\n      fieldName = _a.fieldName;\n    var collected = collectSpecifierPaths(specifier, function (keyPath) {\n      var firstKey = keyPath[0];\n      var firstChar = firstKey.charAt(0);\n      if (firstChar === \"@\") {\n        if (field && isNonEmptyArray(field.directives)) {\n          var directiveName_1 = firstKey.slice(1);\n          // If the directive appears multiple times, only the first\n          // occurrence's arguments will be used. TODO Allow repetition?\n          // TODO Cache this work somehow, a la aliasMap?\n          var d = field.directives.find(function (d) {\n            return d.name.value === directiveName_1;\n          });\n          // Fortunately argumentsObjectFromField works for DirectiveNode!\n          var directiveArgs = d && argumentsObjectFromField(d, variables);\n          // For directives without arguments (d defined, but directiveArgs ===\n          // null), the presence or absence of the directive still counts as\n          // part of the field key, so we return null in those cases. If no\n          // directive with this name was found for this field (d undefined and\n          // thus directiveArgs undefined), we return undefined, which causes\n          // this value to be omitted from the key object returned by\n          // collectSpecifierPaths.\n          return directiveArgs && extractKeyPath(directiveArgs,\n          // If keyPath.length === 1, this code calls extractKeyPath with an\n          // empty path, which works because it uses directiveArgs as the\n          // extracted value.\n          keyPath.slice(1));\n        }\n        // If the key started with @ but there was no corresponding directive,\n        // we want to omit this value from the key object, not fall through to\n        // treating @whatever as a normal argument name.\n        return;\n      }\n      if (firstChar === \"$\") {\n        var variableName = firstKey.slice(1);\n        if (variables && hasOwn.call(variables, variableName)) {\n          var varKeyPath = keyPath.slice(0);\n          varKeyPath[0] = variableName;\n          return extractKeyPath(variables, varKeyPath);\n        }\n        // If the key started with $ but there was no corresponding variable, we\n        // want to omit this value from the key object, not fall through to\n        // treating $whatever as a normal argument name.\n        return;\n      }\n      if (args) {\n        return extractKeyPath(args, keyPath);\n      }\n    });\n    var suffix = JSON.stringify(collected);\n    // If no arguments were passed to this field, and it didn't have any other\n    // field key contributions from directives or variables, hide the empty\n    // :{} suffix from the field key. However, a field passed no arguments can\n    // still end up with a non-empty :{...} suffix if its key configuration\n    // refers to directives or variables.\n    if (args || suffix !== \"{}\") {\n      fieldName += \":\" + suffix;\n    }\n    return fieldName;\n  });\n}\nexport function collectSpecifierPaths(specifier, extractor) {\n  // For each path specified by specifier, invoke the extractor, and repeatedly\n  // merge the results together, with appropriate ancestor context.\n  var merger = new DeepMerger();\n  return getSpecifierPaths(specifier).reduce(function (collected, path) {\n    var _a;\n    var toMerge = extractor(path);\n    if (toMerge !== void 0) {\n      // This path is not expected to contain array indexes, so the toMerge\n      // reconstruction will not contain arrays. TODO Fix this?\n      for (var i = path.length - 1; i >= 0; --i) {\n        toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n      }\n      collected = merger.merge(collected, toMerge);\n    }\n    return collected;\n  }, Object.create(null));\n}\nexport function getSpecifierPaths(spec) {\n  var info = lookupSpecifierInfo(spec);\n  if (!info.paths) {\n    var paths_1 = info.paths = [];\n    var currentPath_1 = [];\n    spec.forEach(function (s, i) {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach(function (p) {\n          return paths_1.push(currentPath_1.concat(p));\n        });\n        currentPath_1.length = 0;\n      } else {\n        currentPath_1.push(s);\n        if (!isArray(spec[i + 1])) {\n          paths_1.push(currentPath_1.slice(0));\n          currentPath_1.length = 0;\n        }\n      }\n    });\n  }\n  return info.paths;\n}\nfunction extractKey(object, key) {\n  return object[key];\n}\nexport function extractKeyPath(object, path, extract) {\n  // For each key in path, extract the corresponding child property from obj,\n  // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n  // possible). The final result of path.reduce is normalized so unexpected leaf\n  // objects have their keys safely sorted. That final result is difficult to\n  // type as anything other than any. You're welcome to try to improve the\n  // return type, but keep in mind extractKeyPath is not a public function\n  // (exported only for testing), so the effort may not be worthwhile unless the\n  // limited set of actual callers (see above) pass arguments that TypeScript\n  // can statically type. If we know only that path is some array of strings\n  // (and not, say, a specific tuple of statically known strings), any (or\n  // possibly unknown) is the honest answer.\n  extract = extract || extractKey;\n  return normalize(path.reduce(function reducer(obj, key) {\n    return isArray(obj) ? obj.map(function (child) {\n      return reducer(child, key);\n    }) : obj && extract(obj, key);\n  }, object));\n}\nfunction normalize(value) {\n  // Usually the extracted value will be a scalar value, since most primary\n  // key fields are scalar, but just in case we get an object or an array, we\n  // need to do some normalization of the order of (nested) keys.\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize);\n    }\n    return collectSpecifierPaths(Object.keys(value).sort(), function (path) {\n      return extractKeyPath(value, path);\n    });\n  }\n  return value;\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/key-extractor.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport {\n  argumentsObjectFromField,\n  DeepMerger,\n  isNonEmptyArray,\n  isNonNullObject,\n} from \"../../utilities/index.js\";\n\nimport { hasOwn, isArray } from \"./helpers.js\";\nimport type {\n  KeySpecifier,\n  KeyFieldsFunction,\n  KeyArgsFunction,\n} from \"./policies.js\";\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nconst specifierInfoCache: Record<\n  string,\n  {\n    paths?: string[][];\n    keyFieldsFn?: KeyFieldsFunction;\n    keyArgsFn?: KeyArgsFunction;\n  }\n> = Object.create(null);\n\nfunction lookupSpecifierInfo(spec: KeySpecifier) {\n  // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n  // just arrays of strings or nested KeySpecifier arrays, and the order of the\n  // array elements is important (and suitably preserved by JSON.stringify).\n  const cacheKey = JSON.stringify(spec);\n  return (\n    specifierInfoCache[cacheKey] ||\n    (specifierInfoCache[cacheKey] = Object.create(null))\n  );\n}\n\nexport function keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier\n): KeyFieldsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return (\n    info.keyFieldsFn ||\n    (info.keyFieldsFn = (object, context) => {\n      const extract: typeof extractKey = (from, key) =>\n        context.readField(key, from);\n\n      const keyObject = (context.keyObject = collectSpecifierPaths(\n        specifier,\n        (schemaKeyPath) => {\n          let extracted = extractKeyPath(\n            context.storeObject,\n            schemaKeyPath,\n            // Using context.readField to extract paths from context.storeObject\n            // allows the extraction to see through Reference objects and respect\n            // custom read functions.\n            extract\n          );\n\n          if (\n            extracted === void 0 &&\n            object !== context.storeObject &&\n            hasOwn.call(object, schemaKeyPath[0])\n          ) {\n            // If context.storeObject fails to provide a value for the requested\n            // path, fall back to the raw result object, if it has a top-level key\n            // matching the first key in the path (schemaKeyPath[0]). This allows\n            // key fields included in the written data to be saved in the cache\n            // even if they are not selected explicitly in context.selectionSet.\n            // Not being mentioned by context.selectionSet is convenient here,\n            // since it means these extra fields cannot be affected by field\n            // aliasing, which is why we can use extractKey instead of\n            // context.readField for this extraction.\n            extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n          }\n\n          invariant(\n            extracted !== void 0,\n            `Missing field '%s' while extracting keyFields from %s`,\n            schemaKeyPath.join(\".\"),\n            object\n          );\n\n          return extracted;\n        }\n      ));\n\n      return `${context.typename}:${JSON.stringify(keyObject)}`;\n    })\n  );\n}\n\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nexport function keyArgsFnFromSpecifier(\n  specifier: KeySpecifier\n): KeyArgsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return (\n    info.keyArgsFn ||\n    (info.keyArgsFn = (args, { field, variables, fieldName }) => {\n      const collected = collectSpecifierPaths(specifier, (keyPath) => {\n        const firstKey = keyPath[0];\n        const firstChar = firstKey.charAt(0);\n\n        if (firstChar === \"@\") {\n          if (field && isNonEmptyArray(field.directives)) {\n            const directiveName = firstKey.slice(1);\n            // If the directive appears multiple times, only the first\n            // occurrence's arguments will be used. TODO Allow repetition?\n            // TODO Cache this work somehow, a la aliasMap?\n            const d = field.directives.find(\n              (d) => d.name.value === directiveName\n            );\n            // Fortunately argumentsObjectFromField works for DirectiveNode!\n            const directiveArgs = d && argumentsObjectFromField(d, variables);\n            // For directives without arguments (d defined, but directiveArgs ===\n            // null), the presence or absence of the directive still counts as\n            // part of the field key, so we return null in those cases. If no\n            // directive with this name was found for this field (d undefined and\n            // thus directiveArgs undefined), we return undefined, which causes\n            // this value to be omitted from the key object returned by\n            // collectSpecifierPaths.\n            return (\n              directiveArgs &&\n              extractKeyPath(\n                directiveArgs,\n                // If keyPath.length === 1, this code calls extractKeyPath with an\n                // empty path, which works because it uses directiveArgs as the\n                // extracted value.\n                keyPath.slice(1)\n              )\n            );\n          }\n          // If the key started with @ but there was no corresponding directive,\n          // we want to omit this value from the key object, not fall through to\n          // treating @whatever as a normal argument name.\n          return;\n        }\n\n        if (firstChar === \"$\") {\n          const variableName = firstKey.slice(1);\n          if (variables && hasOwn.call(variables, variableName)) {\n            const varKeyPath = keyPath.slice(0);\n            varKeyPath[0] = variableName;\n            return extractKeyPath(variables, varKeyPath);\n          }\n          // If the key started with $ but there was no corresponding variable, we\n          // want to omit this value from the key object, not fall through to\n          // treating $whatever as a normal argument name.\n          return;\n        }\n\n        if (args) {\n          return extractKeyPath(args, keyPath);\n        }\n      });\n\n      const suffix = JSON.stringify(collected);\n\n      // If no arguments were passed to this field, and it didn't have any other\n      // field key contributions from directives or variables, hide the empty\n      // :{} suffix from the field key. However, a field passed no arguments can\n      // still end up with a non-empty :{...} suffix if its key configuration\n      // refers to directives or variables.\n      if (args || suffix !== \"{}\") {\n        fieldName += \":\" + suffix;\n      }\n\n      return fieldName;\n    })\n  );\n}\n\nexport function collectSpecifierPaths(\n  specifier: KeySpecifier,\n  extractor: (path: string[]) => any\n): Record<string, any> {\n  // For each path specified by specifier, invoke the extractor, and repeatedly\n  // merge the results together, with appropriate ancestor context.\n  const merger = new DeepMerger();\n  return getSpecifierPaths(specifier).reduce((collected, path) => {\n    let toMerge = extractor(path);\n    if (toMerge !== void 0) {\n      // This path is not expected to contain array indexes, so the toMerge\n      // reconstruction will not contain arrays. TODO Fix this?\n      for (let i = path.length - 1; i >= 0; --i) {\n        toMerge = { [path[i]]: toMerge };\n      }\n      collected = merger.merge(collected, toMerge);\n    }\n    return collected;\n  }, Object.create(null));\n}\n\nexport function getSpecifierPaths(spec: KeySpecifier): string[][] {\n  const info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    const paths: string[][] = (info.paths = []);\n    const currentPath: string[] = [];\n\n    spec.forEach((s, i) => {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach((p) => paths.push(currentPath.concat(p)));\n        currentPath.length = 0;\n      } else {\n        currentPath.push(s);\n        if (!isArray(spec[i + 1])) {\n          paths.push(currentPath.slice(0));\n          currentPath.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths!;\n}\n\nfunction extractKey<TObj extends Record<string, any>, TKey extends string>(\n  object: TObj,\n  key: TKey\n): TObj[TKey] | undefined {\n  return object[key];\n}\n\nexport function extractKeyPath(\n  object: Record<string, any>,\n  path: string[],\n  extract?: typeof extractKey\n): any {\n  // For each key in path, extract the corresponding child property from obj,\n  // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n  // possible). The final result of path.reduce is normalized so unexpected leaf\n  // objects have their keys safely sorted. That final result is difficult to\n  // type as anything other than any. You're welcome to try to improve the\n  // return type, but keep in mind extractKeyPath is not a public function\n  // (exported only for testing), so the effort may not be worthwhile unless the\n  // limited set of actual callers (see above) pass arguments that TypeScript\n  // can statically type. If we know only that path is some array of strings\n  // (and not, say, a specific tuple of statically known strings), any (or\n  // possibly unknown) is the honest answer.\n  extract = extract || extractKey;\n  return normalize(\n    path.reduce(function reducer(obj, key): any {\n      return isArray(obj) ?\n          obj.map((child) => reducer(child, key))\n        : obj && extract!(obj, key);\n    }, object)\n  );\n}\n\nfunction normalize<T>(value: T): T {\n  // Usually the extracted value will be a scalar value, since most primary\n  // key fields are scalar, but just in case we get an object or an array, we\n  // need to do some normalization of the order of (nested) keys.\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize) as any;\n    }\n    return collectSpecifierPaths(Object.keys(value).sort(), (path) =>\n      extractKeyPath(value, path)\n    ) as T;\n  }\n  return value;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}