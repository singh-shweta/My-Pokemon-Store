{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\nexport function useFragment(options) {\n  return wrapHook(\"useFragment\", _useFragment, useApolloClient(options.client))(options);\n}\nfunction _useFragment(options) {\n  var cache = useApolloClient(options.client).cache;\n  var from = options.from,\n    rest = __rest(options, [\"from\"]);\n  // We calculate the cache id seperately from `stableOptions` because we don't\n  // want changes to non key fields in the `from` property to affect\n  // `stableOptions` and retrigger our subscription. If the cache identifier\n  // stays the same between renders, we want to reuse the existing subscription.\n  var id = React.useMemo(function () {\n    return typeof from === \"string\" ? from : cache.identify(from);\n  }, [cache, from]);\n  var stableOptions = useDeepMemo(function () {\n    return __assign(__assign({}, rest), {\n      from: id\n    });\n  }, [rest, id]);\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  var diff = React.useMemo(function () {\n    var fragment = stableOptions.fragment,\n      fragmentName = stableOptions.fragmentName,\n      from = stableOptions.from,\n      _a = stableOptions.optimistic,\n      optimistic = _a === void 0 ? true : _a;\n    return {\n      result: diffToResult(cache.diff(__assign(__assign({}, stableOptions), {\n        returnPartialData: true,\n        id: from,\n        query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n        optimistic: optimistic\n      })))\n    };\n  }, [stableOptions, cache]);\n  // Used for both getSnapshot and getServerSnapshot\n  var getSnapshot = React.useCallback(function () {\n    return diff.result;\n  }, [diff]);\n  return useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    var lastTimeout = 0;\n    var subscription = cache.watchFragment(stableOptions).subscribe({\n      next: function (result) {\n        // Since `next` is called async by zen-observable, we want to avoid\n        // unnecessarily rerendering this hook for the initial result\n        // emitted from watchFragment which should be equal to\n        // `diff.result`.\n        if (equal(result, diff.result)) return;\n        diff.result = result;\n        // If we get another update before we've re-rendered, bail out of\n        // the update and try again. This ensures that the relative timing\n        // between useQuery and useFragment stays roughly the same as\n        // fixed in https://github.com/apollographql/apollo-client/pull/11083\n        clearTimeout(lastTimeout);\n        lastTimeout = setTimeout(forceUpdate);\n      }\n    });\n    return function () {\n      subscription.unsubscribe();\n      clearTimeout(lastTimeout);\n    };\n  }, [cache, stableOptions, diff]), getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n  return result;\n}","map":{"version":3,"sources":["../../../src/react/hooks/useFragment.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"rehackt\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport type {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache/index.js\";\n\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { ApolloClient, OperationVariables } from \"../../core/index.js\";\nimport type { NoInfer } from \"../types/types.js\";\nimport { useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\n\nexport interface UseFragmentOptions<TData, TVars>\n  extends Omit<\n      Cache.DiffOptions<NoInfer<TData>, NoInfer<TVars>>,\n      \"id\" | \"query\" | \"optimistic\" | \"previousResult\" | \"returnPartialData\"\n    >,\n    Omit<\n      Cache.ReadFragmentOptions<TData, TVars>,\n      \"id\" | \"variables\" | \"returnPartialData\"\n    > {\n  from: StoreObject | Reference | string;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n  /**\n   * The instance of `ApolloClient` to use to look up the fragment.\n   *\n   * By default, the instance that's passed down via context is used, but you\n   * can provide a different instance here.\n   *\n   * @docGroup 1. Operation options\n   */\n  client?: ApolloClient<any>;\n}\n\nexport type UseFragmentResult<TData> =\n  | {\n      data: TData;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<TData>;\n      complete: false;\n      missing?: MissingTree;\n    };\n\nexport function useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  return wrapHook(\n    \"useFragment\",\n    _useFragment,\n    useApolloClient(options.client)\n  )(options);\n}\n\nfunction _useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  const { cache } = useApolloClient(options.client);\n  const { from, ...rest } = options;\n\n  // We calculate the cache id seperately from `stableOptions` because we don't\n  // want changes to non key fields in the `from` property to affect\n  // `stableOptions` and retrigger our subscription. If the cache identifier\n  // stays the same between renders, we want to reuse the existing subscription.\n  const id = React.useMemo(\n    () => (typeof from === \"string\" ? from : cache.identify(from)),\n    [cache, from]\n  );\n\n  const stableOptions = useDeepMemo(() => ({ ...rest, from: id! }), [rest, id]);\n\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  const diff = React.useMemo(() => {\n    const { fragment, fragmentName, from, optimistic = true } = stableOptions;\n\n    return {\n      result: diffToResult(\n        cache.diff<TData>({\n          ...stableOptions,\n          returnPartialData: true,\n          id: from,\n          query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n          optimistic,\n        })\n      ),\n    };\n  }, [stableOptions, cache]);\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = React.useCallback(() => diff.result, [diff]);\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        let lastTimeout = 0;\n        const subscription = cache.watchFragment(stableOptions).subscribe({\n          next: (result) => {\n            // Since `next` is called async by zen-observable, we want to avoid\n            // unnecessarily rerendering this hook for the initial result\n            // emitted from watchFragment which should be equal to\n            // `diff.result`.\n            if (equal(result, diff.result)) return;\n            diff.result = result;\n            // If we get another update before we've re-rendered, bail out of\n            // the update and try again. This ensures that the relative timing\n            // between useQuery and useFragment stays roughly the same as\n            // fixed in https://github.com/apollographql/apollo-client/pull/11083\n            clearTimeout(lastTimeout);\n            lastTimeout = setTimeout(forceUpdate) as any;\n          },\n        });\n        return () => {\n          subscription.unsubscribe();\n          clearTimeout(lastTimeout);\n        };\n      },\n      [cache, stableOptions, diff]\n    ),\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>\n): UseFragmentResult<TData> {\n  const result = {\n    data: diff.result!,\n    complete: !!diff.complete,\n  } as UseFragmentResult<TData>;\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map((error) => error.missing));\n  }\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}