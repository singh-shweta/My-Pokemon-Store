{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { isNonNullObject } from \"./objects.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function mergeDeep() {\n  var sources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n  return mergeDeepArray(sources);\n}\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray(sources) {\n  var target = sources[0] || {};\n  var count = sources.length;\n  if (count > 1) {\n    var merger = new DeepMerger();\n    for (var i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\nvar defaultReconciler = function (target, source, property) {\n  return this.merge(target[property], source[property]);\n};\nvar DeepMerger = /** @class */function () {\n  function DeepMerger(reconciler) {\n    if (reconciler === void 0) {\n      reconciler = defaultReconciler;\n    }\n    this.reconciler = reconciler;\n    this.isObject = isNonNullObject;\n    this.pastCopies = new Set();\n  }\n  DeepMerger.prototype.merge = function (target, source) {\n    var _this = this;\n    var context = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n      context[_i - 2] = arguments[_i];\n    }\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach(function (sourceKey) {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          var targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            var result = _this.reconciler.apply(_this, __spreadArray([target, source, sourceKey], context, false));\n            // A well-implemented reconciler may return targetValue to indicate\n            // the merge changed nothing about the structure of the target.\n            if (result !== targetValue) {\n              target = _this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          // If there is no collision, the target can safely share memory with\n          // the source, and the recursion can terminate here.\n          target = _this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n      return target;\n    }\n    // If source (or target) is not an object, let source replace target.\n    return source;\n  };\n  DeepMerger.prototype.shallowCopyForMerge = function (value) {\n    if (isNonNullObject(value)) {\n      if (!this.pastCopies.has(value)) {\n        if (Array.isArray(value)) {\n          value = value.slice(0);\n        } else {\n          value = __assign({\n            __proto__: Object.getPrototypeOf(value)\n          }, value);\n        }\n        this.pastCopies.add(value);\n      }\n    }\n    return value;\n  };\n  return DeepMerger;\n}();\nexport { DeepMerger };","map":{"version":3,"sources":["../../../src/utilities/common/mergeDeep.ts"],"names":[],"mappings":"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","sourcesContent":["import { isNonNullObject } from \"./objects.js\";\n\nconst { hasOwnProperty } = Object.prototype;\n\n// These mergeDeep and mergeDeepArray utilities merge any number of objects\n// together, sharing as much memory as possible with the source objects, while\n// remaining careful to avoid modifying any source objects.\n\n// Logically, the return type of mergeDeep should be the intersection of\n// all the argument types. The binary call signature is by far the most\n// common, but we support 0- through 5-ary as well. After that, the\n// resulting type is just the inferred array element type. Note to nerds:\n// there is a more clever way of doing this that converts the tuple type\n// first to a union type (easy enough: T[number]) and then converts the\n// union to an intersection type using distributive conditional type\n// inference, but that approach has several fatal flaws (boolean becomes\n// true & false, and the inferred type ends up as unknown in many cases),\n// in addition to being nearly impossible to explain/understand.\nexport type TupleToIntersection<T extends any[]> =\n  T extends [infer A] ? A\n  : T extends [infer A, infer B] ? A & B\n  : T extends [infer A, infer B, infer C] ? A & B & C\n  : T extends [infer A, infer B, infer C, infer D] ? A & B & C & D\n  : T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E\n  : T extends (infer U)[] ? U\n  : any;\n\nexport function mergeDeep<T extends any[]>(\n  ...sources: T\n): TupleToIntersection<T> {\n  return mergeDeepArray(sources);\n}\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || ({} as T);\n  const count = sources.length;\n  if (count > 1) {\n    const merger = new DeepMerger();\n    for (let i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\n\nexport type ReconcilerFunction<TContextArgs extends any[]> = (\n  this: DeepMerger<TContextArgs>,\n  target: Record<string | number, any>,\n  source: Record<string | number, any>,\n  property: string | number,\n  ...context: TContextArgs\n) => any;\n\nconst defaultReconciler: ReconcilerFunction<any[]> = function (\n  target,\n  source,\n  property\n) {\n  return this.merge(target[property], source[property]);\n};\n\nexport class DeepMerger<TContextArgs extends any[]> {\n  constructor(\n    private reconciler: ReconcilerFunction<TContextArgs> = defaultReconciler as any as ReconcilerFunction<TContextArgs>\n  ) {}\n\n  public merge(target: any, source: any, ...context: TContextArgs): any {\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach((sourceKey) => {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          const targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            const result = this.reconciler(\n              target,\n              source,\n              sourceKey,\n              ...context\n            );\n            // A well-implemented reconciler may return targetValue to indicate\n            // the merge changed nothing about the structure of the target.\n            if (result !== targetValue) {\n              target = this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          // If there is no collision, the target can safely share memory with\n          // the source, and the recursion can terminate here.\n          target = this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n\n      return target;\n    }\n\n    // If source (or target) is not an object, let source replace target.\n    return source;\n  }\n\n  public isObject = isNonNullObject;\n\n  private pastCopies = new Set<any>();\n\n  public shallowCopyForMerge<T>(value: T): T {\n    if (isNonNullObject(value)) {\n      if (!this.pastCopies.has(value)) {\n        if (Array.isArray(value)) {\n          value = (value as any).slice(0);\n        } else {\n          value = {\n            __proto__: Object.getPrototypeOf(value),\n            ...value,\n          };\n        }\n        this.pastCopies.add(value);\n      }\n    }\n    return value;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}