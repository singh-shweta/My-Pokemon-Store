{"ast":null,"code":"import { isNonEmptyArray } from \"./arrays.js\";\nimport { isExecutionPatchIncrementalResult } from \"./incrementalResult.js\";\nexport function graphQLResultHasError(result) {\n  var errors = getGraphQLErrorsFromResult(result);\n  return isNonEmptyArray(errors);\n}\nexport function getGraphQLErrorsFromResult(result) {\n  var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n  if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n    result.incremental.forEach(function (incrementalResult) {\n      if (incrementalResult.errors) {\n        graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n      }\n    });\n  }\n  return graphQLErrors;\n}","map":{"version":3,"sources":["../../../src/utilities/common/errorHandling.ts"],"names":[],"mappings":"AACA,SAAS,eAAe,QAAQ,aAAa;AAC7C,SAAS,iCAAiC,QAAQ,wBAAwB;AAE1E,OAAM,SAAU,qBAAqB,CAAI,MAAsB,EAAA;EAC7D,IAAM,MAAM,GAAG,0BAA0B,CAAC,MAAM,CAAC;EACjD,OAAO,eAAe,CAAC,MAAM,CAAC;AAChC;AAEA,OAAM,SAAU,0BAA0B,CAAI,MAAsB,EAAA;EAClE,IAAM,aAAa,GACjB,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;EAE9D,IACE,iCAAiC,CAAC,MAAM,CAAC,IACzC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC,EACnC;IACA,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,iBAAiB,EAAA;MAC3C,IAAI,iBAAiB,CAAC,MAAM,EAAE;QAC5B,aAAa,CAAC,IAAI,CAAA,KAAA,CAAlB,aAAa,EAAS,iBAAiB,CAAC,MAAM,CAAA;MAChD;IACF,CAAC,CAAC;EACJ;EACA,OAAO,aAAa;AACtB","sourcesContent":["import type { FetchResult } from \"../../link/core/index.js\";\nimport { isNonEmptyArray } from \"./arrays.js\";\nimport { isExecutionPatchIncrementalResult } from \"./incrementalResult.js\";\n\nexport function graphQLResultHasError<T>(result: FetchResult<T>): boolean {\n  const errors = getGraphQLErrorsFromResult(result);\n  return isNonEmptyArray(errors);\n}\n\nexport function getGraphQLErrorsFromResult<T>(result: FetchResult<T>) {\n  const graphQLErrors =\n    isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n\n  if (\n    isExecutionPatchIncrementalResult(result) &&\n    isNonEmptyArray(result.incremental)\n  ) {\n    result.incremental.forEach((incrementalResult) => {\n      if (incrementalResult.errors) {\n        graphQLErrors.push(...incrementalResult.errors);\n      }\n    });\n  }\n  return graphQLErrors;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}