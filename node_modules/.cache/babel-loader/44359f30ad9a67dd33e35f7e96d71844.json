{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, newInvariantError } from \"../globals/index.js\";\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === \"OperationDefinition\") {\n      throw newInvariantError(74, definition.operation, definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\");\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === \"FragmentDefinition\") {\n      fragments.push(definition);\n    }\n  });\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === \"undefined\") {\n    invariant(fragments.length === 1, 75, fragments.length);\n    actualFragmentName = fragments[0].name.value;\n  }\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArray([{\n      kind: \"OperationDefinition\",\n      // OperationTypeNode is an enum\n      operation: \"query\",\n      selectionSet: {\n        kind: \"SelectionSet\",\n        selections: [{\n          kind: \"FragmentSpread\",\n          name: {\n            kind: \"Name\",\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions, true)\n  });\n  return query;\n}\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n  switch (selection.kind) {\n    case \"InlineFragment\":\n      return selection;\n    case \"FragmentSpread\":\n      {\n        var fragmentName = selection.name.value;\n        if (typeof fragmentMap === \"function\") {\n          return fragmentMap(fragmentName);\n        }\n        var fragment = fragmentMap && fragmentMap[fragmentName];\n        invariant(fragment, 76, fragmentName);\n        return fragment || null;\n      }\n    default:\n      return null;\n  }\n}","map":{"version":3,"sources":["../../../src/utilities/graphql/fragments.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS,EAAE,iBAAiB,QAAQ,qBAAqB;AAYlE;;;;;;;;;;;;;;;;;;;;;AAqBG;AACH,OAAM,SAAU,wBAAwB,CACtC,QAAsB,EACtB,YAAqB,EAAA;EAErB,IAAI,kBAAkB,GAAG,YAAY;EAErC;EACA;EACA;EACA,IAAM,SAAS,GAAkC,EAAE;EACnD,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,UAAU,EAAA;IACtC;IACA;IACA,IAAI,UAAU,CAAC,IAAI,KAAK,qBAAqB,EAAE;MAC7C,MAAM,iBAAiB,CAEnB,EAAA,EAIL,UAAA,CAAA,SAAA,EACD,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAgE,EAAA,GAAA,CAAA,GAAA,EAChE,CAAA;IACA;IACE;IACF;IACC,IAAA,UAAA,CAAA,IAAA,KAAA,oBAAA,EAAA;MAEH,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA;IACA;EACA,CAAA,CAAA;EACE;EAKA;EACF,IAAC,OAAA,kBAAA,KAAA,WAAA,EAAA;IAED,SAAA,CAAA,SAAA,CAAA,MAAA,KAAA,CAAA,EAAA,EAAA,EAAA,SAAA,CAAA,MAAA,CAAA;IACA,kBAAA,GAAyB,SAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,KAAA;EACzB;EAGI;EACE;cACA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA,QAAA,CAA+B,EAAA;IAAA,WAAA,EAAA,aAAA,CAAA,CAC/B;MACA,IAAA,EAAA,qBAAc;MACZ;MACA,SAAA,EAAA,OAAY;MACV,YAAA,EAAA;cACE,cAAM;QACN,UAAA,EAAI,CACF;cACA,EAAA,gBAAO;UACR,IAAA,EAAA;YACF,IAAA,EAAA,MAAA;YACF,KAAA,EAAA;UACF;QACF,CAAA;MAKO;IACb,CAAA,CAaD,EAAA,QAAA,CAAA,WAAA,EAAA,IAAA;EAAA,CAAA,CAAA;EACA,OAAA,KAAA;AACA;AACE;AAEA;AACA,OAAA,SAAU,iBAAS,CAAA,SAAQ,EAAA;MACzB,SAAS,KAAA,KAAS,CAAA,EAAI;IAAC,SAAS,GAAA,EAAA;EAAQ;EAC1C,IAAG,QAAA,GAAA,CAAA,CAAA;EACH,SAAO,CAAA,OAAS,CAAA,UAAA,QAAA,EAAA;IACjB,QAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,QAAA;EAED,CAAA,CAAM;EAIJ,OAAA,QAAQ;AACN;OACE,SAAA,wBAAiB,CAAA,SAAA,EAAA,WAAA,EAAA;EACnB,QAAA,SAAK,CAAA,IAAA;IACH,KAAA,gBAAkB;MAClB,OAAI,SAAO;SACT,gBAAO;MAAA;QACT,IAAC,YAAA,GAAA,SAAA,CAAA,IAAA,CAAA,KAAA;QACD,IAAM,OAAA,WAAW,KAAW,UAAI,EAAA;UAChC,OAAU,WAAU,CAAA,YAAA,CAAA;QACpB;QACD,IAAA,QAAA,GAAA,WAAA,IAAA,WAAA,CAAA,YAAA,CAAA;QACD,SAAA,CAAA,QAAA,EAAA,EAAA,EAAA,YAAA,CAAA;QACE,OAAO,QAAK,IAAA,IAAA;MACf;IACF","sourcesContent":["import { invariant, newInvariantError } from \"../globals/index.js\";\n\nimport type {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionNode,\n} from \"graphql\";\n\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype Kind = any;\ntype OperationTypeNode = any;\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach((definition) => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === \"OperationDefinition\") {\n      throw newInvariantError(\n        `Found a %s operation%s. ` +\n          \"No operations are allowed when using a fragment as a query. Only fragments are allowed.\",\n        definition.operation,\n        definition.name ? ` named '${definition.name.value}'` : \"\"\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === \"FragmentDefinition\") {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === \"undefined\") {\n    invariant(\n      fragments.length === 1,\n      `Found %s fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n      fragments.length\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: \"OperationDefinition\" as Kind,\n        // OperationTypeNode is an enum\n        operation: \"query\" as OperationTypeNode,\n        selectionSet: {\n          kind: \"SelectionSet\" as Kind,\n          selections: [\n            {\n              kind: \"FragmentSpread\" as Kind,\n              name: {\n                kind: \"Name\" as Kind,\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\nexport type FragmentMapFunction = (\n  fragmentName: string\n) => FragmentDefinitionNode | null;\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = []\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach((fragment) => {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\n\nexport function getFragmentFromSelection(\n  selection: SelectionNode,\n  fragmentMap?: FragmentMap | FragmentMapFunction\n): InlineFragmentNode | FragmentDefinitionNode | null {\n  switch (selection.kind) {\n    case \"InlineFragment\":\n      return selection;\n    case \"FragmentSpread\": {\n      const fragmentName = selection.name.value;\n      if (typeof fragmentMap === \"function\") {\n        return fragmentMap(fragmentName);\n      }\n      const fragment = fragmentMap && fragmentMap[fragmentName];\n      invariant(fragment, `No fragment named %s`, fragmentName);\n      return fragment || null;\n    }\n    default:\n      return null;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}