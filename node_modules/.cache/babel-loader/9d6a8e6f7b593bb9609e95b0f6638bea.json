{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, newInvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { execute } from \"../link/core/index.js\";\nimport { hasDirectives, isExecutionPatchIncrementalResult, isExecutionPatchResult, removeDirectivesFromDocument } from \"../utilities/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, DocumentTransform } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { ApolloError, isApolloError, graphQLResultHasProtocolErrors } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nimport { print } from \"../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar IGNORE = Object.create(null);\nimport { Trie } from \"@wry/trie\";\nimport { AutoCleanedWeakCache, cacheSizes } from \"../utilities/index.js\";\nvar QueryManager = /** @class */function () {\n  function QueryManager(options) {\n    var _this = this;\n    this.clientAwareness = {};\n    // All the queries that the QueryManager is currently managing (not\n    // including mutations and subscriptions).\n    this.queries = new Map();\n    // Maps from queryId strings to Promise rejection functions for\n    // currently active queries and fetches.\n    // Use protected instead of private field so\n    // @apollo/experimental-nextjs-app-support can access type info.\n    this.fetchCancelFns = new Map();\n    this.transformCache = new AutoCleanedWeakCache(cacheSizes[\"queryManager.getDocumentInfo\"] || 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */);\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    // Use protected instead of private field so\n    // @apollo/experimental-nextjs-app-support can access type info.\n    this.inFlightLinkObservables = new Trie(false);\n    var defaultDocumentTransform = new DocumentTransform(function (document) {\n      return _this.cache.transformDocument(document);\n    },\n    // Allow the apollo cache to manage its own transform caches\n    {\n      cache: false\n    });\n    this.cache = options.cache;\n    this.link = options.link;\n    this.defaultOptions = options.defaultOptions;\n    this.queryDeduplication = options.queryDeduplication;\n    this.clientAwareness = options.clientAwareness;\n    this.localState = options.localState;\n    this.ssrMode = options.ssrMode;\n    this.assumeImmutableResults = options.assumeImmutableResults;\n    var documentTransform = options.documentTransform;\n    this.documentTransform = documentTransform ? defaultDocumentTransform.concat(documentTransform)\n    // The custom document transform may add new fragment spreads or new\n    // field selections, so we want to give the cache a chance to run\n    // again. For example, the InMemoryCache adds __typename to field\n    // selections and fragments from the fragment registry.\n    .concat(defaultDocumentTransform) : defaultDocumentTransform;\n    this.defaultContext = options.defaultContext || Object.create(null);\n    if (this.onBroadcast = options.onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(newInvariantError(26));\n  };\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n  QueryManager.prototype.mutate = function (_a) {\n    return __awaiter(this, arguments, void 0, function (_b) {\n      var mutationId, hasClientExports, mutationStoreValue, isOptimistic, self;\n      var _c, _d;\n      var mutation = _b.mutation,\n        variables = _b.variables,\n        optimisticResponse = _b.optimisticResponse,\n        updateQueries = _b.updateQueries,\n        _e = _b.refetchQueries,\n        refetchQueries = _e === void 0 ? [] : _e,\n        _f = _b.awaitRefetchQueries,\n        awaitRefetchQueries = _f === void 0 ? false : _f,\n        updateWithProxyFn = _b.update,\n        onQueryUpdated = _b.onQueryUpdated,\n        _g = _b.fetchPolicy,\n        fetchPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.fetchPolicy) || \"network-only\" : _g,\n        _h = _b.errorPolicy,\n        errorPolicy = _h === void 0 ? ((_d = this.defaultOptions.mutate) === null || _d === void 0 ? void 0 : _d.errorPolicy) || \"none\" : _h,\n        keepRootFields = _b.keepRootFields,\n        context = _b.context;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            invariant(mutation, 27);\n            invariant(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 28);\n            mutationId = this.generateMutationId();\n            mutation = this.cache.transformForLink(this.transform(mutation));\n            hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n            variables = this.getVariables(mutation, variables);\n            if (!hasClientExports) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.localState.addExportedVariables(mutation, variables, context)];\n          case 1:\n            variables = _j.sent();\n            _j.label = 2;\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n            isOptimistic = optimisticResponse && this.markMutationOptimistic(optimisticResponse, {\n              mutationId: mutationId,\n              document: mutation,\n              variables: variables,\n              fetchPolicy: fetchPolicy,\n              errorPolicy: errorPolicy,\n              context: context,\n              updateQueries: updateQueries,\n              update: updateWithProxyFn,\n              keepRootFields: keepRootFields\n            });\n            this.broadcastQueries();\n            self = this;\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: isOptimistic ? optimisticResponse : void 0\n              }), variables, {}, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === \"none\") {\n                  throw new ApolloError({\n                    graphQLErrors: getGraphQLErrorsFromResult(result)\n                  });\n                }\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n                var storeResult = __assign({}, result);\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n                if (errorPolicy === \"ignore\" && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: isOptimistic ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function (storeResult) {\n                  self.broadcastQueries();\n                  // Since mutations might receive multiple payloads from the\n                  // ApolloLink chain (e.g. when used with @defer),\n                  // we resolve with a SingleExecutionResult or after the final\n                  // ExecutionPatchResult has arrived and we have assembled the\n                  // multipart response into a single result.\n                  if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                    resolve(storeResult);\n                  }\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n                  if (isOptimistic) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: \"ROOT_MUTATION\",\n          query: mutation.document,\n          variables: mutation.variables\n        });\n      }\n      if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n        var diff = cache.diff({\n          id: \"ROOT_MUTATION\",\n          // The cache complains if passed a mutation where it expects a\n          // query, so we transform mutations and subscriptions to queries\n          // (only once, thanks to this.transformCache).\n          query: this.getDocumentInfo(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true\n        });\n        var mergedData = void 0;\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n        if (typeof mergedData !== \"undefined\") {\n          // cast the ExecutionPatchResult to FetchResult here since\n          // ExecutionPatchResult never has `data` when returned from the server\n          result.data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: \"ROOT_MUTATION\",\n            query: mutation.document,\n            variables: mutation.variables\n          });\n        }\n      }\n      var updateQueries_1 = mutation.updateQueries;\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n          var updater = updateQueries_1[queryName];\n          var _b = _this.queries.get(queryId),\n            document = _b.document,\n            variables = _b.variables;\n          // Read the current query result from the store.\n          var _c = cache.diff({\n              query: document,\n              variables: variables,\n              returnPartialData: true,\n              optimistic: false\n            }),\n            currentQueryResult = _c.result,\n            complete = _c.complete;\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: \"ROOT_QUERY\",\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n    if (cacheWrites.length > 0 || (mutation.refetchQueries || \"\").length > 0 || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function (cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          var update = mutation.update;\n          // Determine whether result is a SingleExecutionResult,\n          // or the final ExecutionPatchResult.\n          var isFinalResult = !isExecutionPatchResult(result) || isExecutionPatchIncrementalResult(result) && !result.hasNext;\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: _this.getDocumentInfo(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n              if (diff.complete) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n                if (\"incremental\" in result) {\n                  delete result.incremental;\n                }\n                if (\"hasNext\" in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n            // If we've received the whole response,\n            // either a SingleExecutionResult or the final ExecutionPatchResult,\n            // call the update function.\n            if (isFinalResult) {\n              update(cache, result, {\n                context: mutation.context,\n                variables: mutation.variables\n              });\n            }\n          }\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: \"ROOT_MUTATION\",\n              fields: function (value, _a) {\n                var fieldName = _a.fieldName,\n                  DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n    return Promise.resolve(result);\n  };\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables, {\n      IGNORE: IGNORE\n    }) : optimisticResponse;\n    if (data === IGNORE) {\n      return false;\n    }\n    this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        globalThis.__DEV__ !== false && invariant.error(error);\n      }\n    }, mutation.mutationId);\n    return true;\n  };\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchConcastWithInfo(queryId, options, networkStatus).concast.promise;\n  };\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n  QueryManager.prototype.transform = function (document) {\n    return this.documentTransform.transformDocument(document);\n  };\n  QueryManager.prototype.getDocumentInfo = function (document) {\n    var transformCache = this.transformCache;\n    if (!transformCache.has(document)) {\n      var cacheEntry = {\n        // TODO These three calls (hasClientExports, shouldForceResolvers, and\n        // usesNonreactiveDirective) are performing independent full traversals\n        // of the transformed document. We should consider merging these\n        // traversals into a single pass in the future, though the work is\n        // cached after the first time.\n        hasClientExports: hasClientExports(document),\n        hasForcedResolvers: this.localState.shouldForceResolvers(document),\n        hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n        clientQuery: this.localState.clientQuery(document),\n        serverQuery: removeDirectivesFromDocument([{\n          name: \"client\",\n          remove: true\n        }, {\n          name: \"connection\"\n        }, {\n          name: \"nonreactive\"\n        }], document),\n        defaultVars: getDefaultValues(getOperationDefinition(document)),\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: __assign(__assign({}, document), {\n          definitions: document.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n            return def;\n          })\n        })\n      };\n      transformCache.set(document, cacheEntry);\n    }\n    return transformCache.get(document);\n  };\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.getDocumentInfo(document).defaultVars), variables);\n  };\n  QueryManager.prototype.watchQuery = function (options) {\n    var query = this.transform(options.query);\n    // assign variable default values if supplied\n    // NOTE: We don't modify options.query here with the transformed query to\n    // ensure observable.options.query is set to the raw untransformed query.\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(query, options.variables)\n    });\n    if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n      options.notifyOnNetworkStatusChange = false;\n    }\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    observable[\"lastQuery\"] = query;\n    this.queries.set(observable.queryId, queryInfo);\n    // We give queryInfo the transformed query to ensure the first cache diff\n    // uses the transformed query instead of the raw query\n    queryInfo.init({\n      document: query,\n      observableQuery: observable,\n      variables: observable.variables\n    });\n    return observable;\n  };\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n    invariant(options.query, 29);\n    invariant(options.query.kind === \"Document\", 30);\n    invariant(!options.returnPartialData, 31);\n    invariant(!options.pollInterval, 32);\n    return this.fetchQuery(queryId, __assign(__assign({}, options), {\n      query: this.transform(options.query)\n    })).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(newInvariantError(33));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n    // begin removing data from the store\n    return this.cache.reset(options);\n  };\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n    if (include === void 0) {\n      include = \"active\";\n    }\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc), false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n        document = _a.document;\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n        var queryName = oq.queryName,\n          fetchPolicy = oq.options.fetchPolicy;\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n    if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          globalThis.__DEV__ !== false && invariant.warn(typeof nameOrDoc === \"string\" ? 34 : 35, nameOrDoc);\n        }\n      });\n    }\n    return queries;\n  };\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n    var query = _a.query,\n      fetchPolicy = _a.fetchPolicy,\n      _b = _a.errorPolicy,\n      errorPolicy = _b === void 0 ? \"none\" : _b,\n      variables = _a.variables,\n      _c = _a.context,\n      context = _c === void 0 ? {} : _c,\n      _d = _a.extensions,\n      extensions = _d === void 0 ? {} : _d;\n    query = this.transform(query);\n    variables = this.getVariables(query, variables);\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables, extensions).map(function (result) {\n        if (fetchPolicy !== \"no-cache\") {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: \"ROOT_SUBSCRIPTION\",\n              variables: variables\n            });\n          }\n          _this.broadcastQueries();\n        }\n        var hasErrors = graphQLResultHasError(result);\n        var hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n        if (hasErrors || hasProtocolErrors) {\n          var errors = {};\n          if (hasErrors) {\n            errors.graphQLErrors = result.errors;\n          }\n          if (hasProtocolErrors) {\n            errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n          }\n          // `errorPolicy` is a mechanism for handling GraphQL errors, according\n          // to our documentation, so we throw protocol errors regardless of the\n          // set error policy.\n          if (errorPolicy === \"none\" || hasProtocolErrors) {\n            throw new ApolloError(errors);\n          }\n        }\n        if (errorPolicy === \"ignore\") {\n          delete result.errors;\n        }\n        return result;\n      });\n    };\n    if (this.getDocumentInfo(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n    return makeObservable(variables);\n  };\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n  QueryManager.prototype.removeQuery = function (queryId) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  };\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, extensions,\n  // Prefer context.queryDeduplication if specified.\n  deduplication) {\n    var _this = this;\n    var _a;\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n    var observable;\n    var _b = this.getDocumentInfo(query),\n      serverQuery = _b.serverQuery,\n      clientQuery = _b.clientQuery;\n    if (serverQuery) {\n      var _c = this,\n        inFlightLinkObservables_1 = _c.inFlightLinkObservables,\n        link = _c.link;\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        })),\n        extensions: extensions\n      };\n      context = operation.context;\n      if (deduplication) {\n        var printedServerQuery_1 = print(serverQuery);\n        var varJson_1 = canonicalStringify(variables);\n        var entry = inFlightLinkObservables_1.lookup(printedServerQuery_1, varJson_1);\n        observable = entry.observable;\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          observable = entry.observable = concast;\n          concast.beforeNext(function () {\n            inFlightLinkObservables_1.remove(printedServerQuery_1, varJson_1);\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n    return observable;\n  };\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    // Performing transformForLink here gives this.cache a chance to fill in\n    // missing fragment definitions (for example) before sending this document\n    // through the link chain.\n    var linkDocument = this.cache.transformForLink(options.query);\n    return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n      var graphQLErrors = getGraphQLErrorsFromResult(result);\n      var hasErrors = graphQLErrors.length > 0;\n      var errorPolicy = options.errorPolicy;\n      // If we interrupted this request by calling getResultsFromLink again\n      // with the same QueryInfo object, we ignore the old results.\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && errorPolicy === \"none\") {\n          // Throwing here effectively calls observer.error.\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: graphQLErrors\n          }));\n        }\n        // Use linkDocument rather than queryInfo.document so the\n        // operation/fragments used to write the result are the same as the\n        // ones used to obtain it from the link.\n        queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: NetworkStatus.ready\n      };\n      // In the case we start multiple network requests simulatenously, we\n      // want to ensure we properly set `data` if we're reporting on an old\n      // result which will not be caught by the conditional above that ends up\n      // throwing the markError result.\n      if (hasErrors && errorPolicy === \"none\") {\n        aqr.data = void 0;\n      }\n      if (hasErrors && errorPolicy !== \"ignore\") {\n        aqr.errors = graphQLErrors;\n        aqr.networkStatus = NetworkStatus.error;\n      }\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n      // Avoid storing errors from older interrupted queries.\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n      throw error;\n    });\n  };\n  QueryManager.prototype.fetchConcastWithInfo = function (queryId, options,\n  // The initial networkStatus for this fetch, most often\n  // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n  // or setVariables.\n  networkStatus, query) {\n    var _this = this;\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n    if (query === void 0) {\n      query = options.query;\n    }\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var defaults = this.defaultOptions.watchQuery;\n    var _a = options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a,\n      _b = options.errorPolicy,\n      errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b,\n      _c = options.returnPartialData,\n      returnPartialData = _c === void 0 ? false : _c,\n      _d = options.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n      _e = options.context,\n      context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n    var fromVariables = function (variables) {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n      var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n      if (\n      // If we're in standby, postpone advancing options.fetchPolicy using\n      // applyNextFetchPolicy.\n      normalized.fetchPolicy !== \"standby\" &&\n      // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n      // this is another way to detect when nothing was done/fetched.\n      sourcesWithInfo.sources.length > 0 && queryInfo.observableQuery) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n      return sourcesWithInfo;\n    };\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    var cleanupCancelFn = function () {\n      return _this.fetchCancelFns.delete(queryId);\n    };\n    this.fetchCancelFns.set(queryId, function (reason) {\n      cleanupCancelFn();\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast, containsDataFromLink;\n    // If the query has @export(as: ...) directives, then we need to\n    // process those directives asynchronously. When there are no\n    // @export directives (the common case), we deliberately avoid\n    // wrapping the result of this.fetchQueryByPolicy in a Promise,\n    // since the timing of result delivery is (unfortunately) important\n    // for backwards compatibility. TODO This code could be simpler if\n    // we deprecated and removed LocalState.\n    if (this.getDocumentInfo(normalized.query).hasClientExports) {\n      concast = new Concast(this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables).then(function (sourcesWithInfo) {\n        return sourcesWithInfo.sources;\n      }));\n      // there is just no way we can synchronously get the *right* value here,\n      // so we will assume `true`, which is the behaviour before the bug fix in\n      // #10597. This means that bug is not fixed in that case, and is probably\n      // un-fixable with reasonable effort for the edge case of @export as\n      // directives.\n      containsDataFromLink = true;\n    } else {\n      var sourcesWithInfo = fromVariables(normalized.variables);\n      containsDataFromLink = sourcesWithInfo.fromLink;\n      concast = new Concast(sourcesWithInfo.sources);\n    }\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n    return {\n      concast: concast,\n      fromLink: containsDataFromLink\n    };\n  };\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n    var updateCache = _a.updateCache,\n      include = _a.include,\n      _b = _a.optimistic,\n      optimistic = _b === void 0 ? false : _b,\n      _c = _a.removeOptimistic,\n      removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n      onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n    var results = new Map();\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: optimistic && removeOptimistic || false,\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function (watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(oq, result);\n              }\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n          lastDiff = _a.lastDiff,\n          diff = _a.diff;\n        var result;\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n        if (result !== false) {\n          results.set(oq, result);\n        }\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n    return results;\n  };\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a,\n  // The initial networkStatus for this fetch, most often\n  // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n  // or setVariables.\n  networkStatus) {\n    var _this = this;\n    var query = _a.query,\n      variables = _a.variables,\n      fetchPolicy = _a.fetchPolicy,\n      refetchWritePolicy = _a.refetchWritePolicy,\n      errorPolicy = _a.errorPolicy,\n      returnPartialData = _a.returnPartialData,\n      context = _a.context,\n      notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: query,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n    var readCache = function () {\n      return queryInfo.getDiff();\n    };\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n      var data = diff.result;\n      if (globalThis.__DEV__ !== false && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n      if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n      // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n      // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n      // data was incorrectly returned from the cache on refetch:\n      // if diff.missing exists, we should not return cache data.\n      if (errorPolicy === \"none\" && networkStatus === NetworkStatus.refetch && Array.isArray(diff.missing)) {\n        return fromData(void 0);\n      }\n      return fromData(data);\n    };\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */\n    // Watched queries must opt into overwriting existing data on refetch,\n    // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n    : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 /* CacheWriteBehavior.OVERWRITE */ : 2 /* CacheWriteBehavior.MERGE */;\n    var resultsFromLink = function () {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        query: query,\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n          if (diff.complete) {\n            return {\n              fromLink: false,\n              sources: [resultsFromCache(diff, queryInfo.markReady())]\n            };\n          }\n          if (returnPartialData || shouldNotify) {\n            return {\n              fromLink: true,\n              sources: [resultsFromCache(diff), resultsFromLink()]\n            };\n          }\n          return {\n            fromLink: true,\n            sources: [resultsFromLink()]\n          };\n        }\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return {\n              fromLink: true,\n              sources: [resultsFromCache(diff), resultsFromLink()]\n            };\n          }\n          return {\n            fromLink: true,\n            sources: [resultsFromLink()]\n          };\n        }\n      case \"cache-only\":\n        return {\n          fromLink: false,\n          sources: [resultsFromCache(readCache(), queryInfo.markReady())]\n        };\n      case \"network-only\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(readCache()), resultsFromLink()]\n          };\n        }\n        return {\n          fromLink: true,\n          sources: [resultsFromLink()]\n        };\n      case \"no-cache\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            // Note that queryInfo.getDiff() for no-cache queries does not call\n            // cache.diff, but instead returns a { complete: false } stub result\n            // when there is no queryInfo.diff already defined.\n            sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()]\n          };\n        }\n        return {\n          fromLink: true,\n          sources: [resultsFromLink()]\n        };\n      case \"standby\":\n        return {\n          fromLink: false,\n          sources: []\n        };\n    }\n  };\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId);\n  };\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign(__assign({}, this.defaultContext), newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n  return QueryManager;\n}();\nexport { QueryManager };","map":{"version":3,"sources":["../../src/core/QueryManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant, newInvariantError } from \"../utilities/globals/index.js\";\n\nimport type { DocumentNode } from \"graphql\";\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype OperationTypeNode = any;\nimport { equal } from \"@wry/equality\";\n\nimport type { ApolloLink, FetchResult } from \"../link/core/index.js\";\nimport { execute } from \"../link/core/index.js\";\nimport {\n  defaultCacheSizes,\n  hasDirectives,\n  isExecutionPatchIncrementalResult,\n  isExecutionPatchResult,\n  removeDirectivesFromDocument,\n} from \"../utilities/index.js\";\nimport type { Cache, ApolloCache } from \"../cache/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\n\nimport type {\n  ObservableSubscription,\n  ConcastSourcesArray,\n} from \"../utilities/index.js\";\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  getGraphQLErrorsFromResult,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  makeUniqueId,\n  isDocumentNode,\n  isNonNullObject,\n  DocumentTransform,\n} from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport {\n  ApolloError,\n  isApolloError,\n  graphQLResultHasProtocolErrors,\n} from \"../errors/index.js\";\nimport type {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ErrorPolicy,\n  MutationFetchPolicy,\n} from \"./watchQueryOptions.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport type {\n  ApolloQueryResult,\n  OperationVariables,\n  MutationUpdaterFunction,\n  OnQueryUpdated,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueriesMap,\n  DefaultContext,\n} from \"./types.js\";\nimport type { LocalState } from \"./LocalState.js\";\n\nimport type { QueryStoreValue } from \"./QueryInfo.js\";\nimport {\n  QueryInfo,\n  shouldWriteResult,\n  CacheWriteBehavior,\n} from \"./QueryInfo.js\";\nimport type { ApolloErrorOptions } from \"../errors/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nimport { print } from \"../utilities/index.js\";\nimport type { IgnoreModifier } from \"../cache/core/types/common.js\";\nimport type { TODO } from \"../utilities/types/TODO.js\";\n\nconst { hasOwnProperty } = Object.prototype;\n\nconst IGNORE: IgnoreModifier = Object.create(null);\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype UpdateQueries<TData> = MutationOptions<TData, any, any>[\"updateQueries\"];\n\ninterface TransformCacheEntry {\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  hasNonreactiveDirective: boolean;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n}\n\nimport type { DefaultOptions } from \"./ApolloClient.js\";\nimport { Trie } from \"@wry/trie\";\nimport { AutoCleanedWeakCache, cacheSizes } from \"../utilities/index.js\";\n\nexport interface QueryManagerOptions<TStore> {\n  cache: ApolloCache<TStore>;\n  link: ApolloLink;\n  defaultOptions: DefaultOptions;\n  documentTransform: DocumentTransform | null | undefined;\n  queryDeduplication: boolean;\n  onBroadcast: undefined | (() => void);\n  ssrMode: boolean;\n  clientAwareness: Record<string, string>;\n  localState: LocalState<TStore>;\n  assumeImmutableResults: boolean;\n  defaultContext: Partial<DefaultContext> | undefined;\n}\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public defaultOptions: DefaultOptions;\n\n  public readonly assumeImmutableResults: boolean;\n  public readonly documentTransform: DocumentTransform;\n  public readonly ssrMode: boolean;\n  public readonly defaultContext: Partial<DefaultContext>;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  // Use protected instead of private field so\n  // @apollo/experimental-nextjs-app-support can access type info.\n  protected fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor(options: QueryManagerOptions<TStore>) {\n    const defaultDocumentTransform = new DocumentTransform(\n      (document) => this.cache.transformDocument(document),\n      // Allow the apollo cache to manage its own transform caches\n      { cache: false }\n    );\n\n    this.cache = options.cache;\n    this.link = options.link;\n    this.defaultOptions = options.defaultOptions;\n    this.queryDeduplication = options.queryDeduplication;\n    this.clientAwareness = options.clientAwareness;\n    this.localState = options.localState;\n    this.ssrMode = options.ssrMode;\n    this.assumeImmutableResults = options.assumeImmutableResults;\n    const documentTransform = options.documentTransform;\n    this.documentTransform =\n      documentTransform ?\n        defaultDocumentTransform\n          .concat(documentTransform)\n          // The custom document transform may add new fragment spreads or new\n          // field selections, so we want to give the cache a chance to run\n          // again. For example, the InMemoryCache adds __typename to field\n          // selections and fragments from the fragment registry.\n          .concat(defaultDocumentTransform)\n      : defaultDocumentTransform;\n    this.defaultContext = options.defaultContext || Object.create(null);\n\n    if ((this.onBroadcast = options.onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      newInvariantError(\"QueryManager stopped while query was in flight\")\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach((cancel) => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables extends OperationVariables,\n    TContext extends Record<string, any>,\n    TCache extends ApolloCache<any>,\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    fetchPolicy = this.defaultOptions.mutate?.fetchPolicy || \"network-only\",\n    errorPolicy = this.defaultOptions.mutate?.errorPolicy || \"none\",\n    keepRootFields,\n    context,\n  }: MutationOptions<TData, TVariables, TContext>): Promise<\n    FetchResult<TData>\n  > {\n    invariant(\n      mutation,\n      \"mutation option is required. You must specify your GraphQL document in the mutation option.\"\n    );\n\n    invariant(\n      fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\",\n      \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\"\n    );\n\n    const mutationId = this.generateMutationId();\n\n    mutation = this.cache.transformForLink(this.transform(mutation));\n    const { hasClientExports } = this.getDocumentInfo(mutation);\n\n    variables = this.getVariables(mutation, variables) as TVariables;\n    if (hasClientExports) {\n      variables = (await this.localState.addExportedVariables(\n        mutation,\n        variables,\n        context\n      )) as TVariables;\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    const isOptimistic =\n      optimisticResponse &&\n      this.markMutationOptimistic<TData, TVariables, TContext, TCache>(\n        optimisticResponse,\n        {\n          mutationId,\n          document: mutation,\n          variables,\n          fetchPolicy,\n          errorPolicy,\n          context,\n          updateQueries,\n          update: updateWithProxyFn,\n          keepRootFields,\n        }\n      );\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      return asyncMap(\n        self.getObservableFromLink(\n          mutation,\n          {\n            ...context,\n            optimisticResponse: isOptimistic ? optimisticResponse : void 0,\n          },\n          variables,\n          {},\n          false\n        ),\n\n        (result: FetchResult<TData>) => {\n          if (graphQLResultHasError(result) && errorPolicy === \"none\") {\n            throw new ApolloError({\n              graphQLErrors: getGraphQLErrorsFromResult(result),\n            });\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          const storeResult: typeof result = { ...result };\n\n          if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (errorPolicy === \"ignore\" && graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          return self.markMutationResult<TData, TVariables, TContext, TCache>({\n            mutationId,\n            result: storeResult,\n            document: mutation,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            context,\n            update: updateWithProxyFn,\n            updateQueries,\n            awaitRefetchQueries,\n            refetchQueries,\n            removeOptimistic: isOptimistic ? mutationId : void 0,\n            onQueryUpdated,\n            keepRootFields,\n          });\n        }\n      ).subscribe({\n        next(storeResult) {\n          self.broadcastQueries();\n\n          // Since mutations might receive multiple payloads from the\n          // ApolloLink chain (e.g. when used with @defer),\n          // we resolve with a SingleExecutionResult or after the final\n          // ExecutionPatchResult has arrived and we have assembled the\n          // multipart response into a single result.\n          if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n            resolve(storeResult);\n          }\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n\n          if (isOptimistic) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          reject(\n            err instanceof ApolloError ? err : (\n              new ApolloError({\n                networkError: err,\n              })\n            )\n          );\n        },\n      });\n    });\n  }\n\n  public markMutationResult<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>,\n  >(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?: InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache\n  ): Promise<FetchResult<TData>> {\n    let { result } = mutation;\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: \"ROOT_MUTATION\",\n          query: mutation.document,\n          variables: mutation.variables,\n        });\n      }\n      if (\n        isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)\n      ) {\n        const diff = cache.diff<TData>({\n          id: \"ROOT_MUTATION\",\n          // The cache complains if passed a mutation where it expects a\n          // query, so we transform mutations and subscriptions to queries\n          // (only once, thanks to this.transformCache).\n          query: this.getDocumentInfo(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true,\n        });\n        let mergedData;\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n        if (typeof mergedData !== \"undefined\") {\n          // cast the ExecutionPatchResult to FetchResult here since\n          // ExecutionPatchResult never has `data` when returned from the server\n          (result as FetchResult).data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: \"ROOT_MUTATION\",\n            query: mutation.document,\n            variables: mutation.variables,\n          });\n        }\n      }\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: (document && getOperationName(document)) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: \"ROOT_QUERY\",\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      (mutation.refetchQueries || \"\").length > 0 ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.refetchQueries({\n        updateCache: (cache) => {\n          if (!skipCache) {\n            cacheWrites.forEach((write) => cache.write(write));\n          }\n\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          const { update } = mutation;\n          // Determine whether result is a SingleExecutionResult,\n          // or the final ExecutionPatchResult.\n          const isFinalResult =\n            !isExecutionPatchResult(result) ||\n            (isExecutionPatchIncrementalResult(result) && !result.hasNext);\n\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              const diff = cache.diff<TData>({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: this.getDocumentInfo(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true,\n              });\n\n              if (diff.complete) {\n                result = { ...(result as FetchResult), data: diff.result };\n                if (\"incremental\" in result) {\n                  delete result.incremental;\n                }\n                if (\"hasNext\" in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n\n            // If we've received the whole response,\n            // either a SingleExecutionResult or the final ExecutionPatchResult,\n            // call the update function.\n            if (isFinalResult) {\n              update(cache as TCache, result, {\n                context: mutation.context,\n                variables: mutation.variables,\n              });\n            }\n          }\n\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: \"ROOT_MUTATION\",\n              fields(value, { fieldName, DELETE }) {\n                return fieldName === \"__typename\" ? value : DELETE;\n              },\n            });\n          }\n        },\n\n        include: mutation.refetchQueries,\n\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null,\n      }).forEach((result) => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>,\n  >(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      keepRootFields?: boolean;\n    }\n  ) {\n    const data =\n      typeof optimisticResponse === \"function\" ?\n        optimisticResponse(mutation.variables, { IGNORE })\n      : optimisticResponse;\n\n    if (data === IGNORE) {\n      return false;\n    }\n\n    this.cache.recordOptimisticTransaction((cache) => {\n      try {\n        this.markMutationResult<TData, TVariables, TContext, TCache>(\n          {\n            ...mutation,\n            result: { data },\n          },\n          cache\n        );\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n\n    return true;\n  }\n\n  public fetchQuery<TData, TVars extends OperationVariables>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchConcastWithInfo(queryId, options, networkStatus).concast\n      .promise as TODO;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  public transform(document: DocumentNode) {\n    return this.documentTransform.transformDocument(document);\n  }\n\n  private transformCache = new AutoCleanedWeakCache<\n    DocumentNode,\n    TransformCacheEntry\n  >(\n    cacheSizes[\"queryManager.getDocumentInfo\"] ||\n      defaultCacheSizes[\"queryManager.getDocumentInfo\"]\n  );\n\n  public getDocumentInfo(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const cacheEntry: TransformCacheEntry = {\n        // TODO These three calls (hasClientExports, shouldForceResolvers, and\n        // usesNonreactiveDirective) are performing independent full traversals\n        // of the transformed document. We should consider merging these\n        // traversals into a single pass in the future, though the work is\n        // cached after the first time.\n        hasClientExports: hasClientExports(document),\n        hasForcedResolvers: this.localState.shouldForceResolvers(document),\n        hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n        clientQuery: this.localState.clientQuery(document),\n        serverQuery: removeDirectivesFromDocument(\n          [\n            { name: \"client\", remove: true },\n            { name: \"connection\" },\n            { name: \"nonreactive\" },\n          ],\n          document\n        ),\n        defaultVars: getDefaultValues(\n          getOperationDefinition(document)\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...document,\n          definitions: document.definitions.map((def) => {\n            if (\n              def.kind === \"OperationDefinition\" &&\n              def.operation !== \"query\"\n            ) {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        },\n      };\n\n      transformCache.set(document, cacheEntry);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables<TVariables>(\n    document: DocumentNode,\n    variables?: TVariables\n  ): OperationVariables {\n    return {\n      ...this.getDocumentInfo(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<\n    T,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: WatchQueryOptions<TVariables, T>): ObservableQuery<T, TVariables> {\n    const query = this.transform(options.query);\n\n    // assign variable default values if supplied\n    // NOTE: We don't modify options.query here with the transformed query to\n    // ensure observable.options.query is set to the raw untransformed query.\n    options = {\n      ...options,\n      variables: this.getVariables(query, options.variables) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n    observable[\"lastQuery\"] = query;\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    // We give queryInfo the transformed query to ensure the first cache diff\n    // uses the transformed query instead of the raw query\n    queryInfo.init({\n      document: query,\n      observableQuery: observable,\n      variables: observable.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars extends OperationVariables = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n    queryId = this.generateQueryId()\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      \"query option is required. You must specify your GraphQL document \" +\n        \"in the query option.\"\n    );\n\n    invariant(\n      options.query.kind === \"Document\",\n      'You must wrap the query string in a \"gql\" tag.'\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      \"returnPartialData option only supported on watchQuery.\"\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      \"pollInterval option only supported on watchQuery.\"\n    );\n\n    return this.fetchQuery<TData, TVars>(queryId, {\n      ...options,\n      query: this.transform(options.query),\n    }).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(\n    options: Cache.ResetOptions = {\n      discardWatches: true,\n    }\n  ): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(\n      newInvariantError(\n        \"Store reset while query was in flight (not completed in link chain)\"\n      )\n    );\n\n    this.queries.forEach((queryInfo) => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\"\n  ) {\n    const queries = new Map<string, ObservableQuery<any>>();\n    const queryNamesAndDocs = new Map<string | DocumentNode, boolean>();\n    const legacyQueryOptions = new Set<QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach((desc) => {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(this.transform(desc), false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(({ observableQuery: oq, document }, queryId) => {\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        const {\n          queryName,\n          options: { fetchPolicy },\n        } = oq;\n\n        if (\n          fetchPolicy === \"standby\" ||\n          (include === \"active\" && !oq.hasObservers())\n        ) {\n          return;\n        }\n\n        if (\n          include === \"active\" ||\n          (queryName && queryNamesAndDocs.has(queryName)) ||\n          (document && queryNamesAndDocs.has(document))\n        ) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options: QueryOptions) => {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        const queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        const queryInfo = this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables,\n        });\n        const oq = new ObservableQuery({\n          queryManager: this,\n          queryInfo,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach((included, nameOrDoc) => {\n        if (!included) {\n          invariant.warn(\n            typeof nameOrDoc === \"string\" ?\n              `Unknown query named \"%s\" requested in refetchQueries options.include array`\n            : `Unknown query %o requested in refetchQueries options.include array`,\n            nameOrDoc\n          );\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(\n      (observableQuery, queryId) => {\n        const { fetchPolicy } = observableQuery.options;\n        observableQuery.resetLastResults();\n        if (\n          includeStandby ||\n          (fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\")\n        ) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n        this.getQuery(queryId).setDiff(null);\n      }\n    );\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy = \"none\",\n    variables,\n    context = {},\n    extensions = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query);\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(query, context, variables, extensions).map(\n        (result) => {\n          if (fetchPolicy !== \"no-cache\") {\n            // the subscription interface should handle not sending us results we no longer subscribe to.\n            // XXX I don't think we ever send in an object with errors, but we might in the future...\n            if (shouldWriteResult(result, errorPolicy)) {\n              this.cache.write({\n                query,\n                result: result.data,\n                dataId: \"ROOT_SUBSCRIPTION\",\n                variables: variables,\n              });\n            }\n\n            this.broadcastQueries();\n          }\n\n          const hasErrors = graphQLResultHasError(result);\n          const hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n          if (hasErrors || hasProtocolErrors) {\n            const errors: ApolloErrorOptions = {};\n            if (hasErrors) {\n              errors.graphQLErrors = result.errors;\n            }\n            if (hasProtocolErrors) {\n              errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n            }\n\n            // `errorPolicy` is a mechanism for handling GraphQL errors, according\n            // to our documentation, so we throw protocol errors regardless of the\n            // set error policy.\n            if (errorPolicy === \"none\" || hasProtocolErrors) {\n              throw new ApolloError(errors);\n            }\n          }\n\n          if (errorPolicy === \"ignore\") {\n            delete result.errors;\n          }\n\n          return result;\n        }\n      );\n\n    if (this.getDocumentInfo(query).hasClientExports) {\n      const observablePromise = this.localState\n        .addExportedVariables(query, variables, context)\n        .then(makeObservable);\n\n      return new Observable<FetchResult<T>>((observer) => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          (observable) => (sub = observable.subscribe(observer)),\n          observer.error\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach((info) => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  // Use protected instead of private field so\n  // @apollo/experimental-nextjs-app-support can access type info.\n  protected inFlightLinkObservables = new Trie<{\n    observable?: Observable<FetchResult<any>>;\n  }>(false);\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    extensions?: Record<string, any>,\n    // Prefer context.queryDeduplication if specified.\n    deduplication: boolean = context?.queryDeduplication ??\n      this.queryDeduplication\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>> | undefined;\n\n    const { serverQuery, clientQuery } = this.getDocumentInfo(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication,\n        }),\n        extensions,\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const printedServerQuery = print(serverQuery);\n        const varJson = canonicalStringify(variables);\n\n        const entry = inFlightLinkObservables.lookup(\n          printedServerQuery,\n          varJson\n        );\n\n        observable = entry.observable;\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>,\n          ]);\n          observable = entry.observable = concast;\n\n          concast.beforeNext(() => {\n            inFlightLinkObservables.remove(printedServerQuery, varJson);\n          });\n        }\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>,\n        ]);\n      }\n    } else {\n      observable = new Concast([Observable.of({ data: {} } as FetchResult<T>)]);\n      context = this.prepareContext(context);\n    }\n\n    if (clientQuery) {\n      observable = asyncMap(observable, (result) => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars extends OperationVariables>(\n    queryInfo: QueryInfo,\n    cacheWriteBehavior: CacheWriteBehavior,\n    options: Pick<\n      WatchQueryOptions<TVars, TData>,\n      \"query\" | \"variables\" | \"context\" | \"fetchPolicy\" | \"errorPolicy\"\n    >\n  ): Observable<ApolloQueryResult<TData>> {\n    const requestId = (queryInfo.lastRequestId = this.generateRequestId());\n\n    // Performing transformForLink here gives this.cache a chance to fill in\n    // missing fragment definitions (for example) before sending this document\n    // through the link chain.\n    const linkDocument = this.cache.transformForLink(options.query);\n\n    return asyncMap(\n      this.getObservableFromLink(\n        linkDocument,\n        options.context,\n        options.variables\n      ),\n\n      (result) => {\n        const graphQLErrors = getGraphQLErrorsFromResult(result);\n        const hasErrors = graphQLErrors.length > 0;\n        const { errorPolicy } = options;\n\n        // If we interrupted this request by calling getResultsFromLink again\n        // with the same QueryInfo object, we ignore the old results.\n        if (requestId >= queryInfo.lastRequestId) {\n          if (hasErrors && errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(\n              new ApolloError({\n                graphQLErrors,\n              })\n            );\n          }\n          // Use linkDocument rather than queryInfo.document so the\n          // operation/fragments used to write the result are the same as the\n          // ones used to obtain it from the link.\n          queryInfo.markResult(\n            result,\n            linkDocument,\n            options,\n            cacheWriteBehavior\n          );\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n        };\n\n        // In the case we start multiple network requests simulatenously, we\n        // want to ensure we properly set `data` if we're reporting on an old\n        // result which will not be caught by the conditional above that ends up\n        // throwing the markError result.\n        if (hasErrors && errorPolicy === \"none\") {\n          aqr.data = void 0 as TData;\n        }\n\n        if (hasErrors && errorPolicy !== \"ignore\") {\n          aqr.errors = graphQLErrors;\n          aqr.networkStatus = NetworkStatus.error;\n        }\n\n        return aqr;\n      },\n\n      (networkError) => {\n        const error =\n          isApolloError(networkError) ? networkError : (\n            new ApolloError({ networkError })\n          );\n\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      }\n    );\n  }\n\n  private fetchConcastWithInfo<TData, TVars extends OperationVariables>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading,\n    query = options.query\n  ): ConcastAndInfo<TData> {\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n\n    const defaults = this.defaultOptions.watchQuery;\n    let {\n      fetchPolicy = (defaults && defaults.fetchPolicy) || \"cache-first\",\n      errorPolicy = (defaults && defaults.errorPolicy) || \"none\",\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n\n      const sourcesWithInfo = this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus\n      );\n\n      if (\n        // If we're in standby, postpone advancing options.fetchPolicy using\n        // applyNextFetchPolicy.\n        normalized.fetchPolicy !== \"standby\" &&\n        // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n        // this is another way to detect when nothing was done/fetched.\n        sourcesWithInfo.sources.length > 0 &&\n        queryInfo.observableQuery\n      ) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\n          \"after-fetch\",\n          options\n        );\n      }\n\n      return sourcesWithInfo;\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    const cleanupCancelFn = () => this.fetchCancelFns.delete(queryId);\n    this.fetchCancelFns.set(queryId, (reason) => {\n      cleanupCancelFn();\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(() => concast.cancel(reason));\n    });\n\n    let concast: Concast<ApolloQueryResult<TData>>,\n      containsDataFromLink: boolean;\n    // If the query has @export(as: ...) directives, then we need to\n    // process those directives asynchronously. When there are no\n    // @export directives (the common case), we deliberately avoid\n    // wrapping the result of this.fetchQueryByPolicy in a Promise,\n    // since the timing of result delivery is (unfortunately) important\n    // for backwards compatibility. TODO This code could be simpler if\n    // we deprecated and removed LocalState.\n    if (this.getDocumentInfo(normalized.query).hasClientExports) {\n      concast = new Concast(\n        this.localState\n          .addExportedVariables(\n            normalized.query,\n            normalized.variables,\n            normalized.context\n          )\n          .then(fromVariables)\n          .then((sourcesWithInfo) => sourcesWithInfo.sources)\n      );\n      // there is just no way we can synchronously get the *right* value here,\n      // so we will assume `true`, which is the behaviour before the bug fix in\n      // #10597. This means that bug is not fixed in that case, and is probably\n      // un-fixable with reasonable effort for the edge case of @export as\n      // directives.\n      containsDataFromLink = true;\n    } else {\n      const sourcesWithInfo = fromVariables(normalized.variables);\n      containsDataFromLink = sourcesWithInfo.fromLink;\n      concast = new Concast(sourcesWithInfo.sources);\n    }\n\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n\n    return {\n      concast,\n      fromLink: containsDataFromLink,\n    };\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<\n    ApolloCache<TStore>,\n    TResult\n  >): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesById = new Map<\n      string,\n      {\n        oq: ObservableQuery<any>;\n        lastDiff?: Cache.DiffResult<any>;\n        diff?: Cache.DiffResult<any>;\n      }\n    >();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq, queryId) => {\n        includedQueriesById.set(queryId, {\n          oq,\n          lastDiff: this.getQuery(queryId).getDiff(),\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map();\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: (optimistic && removeOptimistic) || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq =\n            watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n\n              let result: TResult | boolean | Promise<ApolloQueryResult<any>> =\n                onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(\n                  oq,\n                  result as InternalRefetchQueriesResult<TResult>\n                );\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(({ oq, lastDiff, diff }, queryId) => {\n        let result:\n          | TResult\n          | boolean\n          | Promise<ApolloQueryResult<any>>\n          | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            const info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private fetchQueryByPolicy<TData, TVars extends OperationVariables>(\n    queryInfo: QueryInfo,\n    {\n      query,\n      variables,\n      fetchPolicy,\n      refetchWritePolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n      notifyOnNetworkStatusChange,\n    }: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus\n  ): SourcesAndInfo<TData> {\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    queryInfo.init({\n      document: query,\n      variables,\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff();\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading\n    ) => {\n      const data = diff.result;\n\n      if (__DEV__ && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const fromData = (data: TData | undefined) =>\n        Observable.of({\n          data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus,\n          ...(diff.complete ? null : { partial: true }),\n        } as ApolloQueryResult<TData>);\n\n      if (data && this.getDocumentInfo(query).hasForcedResolvers) {\n        return this.localState\n          .runResolvers({\n            document: query,\n            remoteResult: { data },\n            context,\n            variables,\n            onlyRunForcedResolvers: true,\n          })\n          .then((resolved) => fromData(resolved.data || void 0));\n      }\n\n      // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n      // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n      // data was incorrectly returned from the cache on refetch:\n      // if diff.missing exists, we should not return cache data.\n      if (\n        errorPolicy === \"none\" &&\n        networkStatus === NetworkStatus.refetch &&\n        Array.isArray(diff.missing)\n      ) {\n        return fromData(void 0);\n      }\n\n      return fromData(data);\n    };\n\n    const cacheWriteBehavior =\n      fetchPolicy === \"no-cache\" ? CacheWriteBehavior.FORBID\n        // Watched queries must opt into overwriting existing data on refetch,\n        // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n      : (\n        networkStatus === NetworkStatus.refetch &&\n        refetchWritePolicy !== \"merge\"\n      ) ?\n        CacheWriteBehavior.OVERWRITE\n      : CacheWriteBehavior.MERGE;\n\n    const resultsFromLink = () =>\n      this.getResultsFromLink<TData, TVars>(queryInfo, cacheWriteBehavior, {\n        query,\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      });\n\n    const shouldNotify =\n      notifyOnNetworkStatusChange &&\n      typeof oldNetworkStatus === \"number\" &&\n      oldNetworkStatus !== networkStatus &&\n      isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\": {\n        const diff = readCache();\n\n        if (diff.complete) {\n          return {\n            fromLink: false,\n            sources: [resultsFromCache(diff, queryInfo.markReady())],\n          };\n        }\n\n        if (returnPartialData || shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(diff), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n      }\n\n      case \"cache-and-network\": {\n        const diff = readCache();\n\n        if (diff.complete || returnPartialData || shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(diff), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n      }\n\n      case \"cache-only\":\n        return {\n          fromLink: false,\n          sources: [resultsFromCache(readCache(), queryInfo.markReady())],\n        };\n\n      case \"network-only\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(readCache()), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n\n      case \"no-cache\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            // Note that queryInfo.getDiff() for no-cache queries does not call\n            // cache.diff, but instead returns a { complete: false } stub result\n            // when there is no queryInfo.diff already defined.\n            sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n\n      case \"standby\":\n        return { fromLink: false, sources: [] };\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...this.defaultContext,\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n\n// Return types used by fetchQueryByPolicy and other private methods above.\ninterface FetchConcastInfo {\n  // Metadata properties that can be returned in addition to the Concast.\n  fromLink: boolean;\n}\ninterface SourcesAndInfo<TData> extends FetchConcastInfo {\n  sources: ConcastSourcesArray<ApolloQueryResult<TData>>;\n}\ninterface ConcastAndInfo<TData> extends FetchConcastInfo {\n  concast: Concast<ApolloQueryResult<TData>>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}