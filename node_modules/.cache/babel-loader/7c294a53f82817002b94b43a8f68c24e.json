{"ast":null,"code":"import { parentEntrySlot } from \"./context.js\";\nimport { maybeUnsubscribe, arrayFromSet } from \"./helpers.js\";\nconst emptySetPool = [];\nconst POOL_TARGET_SIZE = 100;\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition, optionalMessage) {\n  if (!condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\nfunction valueIs(a, b) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\nfunction valueGet(value) {\n  switch (value.length) {\n    case 0:\n      throw new Error(\"unknown value\");\n    case 1:\n      return value[0];\n    case 2:\n      throw value[1];\n  }\n}\nfunction valueCopy(value) {\n  return value.slice(0);\n}\nexport class Entry {\n  constructor(fn) {\n    this.fn = fn;\n    this.parents = new Set();\n    this.childValues = new Map();\n    // When this Entry has children that are dirty, this property becomes\n    // a Set containing other Entry objects, borrowed from emptySetPool.\n    // When the set becomes empty, it gets recycled back to emptySetPool.\n    this.dirtyChildren = null;\n    this.dirty = true;\n    this.recomputing = false;\n    this.value = [];\n    this.deps = null;\n    ++Entry.count;\n  }\n  peek() {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  }\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  recompute(args) {\n    assert(!this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this) ? reallyRecompute(this, args) : valueGet(this.value);\n  }\n  setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n  dispose() {\n    this.setDirty();\n    // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n    forgetChildren(this);\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    eachParent(this, (parent, child) => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n  forget() {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  }\n  dependOn(dep) {\n    dep.add(this);\n    if (!this.deps) {\n      this.deps = emptySetPool.pop() || new Set();\n    }\n    this.deps.add(dep);\n  }\n  forgetDeps() {\n    if (this.deps) {\n      arrayFromSet(this.deps).forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n}\nEntry.count = 0;\nfunction rememberParent(child) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n    if (!parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n    return parent;\n  }\n}\nfunction reallyRecompute(entry, args) {\n  forgetChildren(entry);\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n  return valueGet(entry.value);\n}\nfunction recomputeNewValue(entry, args) {\n  entry.recomputing = true;\n  const {\n    normalizeResult\n  } = entry;\n  let oldValueCopy;\n  if (normalizeResult && entry.value.length === 1) {\n    oldValueCopy = valueCopy(entry.value);\n  }\n  // Make entry.value an empty array, representing an unknown value.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n    // If we have a viable oldValueCopy to compare with the (successfully\n    // recomputed) new entry.value, and they are not already === identical, give\n    // normalizeResult a chance to pick/choose/reuse parts of oldValueCopy[0]\n    // and/or entry.value[0] to determine the final cached entry.value.\n    if (normalizeResult && oldValueCopy && !valueIs(oldValueCopy, entry.value)) {\n      try {\n        entry.value[0] = normalizeResult(entry.value[0], oldValueCopy[0]);\n      } catch (_a) {\n        // If normalizeResult throws, just use the newer value, rather than\n        // saving the exception as entry.value[1].\n      }\n    }\n  } catch (e) {\n    // If entry.fn throws, entry.value will hold that exception.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\nfunction mightBeDirty(entry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\nfunction setClean(entry) {\n  entry.dirty = false;\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n  reportClean(entry);\n}\nfunction reportDirty(child) {\n  eachParent(child, reportDirtyChild);\n}\nfunction reportClean(child) {\n  eachParent(child, reportCleanChild);\n}\nfunction eachParent(child, callback) {\n  const parentCount = child.parents.size;\n  if (parentCount) {\n    const parents = arrayFromSet(child.parents);\n    for (let i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n}\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent, child) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  const parentWasClean = !mightBeDirty(parent);\n  if (!parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set();\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n  parent.dirtyChildren.add(child);\n  // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n}\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent, child) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(!mightBeDirty(child));\n  const childValue = parent.childValues.get(child);\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (!valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n  removeDirtyChild(parent, child);\n  if (mightBeDirty(parent)) {\n    return;\n  }\n  reportClean(parent);\n}\nfunction removeDirtyChild(parent, child) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  }\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\nfunction forgetChild(parent, child) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\nfunction maybeSubscribe(entry, args) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}","map":{"version":3,"sources":["../src/entry.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { parentEntrySlot } from \"./context.js\";\nimport { maybeUnsubscribe, arrayFromSet } from \"./helpers.js\";\nconst emptySetPool = [];\nconst POOL_TARGET_SIZE = 100;\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition, optionalMessage) {\n    if (!condition) {\n        throw new Error(optionalMessage || \"assertion failure\");\n    }\n}\nfunction valueIs(a, b) {\n    const len = a.length;\n    return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n        // Both values must be ordinary (or both exceptional) to be equal.\n        len === b.length &&\n        // The underlying value or exception must be the same.\n        a[len - 1] === b[len - 1]);\n}\nfunction valueGet(value) {\n    switch (value.length) {\n        case 0: throw new Error(\"unknown value\");\n        case 1: return value[0];\n        case 2: throw value[1];\n    }\n}\nfunction valueCopy(value) {\n    return value.slice(0);\n}\nexport class Entry {\n    constructor(fn) {\n        this.fn = fn;\n        this.parents = new Set();\n        this.childValues = new Map();\n        // When this Entry has children that are dirty, this property becomes\n        // a Set containing other Entry objects, borrowed from emptySetPool.\n        // When the set becomes empty, it gets recycled back to emptySetPool.\n        this.dirtyChildren = null;\n        this.dirty = true;\n        this.recomputing = false;\n        this.value = [];\n        this.deps = null;\n        ++Entry.count;\n    }\n    peek() {\n        if (this.value.length === 1 && !mightBeDirty(this)) {\n            rememberParent(this);\n            return this.value[0];\n        }\n    }\n    // This is the most important method of the Entry API, because it\n    // determines whether the cached this.value can be returned immediately,\n    // or must be recomputed. The overall performance of the caching system\n    // depends on the truth of the following observations: (1) this.dirty is\n    // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n    // (3) valueGet(this.value) is usually returned without recomputation.\n    recompute(args) {\n        assert(!this.recomputing, \"already recomputing\");\n        rememberParent(this);\n        return mightBeDirty(this)\n            ? reallyRecompute(this, args)\n            : valueGet(this.value);\n    }\n    setDirty() {\n        if (this.dirty)\n            return;\n        this.dirty = true;\n        reportDirty(this);\n        // We can go ahead and unsubscribe here, since any further dirty\n        // notifications we receive will be redundant, and unsubscribing may\n        // free up some resources, e.g. file watchers.\n        maybeUnsubscribe(this);\n    }\n    dispose() {\n        this.setDirty();\n        // Sever any dependency relationships with our own children, so those\n        // children don't retain this parent Entry in their child.parents sets,\n        // thereby preventing it from being fully garbage collected.\n        forgetChildren(this);\n        // Because this entry has been kicked out of the cache (in index.js),\n        // we've lost the ability to find out if/when this entry becomes dirty,\n        // whether that happens through a subscription, because of a direct call\n        // to entry.setDirty(), or because one of its children becomes dirty.\n        // Because of this loss of future information, we have to assume the\n        // worst (that this entry might have become dirty very soon), so we must\n        // immediately mark this entry's parents as dirty. Normally we could\n        // just call entry.setDirty() rather than calling parent.setDirty() for\n        // each parent, but that would leave this entry in parent.childValues\n        // and parent.dirtyChildren, which would prevent the child from being\n        // truly forgotten.\n        eachParent(this, (parent, child) => {\n            parent.setDirty();\n            forgetChild(parent, this);\n        });\n    }\n    forget() {\n        // The code that creates Entry objects in index.ts will replace this method\n        // with one that actually removes the Entry from the cache, which will also\n        // trigger the entry.dispose method.\n        this.dispose();\n    }\n    dependOn(dep) {\n        dep.add(this);\n        if (!this.deps) {\n            this.deps = emptySetPool.pop() || new Set();\n        }\n        this.deps.add(dep);\n    }\n    forgetDeps() {\n        if (this.deps) {\n            arrayFromSet(this.deps).forEach(dep => dep.delete(this));\n            this.deps.clear();\n            emptySetPool.push(this.deps);\n            this.deps = null;\n        }\n    }\n}\nEntry.count = 0;\nfunction rememberParent(child) {\n    const parent = parentEntrySlot.getValue();\n    if (parent) {\n        child.parents.add(parent);\n        if (!parent.childValues.has(child)) {\n            parent.childValues.set(child, []);\n        }\n        if (mightBeDirty(child)) {\n            reportDirtyChild(parent, child);\n        }\n        else {\n            reportCleanChild(parent, child);\n        }\n        return parent;\n    }\n}\nfunction reallyRecompute(entry, args) {\n    forgetChildren(entry);\n    // Set entry as the parent entry while calling recomputeNewValue(entry).\n    parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n    if (maybeSubscribe(entry, args)) {\n        // If we successfully recomputed entry.value and did not fail to\n        // (re)subscribe, then this Entry is no longer explicitly dirty.\n        setClean(entry);\n    }\n    return valueGet(entry.value);\n}\nfunction recomputeNewValue(entry, args) {\n    entry.recomputing = true;\n    const { normalizeResult } = entry;\n    let oldValueCopy;\n    if (normalizeResult && entry.value.length === 1) {\n        oldValueCopy = valueCopy(entry.value);\n    }\n    // Make entry.value an empty array, representing an unknown value.\n    entry.value.length = 0;\n    try {\n        // If entry.fn succeeds, entry.value will become a normal Value.\n        entry.value[0] = entry.fn.apply(null, args);\n        // If we have a viable oldValueCopy to compare with the (successfully\n        // recomputed) new entry.value, and they are not already === identical, give\n        // normalizeResult a chance to pick/choose/reuse parts of oldValueCopy[0]\n        // and/or entry.value[0] to determine the final cached entry.value.\n        if (normalizeResult && oldValueCopy && !valueIs(oldValueCopy, entry.value)) {\n            try {\n                entry.value[0] = normalizeResult(entry.value[0], oldValueCopy[0]);\n            }\n            catch (_a) {\n                // If normalizeResult throws, just use the newer value, rather than\n                // saving the exception as entry.value[1].\n            }\n        }\n    }\n    catch (e) {\n        // If entry.fn throws, entry.value will hold that exception.\n        entry.value[1] = e;\n    }\n    // Either way, this line is always reached.\n    entry.recomputing = false;\n}\nfunction mightBeDirty(entry) {\n    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\nfunction setClean(entry) {\n    entry.dirty = false;\n    if (mightBeDirty(entry)) {\n        // This Entry may still have dirty children, in which case we can't\n        // let our parents know we're clean just yet.\n        return;\n    }\n    reportClean(entry);\n}\nfunction reportDirty(child) {\n    eachParent(child, reportDirtyChild);\n}\nfunction reportClean(child) {\n    eachParent(child, reportCleanChild);\n}\nfunction eachParent(child, callback) {\n    const parentCount = child.parents.size;\n    if (parentCount) {\n        const parents = arrayFromSet(child.parents);\n        for (let i = 0; i < parentCount; ++i) {\n            callback(parents[i], child);\n        }\n    }\n}\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent, child) {\n    // Must have called rememberParent(child) before calling\n    // reportDirtyChild(parent, child).\n    assert(parent.childValues.has(child));\n    assert(mightBeDirty(child));\n    const parentWasClean = !mightBeDirty(parent);\n    if (!parent.dirtyChildren) {\n        parent.dirtyChildren = emptySetPool.pop() || new Set;\n    }\n    else if (parent.dirtyChildren.has(child)) {\n        // If we already know this child is dirty, then we must have already\n        // informed our own parents that we are dirty, so we can terminate\n        // the recursion early.\n        return;\n    }\n    parent.dirtyChildren.add(child);\n    // If parent was clean before, it just became (possibly) dirty (according to\n    // mightBeDirty), since we just added child to parent.dirtyChildren.\n    if (parentWasClean) {\n        reportDirty(parent);\n    }\n}\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent, child) {\n    // Must have called rememberChild(child) before calling\n    // reportCleanChild(parent, child).\n    assert(parent.childValues.has(child));\n    assert(!mightBeDirty(child));\n    const childValue = parent.childValues.get(child);\n    if (childValue.length === 0) {\n        parent.childValues.set(child, valueCopy(child.value));\n    }\n    else if (!valueIs(childValue, child.value)) {\n        parent.setDirty();\n    }\n    removeDirtyChild(parent, child);\n    if (mightBeDirty(parent)) {\n        return;\n    }\n    reportClean(parent);\n}\nfunction removeDirtyChild(parent, child) {\n    const dc = parent.dirtyChildren;\n    if (dc) {\n        dc.delete(child);\n        if (dc.size === 0) {\n            if (emptySetPool.length < POOL_TARGET_SIZE) {\n                emptySetPool.push(dc);\n            }\n            parent.dirtyChildren = null;\n        }\n    }\n}\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent) {\n    if (parent.childValues.size > 0) {\n        parent.childValues.forEach((_value, child) => {\n            forgetChild(parent, child);\n        });\n    }\n    // Remove this parent Entry from any sets to which it was added by the\n    // addToSet method.\n    parent.forgetDeps();\n    // After we forget all our children, this.dirtyChildren must be empty\n    // and therefore must have been reset to null.\n    assert(parent.dirtyChildren === null);\n}\nfunction forgetChild(parent, child) {\n    child.parents.delete(parent);\n    parent.childValues.delete(child);\n    removeDirtyChild(parent, child);\n}\nfunction maybeSubscribe(entry, args) {\n    if (typeof entry.subscribe === \"function\") {\n        try {\n            maybeUnsubscribe(entry); // Prevent double subscriptions.\n            entry.unsubscribe = entry.subscribe.apply(null, args);\n        }\n        catch (e) {\n            // If this Entry has a subscribe function and it threw an exception\n            // (or an unsubscribe function it previously returned now throws),\n            // return false to indicate that we were not able to subscribe (or\n            // unsubscribe), and this Entry should remain dirty.\n            entry.setDirty();\n            return false;\n        }\n    }\n    // Returning true indicates either that there was no entry.subscribe\n    // function or that it succeeded.\n    return true;\n}\n//# sourceMappingURL=entry.js.map"]},"metadata":{},"sourceType":"module"}