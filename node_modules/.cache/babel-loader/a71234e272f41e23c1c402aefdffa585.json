{"ast":null,"code":"import { print as origPrint } from \"graphql\";\nimport { AutoCleanedWeakCache, cacheSizes } from \"../caching/index.js\";\nimport { registerGlobalCache } from \"../caching/getMemoryInternals.js\";\nvar printCache;\nexport var print = Object.assign(function (ast) {\n  var result = printCache.get(ast);\n  if (!result) {\n    result = origPrint(ast);\n    printCache.set(ast, result);\n  }\n  return result;\n}, {\n  reset: function () {\n    printCache = new AutoCleanedWeakCache(cacheSizes.print || 2000 /* defaultCacheSizes.print */);\n  }\n});\nprint.reset();\nif (globalThis.__DEV__ !== false) {\n  registerGlobalCache(\"print\", function () {\n    return printCache ? printCache.size : 0;\n  });\n}","map":{"version":3,"sources":["../../../src/utilities/graphql/print.ts"],"names":[],"mappings":"AACA,SAAS,KAAK,IAAI,SAAS,QAAQ,SAAS;AAC5C,SACE,oBAAoB,EACpB,UAAU,QAEL,qBAAqB;AAC5B,SAAS,mBAAmB,QAAQ,kCAAkC;AAEtE,IAAI,UAAkD;AACtD,OAAO,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAChC,UAAC,GAAY,EAAA;EACX,IAAI,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC;EAEhC,IAAI,CAAC,MAAM,EAAE;IACX,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC;IACvB,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC;EAC7B;EACA,OAAO,MAAM;AACf,CAAC,EACD;EACE,KAAK,EAAA,SAAA,CAAA,EAAA;IACH,UAAU,GAAG,IAAI,oBAAoB,CACnC,UAAU,CAAC,KAAK,IAAA,IAAA,CAAA,6BAA2B,CAC5C;EACH;CACD,CACF;AACD,KAAK,CAAC,KAAK,CAAA,CAAE;AAEb,IAAI,UAAU,CAAA,OAAA,KAAA,KAAA,EAAA;EACZ,mBAAmB,CAAC,OAAO,EAAE,YAAA;IAAM,OAAC,UAAU,GAAG,UAAU,CAAC,IAAI,GAAG,CAAC;EAAjC,CAAkC,CAAC;AACxE","sourcesContent":["import type { ASTNode } from \"graphql\";\nimport { print as origPrint } from \"graphql\";\nimport {\n  AutoCleanedWeakCache,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"../caching/index.js\";\nimport { registerGlobalCache } from \"../caching/getMemoryInternals.js\";\n\nlet printCache!: AutoCleanedWeakCache<ASTNode, string>;\nexport const print = Object.assign(\n  (ast: ASTNode) => {\n    let result = printCache.get(ast);\n\n    if (!result) {\n      result = origPrint(ast);\n      printCache.set(ast, result);\n    }\n    return result;\n  },\n  {\n    reset() {\n      printCache = new AutoCleanedWeakCache<ASTNode, string>(\n        cacheSizes.print || defaultCacheSizes.print\n      );\n    },\n  }\n);\nprint.reset();\n\nif (__DEV__) {\n  registerGlobalCache(\"print\", () => (printCache ? printCache.size : 0));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}