{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { dep } from \"optimism\";\nimport { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\nvar delModifier = function () {\n  return DELETE;\n};\nvar INVALIDATE = Object.create(null);\nvar EntityStore = /** @class */function () {\n  function EntityStore(policies, group) {\n    var _this = this;\n    this.policies = policies;\n    this.group = group;\n    this.data = Object.create(null);\n    // Maps root entity IDs to the number of times they have been retained, minus\n    // the number of times they have been released. Retained entities keep other\n    // entities they reference (even indirectly) from being garbage collected.\n    this.rootIds = Object.create(null);\n    // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n    this.refs = Object.create(null);\n    // Bound function that can be passed around to provide easy access to fields\n    // of Reference objects as well as ordinary objects.\n    this.getFieldValue = function (objectOrReference, storeFieldName) {\n      return maybeDeepFreeze(isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n    };\n    // Returns true for non-normalized StoreObjects and non-dangling\n    // References, indicating that readField(name, objOrRef) has a chance of\n    // working. Useful for filtering out dangling references from lists.\n    this.canRead = function (objOrRef) {\n      return isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n    };\n    // Bound function that converts an id or an object with a __typename and\n    // primary key fields to a Reference object. If called with a Reference object,\n    // that same Reference object is returned. Pass true for mergeIntoStore to persist\n    // an object into the store.\n    this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n      if (typeof objOrIdOrRef === \"string\") {\n        return makeReference(objOrIdOrRef);\n      }\n      if (isReference(objOrIdOrRef)) {\n        return objOrIdOrRef;\n      }\n      var id = _this.policies.identify(objOrIdOrRef)[0];\n      if (id) {\n        var ref = makeReference(id);\n        if (mergeIntoStore) {\n          _this.merge(id, objOrIdOrRef);\n        }\n        return ref;\n      }\n    };\n  }\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n  EntityStore.prototype.toObject = function () {\n    return __assign({}, this.data);\n  };\n  EntityStore.prototype.has = function (dataId) {\n    return this.lookup(dataId, true) !== void 0;\n  };\n  EntityStore.prototype.get = function (dataId, fieldName) {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      var storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  };\n  EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  };\n  EntityStore.prototype.merge = function (older, newer) {\n    var _this = this;\n    var dataId;\n    // Convert unexpected references to ID strings.\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n    var existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n    var incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n    // If newer was a string ID, but that ID was not defined in this store,\n    // then there are no fields to be merged, so we're done.\n    if (!incoming) return;\n    invariant(typeof dataId === \"string\", 1);\n    var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        var fieldsToDirty_1 = Object.create(null);\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty_1.__exists = 1;\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach(function (storeFieldName) {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty_1[storeFieldName] = 1;\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty_1[fieldName] = 1;\n            }\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n        if (fieldsToDirty_1.__typename && !(existing && existing.__typename) &&\n        // Since we return default root __typename strings\n        // automatically from store.get, we don't need to dirty the\n        // ROOT_QUERY.__typename field if merged.__typename is equal\n        // to the default string (usually \"Query\").\n        this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty_1.__typename;\n        }\n        Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n          return _this.group.dirty(dataId, fieldName);\n        });\n      }\n    }\n  };\n  EntityStore.prototype.modify = function (dataId, fields) {\n    var _this = this;\n    var storeObject = this.lookup(dataId);\n    if (storeObject) {\n      var changedFields_1 = Object.create(null);\n      var needToMerge_1 = false;\n      var allDeleted_1 = true;\n      var sharedDetails_1 = {\n        DELETE: DELETE,\n        INVALIDATE: INVALIDATE,\n        isReference: isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: function (fieldNameOrOptions, from) {\n          return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId)\n          } : fieldNameOrOptions, {\n            store: _this\n          });\n        }\n      };\n      Object.keys(storeObject).forEach(function (storeFieldName) {\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n        if (modify) {\n          var newValue = modify === delModifier ? DELETE : modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), {\n            fieldName: fieldName,\n            storeFieldName: storeFieldName,\n            storage: _this.getStorage(dataId, storeFieldName)\n          }));\n          if (newValue === INVALIDATE) {\n            _this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields_1[storeFieldName] = newValue;\n              needToMerge_1 = true;\n              fieldValue = newValue;\n              if (globalThis.__DEV__ !== false) {\n                var checkReference = function (ref) {\n                  if (_this.lookup(ref.__ref) === undefined) {\n                    globalThis.__DEV__ !== false && invariant.warn(2, ref);\n                    return true;\n                  }\n                };\n                if (isReference(newValue)) {\n                  checkReference(newValue);\n                } else if (Array.isArray(newValue)) {\n                  // Warn about writing \"mixed\" arrays of Reference and non-Reference objects\n                  var seenReference = false;\n                  var someNonReference = void 0;\n                  for (var _i = 0, newValue_1 = newValue; _i < newValue_1.length; _i++) {\n                    var value = newValue_1[_i];\n                    if (isReference(value)) {\n                      seenReference = true;\n                      if (checkReference(value)) break;\n                    } else {\n                      // Do not warn on primitive values, since those could never be represented\n                      // by a reference. This is a valid (albeit uncommon) use case.\n                      if (typeof value === \"object\" && !!value) {\n                        var id = _this.policies.identify(value)[0];\n                        // check if object could even be referenced, otherwise we are not interested in it for this warning\n                        if (id) {\n                          someNonReference = value;\n                        }\n                      }\n                    }\n                    if (seenReference && someNonReference !== undefined) {\n                      globalThis.__DEV__ !== false && invariant.warn(3, someNonReference);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted_1 = false;\n        }\n      });\n      if (needToMerge_1) {\n        this.merge(dataId, changedFields_1);\n        if (allDeleted_1) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  EntityStore.prototype.delete = function (dataId, fieldName, args) {\n    var _a;\n    var storeObject = this.lookup(dataId);\n    if (storeObject) {\n      var typename = this.getFieldValue(storeObject, \"__typename\");\n      var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n        typename: typename,\n        fieldName: fieldName,\n        args: args\n      }) : fieldName;\n      return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n    }\n    return false;\n  };\n  EntityStore.prototype.evict = function (options, limit) {\n    var evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  };\n  EntityStore.prototype.clear = function () {\n    this.replace(null);\n  };\n  EntityStore.prototype.extract = function () {\n    var _this = this;\n    var obj = this.toObject();\n    var extraRootIds = [];\n    this.getRootIdSet().forEach(function (id) {\n      if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = {\n        extraRootIds: extraRootIds.sort()\n      };\n    }\n    return obj;\n  };\n  EntityStore.prototype.replace = function (newData) {\n    var _this = this;\n    Object.keys(this.data).forEach(function (dataId) {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        _this.delete(dataId);\n      }\n    });\n    if (newData) {\n      var __META = newData.__META,\n        rest_1 = __rest(newData, [\"__META\"]);\n      Object.keys(rest_1).forEach(function (dataId) {\n        _this.merge(dataId, rest_1[dataId]);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  };\n  EntityStore.prototype.retain = function (rootId) {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  };\n  EntityStore.prototype.release = function (rootId) {\n    if (this.rootIds[rootId] > 0) {\n      var count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  };\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  EntityStore.prototype.getRootIdSet = function (ids) {\n    if (ids === void 0) {\n      ids = new Set();\n    }\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  };\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  EntityStore.prototype.gc = function () {\n    var _this = this;\n    var ids = this.getRootIdSet();\n    var snapshot = this.toObject();\n    ids.forEach(function (id) {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    var idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      var root_1 = this;\n      while (root_1 instanceof Layer) root_1 = root_1.parent;\n      idsToRemove.forEach(function (id) {\n        return root_1.delete(id);\n      });\n    }\n    return idsToRemove;\n  };\n  EntityStore.prototype.findChildRefIds = function (dataId) {\n    if (!hasOwn.call(this.refs, dataId)) {\n      var found_1 = this.refs[dataId] = Object.create(null);\n      var root = this.data[dataId];\n      if (!root) return found_1;\n      var workSet_1 = new Set([root]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      workSet_1.forEach(function (obj) {\n        if (isReference(obj)) {\n          found_1[obj.__ref] = true;\n          // In rare cases, a { __ref } Reference object may have other fields.\n          // This often indicates a mismerging of References with StoreObjects,\n          // but garbage collection should not be fooled by a stray __ref\n          // property in a StoreObject (ignoring all the other fields just\n          // because the StoreObject looks like a Reference). To avoid this\n          // premature termination of findChildRefIds recursion, we fall through\n          // to the code below, which will handle any other properties of obj.\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(function (key) {\n            var child = obj[key];\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            if (isNonNullObject(child)) {\n              workSet_1.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  };\n  EntityStore.prototype.makeCacheKey = function () {\n    return this.group.keyMaker.lookupArray(arguments);\n  };\n  return EntityStore;\n}();\nexport { EntityStore };\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nvar CacheGroup = /** @class */function () {\n  function CacheGroup(caching, parent) {\n    if (parent === void 0) {\n      parent = null;\n    }\n    this.caching = caching;\n    this.parent = parent;\n    this.d = null;\n    this.resetCaching();\n  }\n  CacheGroup.prototype.resetCaching = function () {\n    this.d = this.caching ? dep() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  };\n  CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      var fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  };\n  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName),\n      // When storeFieldName === \"__exists\", that means the entity identified\n      // by dataId has either disappeared from the cache or was newly added,\n      // so the result caching system would do well to \"forget everything it\n      // knows\" about that object. To achieve that kind of invalidation, we\n      // not only dirty the associated result cache entry, but also remove it\n      // completely from the dependency graph. For the optimism implementation\n      // details, see https://github.com/benjamn/optimism/pull/195.\n      storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n    }\n  };\n  return CacheGroup;\n}();\nfunction makeDepKey(dataId, storeFieldName) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + \"#\" + dataId;\n}\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n  if (supportsResultCaching(store)) {\n    // We use this pseudo-field __exists elsewhere in the EntityStore code to\n    // represent changes in the existence of the entity object identified by\n    // entityId. This dependency gets reliably dirtied whenever an object with\n    // this ID is deleted (or newly created) within this group, so any result\n    // cache entries (for example, StoreReader#executeSelectionSet results) that\n    // depend on __exists for this entityId will get dirtied as well, leading to\n    // the eventual recomputation (instead of reuse) of those result objects the\n    // next time someone reads them from the cache.\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n(function (EntityStore) {\n  // Refer to this class as EntityStore.Root outside this namespace.\n  var Root = /** @class */function (_super) {\n    __extends(Root, _super);\n    function Root(_a) {\n      var policies = _a.policies,\n        _b = _a.resultCaching,\n        resultCaching = _b === void 0 ? true : _b,\n        seed = _a.seed;\n      var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n      _this.stump = new Stump(_this);\n      _this.storageTrie = new Trie(canUseWeakMap);\n      if (seed) _this.replace(seed);\n      return _this;\n    }\n    Root.prototype.addLayer = function (layerId, replay) {\n      // Adding an optimistic Layer on top of the Root actually adds the Layer\n      // on top of the Stump, so the Stump always comes between the Root and\n      // any Layer objects that we've added.\n      return this.stump.addLayer(layerId, replay);\n    };\n    Root.prototype.removeLayer = function () {\n      // Never remove the root layer.\n      return this;\n    };\n    Root.prototype.getStorage = function () {\n      return this.storageTrie.lookupArray(arguments);\n    };\n    return Root;\n  }(EntityStore);\n  EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nvar Layer = /** @class */function (_super) {\n  __extends(Layer, _super);\n  function Layer(id, parent, replay, group) {\n    var _this = _super.call(this, parent.policies, group) || this;\n    _this.id = id;\n    _this.parent = parent;\n    _this.replay = replay;\n    _this.group = group;\n    replay(_this);\n    return _this;\n  }\n  Layer.prototype.addLayer = function (layerId, replay) {\n    return new Layer(layerId, this, replay, this.group);\n  };\n  Layer.prototype.removeLayer = function (layerId) {\n    var _this = this;\n    // Remove all instances of the given id, not just the first one.\n    var parent = this.parent.removeLayer(layerId);\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        // Dirty every ID we're removing. Technically we might be able to avoid\n        // dirtying fields that have values in higher layers, but we don't have\n        // easy access to higher layers here, and we're about to recreate those\n        // layers anyway (see parent.addLayer below).\n        Object.keys(this.data).forEach(function (dataId) {\n          var ownStoreObject = _this.data[dataId];\n          var parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            // The StoreObject identified by dataId was defined in this layer\n            // but will be undefined in the parent layer, so we can delete the\n            // whole entity using this.delete(dataId). Since we're about to\n            // throw this layer away, the only goal of this deletion is to dirty\n            // the removed fields.\n            _this.delete(dataId);\n          } else if (!ownStoreObject) {\n            // This layer had an entry for dataId but it was undefined, which\n            // means the entity was deleted in this layer, and it's about to\n            // become undeleted when we remove this layer, so we need to dirty\n            // all fields that are about to be reexposed.\n            _this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n              _this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            // If ownStoreObject is not exactly the same as parentStoreObject,\n            // dirty any fields whose values will change as a result of this\n            // removal.\n            Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n              if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                _this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n      return parent;\n    }\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  };\n  Layer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n  Layer.prototype.findChildRefIds = function (dataId) {\n    var fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n  };\n  Layer.prototype.getStorage = function () {\n    var p = this.parent;\n    while (p.parent) p = p.parent;\n    return p.getStorage.apply(p,\n    // @ts-expect-error\n    arguments);\n  };\n  return Layer;\n}(EntityStore);\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nvar Stump = /** @class */function (_super) {\n  __extends(Stump, _super);\n  function Stump(root) {\n    return _super.call(this, \"EntityStore.Stump\", root, function () {}, new CacheGroup(root.group.caching, root.group)) || this;\n  }\n  Stump.prototype.removeLayer = function () {\n    // Never remove the Stump layer.\n    return this;\n  };\n  Stump.prototype.merge = function (older, newer) {\n    // We never want to write any data into the Stump, so we forward any merge\n    // calls to the Root instead. Another option here would be to throw an\n    // exception, but the toReference(object, true) function can sometimes\n    // trigger Stump writes (which used to be Root writes, before the Stump\n    // concept was introduced).\n    return this.parent.merge(older, newer);\n  };\n  return Stump;\n}(Layer);\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n  var existingValue = existingObject[property];\n  var incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nexport function supportsResultCaching(store) {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store instanceof EntityStore && store.group.caching);\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/entityStore.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\nimport type { OptimisticDependencyFunction } from \"optimism\";\nimport { dep } from \"optimism\";\nimport { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\n\nimport type {\n  StoreValue,\n  StoreObject,\n  Reference,\n} from \"../../utilities/index.js\";\nimport {\n  isReference,\n  makeReference,\n  DeepMerger,\n  maybeDeepFreeze,\n  canUseWeakMap,\n  isNonNullObject,\n} from \"../../utilities/index.js\";\nimport type { NormalizedCache, NormalizedCacheObject } from \"./types.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nimport type { Policies, StorageType } from \"./policies.js\";\nimport type { Cache } from \"../core/types/Cache.js\";\nimport type {\n  SafeReadonly,\n  Modifier,\n  Modifiers,\n  ReadFieldOptions,\n  ToReferenceFunction,\n  CanReadFunction,\n  InvalidateModifier,\n  DeleteModifier,\n  ModifierDetails,\n} from \"../core/types/common.js\";\nimport type { DocumentNode, FieldNode, SelectionSetNode } from \"graphql\";\n\nconst DELETE: DeleteModifier = Object.create(null);\nconst delModifier: Modifier<any> = () => DELETE;\nconst INVALIDATE: InvalidateModifier = Object.create(null);\n\nexport abstract class EntityStore implements NormalizedCache {\n  protected data: NormalizedCacheObject = Object.create(null);\n\n  constructor(\n    public readonly policies: Policies,\n    public readonly group: CacheGroup\n  ) {}\n\n  public abstract addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any\n  ): Layer;\n\n  public abstract removeLayer(layerId: string): EntityStore;\n\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n\n  public toObject(): NormalizedCacheObject {\n    return { ...this.data };\n  }\n\n  public has(dataId: string): boolean {\n    return this.lookup(dataId, true) !== void 0;\n  }\n\n  public get(dataId: string, fieldName: string): StoreValue {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      const storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (\n      fieldName === \"__typename\" &&\n      hasOwn.call(this.policies.rootTypenamesById, dataId)\n    ) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  }\n\n  protected lookup(\n    dataId: string,\n    dependOnExistence?: boolean\n  ): StoreObject | undefined {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  }\n\n  public merge(older: string | StoreObject, newer: StoreObject | string): void {\n    let dataId: string | undefined;\n\n    // Convert unexpected references to ID strings.\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n\n    const existing: StoreObject | undefined =\n      typeof older === \"string\" ? this.lookup((dataId = older)) : older;\n\n    const incoming: StoreObject | undefined =\n      typeof newer === \"string\" ? this.lookup((dataId = newer)) : newer;\n\n    // If newer was a string ID, but that ID was not defined in this store,\n    // then there are no fields to be merged, so we're done.\n    if (!incoming) return;\n\n    invariant(typeof dataId === \"string\", \"store.merge expects a string ID\");\n\n    const merged: StoreObject = new DeepMerger(storeObjectReconciler).merge(\n      existing,\n      incoming\n    );\n\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        const fieldsToDirty: Record<string, 1> = Object.create(null);\n\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty.__exists = 1;\n\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach((storeFieldName) => {\n          if (\n            !existing ||\n            existing[storeFieldName] !== merged[storeFieldName]\n          ) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty[storeFieldName] = 1;\n\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            const fieldName = fieldNameFromStoreName(storeFieldName);\n            if (\n              fieldName !== storeFieldName &&\n              !this.policies.hasKeyArgs(merged.__typename, fieldName)\n            ) {\n              fieldsToDirty[fieldName] = 1;\n            }\n\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (\n          fieldsToDirty.__typename &&\n          !(existing && existing.__typename) &&\n          // Since we return default root __typename strings\n          // automatically from store.get, we don't need to dirty the\n          // ROOT_QUERY.__typename field if merged.__typename is equal\n          // to the default string (usually \"Query\").\n          this.policies.rootTypenamesById[dataId] === merged.__typename\n        ) {\n          delete fieldsToDirty.__typename;\n        }\n\n        Object.keys(fieldsToDirty).forEach((fieldName) =>\n          this.group.dirty(dataId as string, fieldName)\n        );\n      }\n    }\n  }\n\n  public modify(\n    dataId: string,\n    fields: Modifier<any> | Modifiers<Record<string, any>>\n  ): boolean {\n    const storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      const changedFields: Record<string, any> = Object.create(null);\n      let needToMerge = false;\n      let allDeleted = true;\n\n      const sharedDetails = {\n        DELETE,\n        INVALIDATE,\n        isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: <V = StoreValue>(\n          fieldNameOrOptions: string | ReadFieldOptions,\n          from?: StoreObject | Reference\n        ) =>\n          this.policies.readField<V>(\n            typeof fieldNameOrOptions === \"string\" ?\n              {\n                fieldName: fieldNameOrOptions,\n                from: from || makeReference(dataId),\n              }\n            : fieldNameOrOptions,\n            { store: this }\n          ),\n      } satisfies Partial<ModifierDetails>;\n\n      Object.keys(storeObject).forEach((storeFieldName) => {\n        const fieldName = fieldNameFromStoreName(storeFieldName);\n        let fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        const modify: Modifier<StoreValue> | undefined =\n          typeof fields === \"function\" ? fields : (\n            fields[storeFieldName] || fields[fieldName]\n          );\n        if (modify) {\n          let newValue =\n            modify === delModifier ? DELETE : (\n              modify(maybeDeepFreeze(fieldValue), {\n                ...sharedDetails,\n                fieldName,\n                storeFieldName,\n                storage: this.getStorage(dataId, storeFieldName),\n              })\n            );\n          if (newValue === INVALIDATE) {\n            this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields[storeFieldName] = newValue;\n              needToMerge = true;\n              fieldValue = newValue as StoreValue;\n\n              if (__DEV__) {\n                const checkReference = (ref: Reference) => {\n                  if (this.lookup(ref.__ref) === undefined) {\n                    invariant.warn(\n                      \"cache.modify: You are trying to write a Reference that is not part of the store: %o\\n\" +\n                        \"Please make sure to set the `mergeIntoStore` parameter to `true` when creating a Reference that is not part of the store yet:\\n\" +\n                        \"`toReference(object, true)`\",\n                      ref\n                    );\n                    return true;\n                  }\n                };\n                if (isReference(newValue)) {\n                  checkReference(newValue);\n                } else if (Array.isArray(newValue)) {\n                  // Warn about writing \"mixed\" arrays of Reference and non-Reference objects\n                  let seenReference: boolean = false;\n                  let someNonReference: unknown;\n                  for (const value of newValue) {\n                    if (isReference(value)) {\n                      seenReference = true;\n                      if (checkReference(value)) break;\n                    } else {\n                      // Do not warn on primitive values, since those could never be represented\n                      // by a reference. This is a valid (albeit uncommon) use case.\n                      if (typeof value === \"object\" && !!value) {\n                        const [id] = this.policies.identify(value);\n                        // check if object could even be referenced, otherwise we are not interested in it for this warning\n                        if (id) {\n                          someNonReference = value;\n                        }\n                      }\n                    }\n                    if (seenReference && someNonReference !== undefined) {\n                      invariant.warn(\n                        \"cache.modify: Writing an array with a mix of both References and Objects will not result in the Objects being normalized correctly.\\n\" +\n                          \"Please convert the object instance %o to a Reference before writing it to the cache by calling `toReference(object, true)`.\",\n                        someNonReference\n                      );\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted = false;\n        }\n      });\n\n      if (needToMerge) {\n        this.merge(dataId, changedFields);\n\n        if (allDeleted) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  public delete(\n    dataId: string,\n    fieldName?: string,\n    args?: Record<string, any>\n  ) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const typename = this.getFieldValue<string>(storeObject, \"__typename\");\n      const storeFieldName =\n        fieldName && args ?\n          this.policies.getStoreFieldName({ typename, fieldName, args })\n        : fieldName;\n      return this.modify(\n        dataId,\n        storeFieldName ?\n          {\n            [storeFieldName]: delModifier,\n          }\n        : delModifier\n      );\n    }\n    return false;\n  }\n\n  public evict(options: Cache.EvictOptions, limit: EntityStore): boolean {\n    let evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public extract(): NormalizedCacheObject {\n    const obj = this.toObject();\n    const extraRootIds: string[] = [];\n    this.getRootIdSet().forEach((id) => {\n      if (!hasOwn.call(this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = { extraRootIds: extraRootIds.sort() };\n    }\n    return obj;\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    Object.keys(this.data).forEach((dataId) => {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        this.delete(dataId);\n      }\n    });\n    if (newData) {\n      const { __META, ...rest } = newData;\n      Object.keys(rest).forEach((dataId) => {\n        this.merge(dataId, rest[dataId] as StoreObject);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  }\n\n  public abstract getStorage(\n    idOrObj: string | StoreObject,\n    ...storeFieldNames: (string | number)[]\n  ): StorageType;\n\n  // Maps root entity IDs to the number of times they have been retained, minus\n  // the number of times they have been released. Retained entities keep other\n  // entities they reference (even indirectly) from being garbage collected.\n  private rootIds: {\n    [rootId: string]: number;\n  } = Object.create(null);\n\n  public retain(rootId: string): number {\n    return (this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1);\n  }\n\n  public release(rootId: string): number {\n    if (this.rootIds[rootId] > 0) {\n      const count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  }\n\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  public getRootIdSet(ids = new Set<string>()) {\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  }\n\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  public gc() {\n    const ids = this.getRootIdSet();\n    const snapshot = this.toObject();\n    ids.forEach((id) => {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    const idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      let root: EntityStore = this;\n      while (root instanceof Layer) root = root.parent;\n      idsToRemove.forEach((id) => root.delete(id));\n    }\n    return idsToRemove;\n  }\n\n  // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n  private refs: {\n    [dataId: string]: Record<string, true>;\n  } = Object.create(null);\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    if (!hasOwn.call(this.refs, dataId)) {\n      const found = (this.refs[dataId] = Object.create(null));\n      const root = this.data[dataId];\n      if (!root) return found;\n\n      const workSet = new Set<Record<string | number, any>>([root]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      workSet.forEach((obj) => {\n        if (isReference(obj)) {\n          found[obj.__ref] = true;\n          // In rare cases, a { __ref } Reference object may have other fields.\n          // This often indicates a mismerging of References with StoreObjects,\n          // but garbage collection should not be fooled by a stray __ref\n          // property in a StoreObject (ignoring all the other fields just\n          // because the StoreObject looks like a Reference). To avoid this\n          // premature termination of findChildRefIds recursion, we fall through\n          // to the code below, which will handle any other properties of obj.\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach((key) => {\n            const child = obj[key];\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            if (isNonNullObject(child)) {\n              workSet.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  }\n\n  // Used to compute cache keys specific to this.group.\n  /** overload for `InMemoryCache.maybeBroadcastWatch` */\n  public makeCacheKey(\n    document: DocumentNode,\n    callback: Cache.WatchCallback<any>,\n    details: string\n  ): object;\n  /** overload for `StoreReader.executeSelectionSet` */\n  public makeCacheKey(\n    selectionSet: SelectionSetNode,\n    parent: string /* = ( Reference.__ref ) */ | StoreObject,\n    varString: string | undefined,\n    canonizeResults: boolean\n  ): object;\n  /** overload for `StoreReader.executeSubSelectedArray` */\n  public makeCacheKey(\n    field: FieldNode,\n    array: readonly any[],\n    varString: string | undefined\n  ): object;\n  /** @deprecated This is only meant for internal usage,\n   * in your own code please use a `Trie` instance instead. */\n  public makeCacheKey(...args: any[]): object;\n  public makeCacheKey() {\n    return this.group.keyMaker.lookupArray(arguments);\n  }\n\n  // Bound function that can be passed around to provide easy access to fields\n  // of Reference objects as well as ordinary objects.\n  public getFieldValue = <T = StoreValue>(\n    objectOrReference: StoreObject | Reference | undefined,\n    storeFieldName: string\n  ) =>\n    maybeDeepFreeze(\n      isReference(objectOrReference) ?\n        this.get(objectOrReference.__ref, storeFieldName)\n      : objectOrReference && objectOrReference[storeFieldName]\n    ) as SafeReadonly<T>;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  public canRead: CanReadFunction = (objOrRef) => {\n    return isReference(objOrRef) ?\n        this.has(objOrRef.__ref)\n      : typeof objOrRef === \"object\";\n  };\n\n  // Bound function that converts an id or an object with a __typename and\n  // primary key fields to a Reference object. If called with a Reference object,\n  // that same Reference object is returned. Pass true for mergeIntoStore to persist\n  // an object into the store.\n  public toReference: ToReferenceFunction = (objOrIdOrRef, mergeIntoStore) => {\n    if (typeof objOrIdOrRef === \"string\") {\n      return makeReference(objOrIdOrRef);\n    }\n\n    if (isReference(objOrIdOrRef)) {\n      return objOrIdOrRef;\n    }\n\n    const [id] = this.policies.identify(objOrIdOrRef);\n\n    if (id) {\n      const ref = makeReference(id);\n      if (mergeIntoStore) {\n        this.merge(id, objOrIdOrRef);\n      }\n      return ref;\n    }\n  };\n}\n\nexport type FieldValueGetter = EntityStore[\"getFieldValue\"];\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n  private d: OptimisticDependencyFunction<string> | null = null;\n\n  // Used by the EntityStore#makeCacheKey method to compute cache keys\n  // specific to this CacheGroup.\n  public keyMaker!: Trie<object>;\n\n  constructor(\n    public readonly caching: boolean,\n    private parent: CacheGroup | null = null\n  ) {\n    this.resetCaching();\n  }\n\n  public resetCaching() {\n    this.d = this.caching ? dep<string>() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  }\n\n  public depend(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      const fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  }\n\n  public dirty(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d.dirty(\n        makeDepKey(dataId, storeFieldName),\n        // When storeFieldName === \"__exists\", that means the entity identified\n        // by dataId has either disappeared from the cache or was newly added,\n        // so the result caching system would do well to \"forget everything it\n        // knows\" about that object. To achieve that kind of invalidation, we\n        // not only dirty the associated result cache entry, but also remove it\n        // completely from the dependency graph. For the optimism implementation\n        // details, see https://github.com/benjamn/optimism/pull/195.\n        storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\"\n      );\n    }\n  }\n}\n\nfunction makeDepKey(dataId: string, storeFieldName: string) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + \"#\" + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(\n  store: NormalizedCache,\n  entityId: string\n) {\n  if (supportsResultCaching(store)) {\n    // We use this pseudo-field __exists elsewhere in the EntityStore code to\n    // represent changes in the existence of the entity object identified by\n    // entityId. This dependency gets reliably dirtied whenever an object with\n    // this ID is deleted (or newly created) within this group, so any result\n    // cache entries (for example, StoreReader#executeSelectionSet results) that\n    // depend on __exists for this entityId will get dirtied as well, leading to\n    // the eventual recomputation (instead of reuse) of those result objects the\n    // next time someone reads them from the cache.\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\nexport namespace EntityStore {\n  // Refer to this class as EntityStore.Root outside this namespace.\n  export class Root extends EntityStore {\n    constructor({\n      policies,\n      resultCaching = true,\n      seed,\n    }: {\n      policies: Policies;\n      resultCaching?: boolean;\n      seed?: NormalizedCacheObject;\n    }) {\n      super(policies, new CacheGroup(resultCaching));\n      if (seed) this.replace(seed);\n    }\n\n    public readonly stump = new Stump(this);\n\n    public addLayer(\n      layerId: string,\n      replay: (layer: EntityStore) => any\n    ): Layer {\n      // Adding an optimistic Layer on top of the Root actually adds the Layer\n      // on top of the Stump, so the Stump always comes between the Root and\n      // any Layer objects that we've added.\n      return this.stump.addLayer(layerId, replay);\n    }\n\n    public removeLayer(): Root {\n      // Never remove the root layer.\n      return this;\n    }\n\n    public readonly storageTrie = new Trie<StorageType>(canUseWeakMap);\n    public getStorage(): StorageType {\n      return this.storageTrie.lookupArray(arguments);\n    }\n  }\n}\n\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n  constructor(\n    public readonly id: string,\n    public readonly parent: EntityStore,\n    public readonly replay: (layer: EntityStore) => any,\n    public readonly group: CacheGroup\n  ) {\n    super(parent.policies, group);\n    replay(this);\n  }\n\n  public addLayer(layerId: string, replay: (layer: EntityStore) => any): Layer {\n    return new Layer(layerId, this, replay, this.group);\n  }\n\n  public removeLayer(layerId: string): EntityStore {\n    // Remove all instances of the given id, not just the first one.\n    const parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        // Dirty every ID we're removing. Technically we might be able to avoid\n        // dirtying fields that have values in higher layers, but we don't have\n        // easy access to higher layers here, and we're about to recreate those\n        // layers anyway (see parent.addLayer below).\n        Object.keys(this.data).forEach((dataId) => {\n          const ownStoreObject = this.data[dataId];\n          const parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            // The StoreObject identified by dataId was defined in this layer\n            // but will be undefined in the parent layer, so we can delete the\n            // whole entity using this.delete(dataId). Since we're about to\n            // throw this layer away, the only goal of this deletion is to dirty\n            // the removed fields.\n            this.delete(dataId);\n          } else if (!ownStoreObject) {\n            // This layer had an entry for dataId but it was undefined, which\n            // means the entity was deleted in this layer, and it's about to\n            // become undeleted when we remove this layer, so we need to dirty\n            // all fields that are about to be reexposed.\n            this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach((storeFieldName) => {\n              this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            // If ownStoreObject is not exactly the same as parentStoreObject,\n            // dirty any fields whose values will change as a result of this\n            // removal.\n            Object.keys(ownStoreObject).forEach((storeFieldName) => {\n              if (\n                !equal(\n                  ownStoreObject[storeFieldName],\n                  parentStoreObject[storeFieldName]\n                )\n              ) {\n                this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    const fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ?\n        {\n          ...fromParent,\n          ...super.findChildRefIds(dataId),\n        }\n      : fromParent;\n  }\n\n  public getStorage(): StorageType {\n    let p: EntityStore = this.parent;\n    while ((p as Layer).parent) p = (p as Layer).parent;\n    return p.getStorage.apply(\n      p,\n      // @ts-expect-error\n      arguments\n    );\n  }\n}\n\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nclass Stump extends Layer {\n  constructor(root: EntityStore.Root) {\n    super(\n      \"EntityStore.Stump\",\n      root,\n      () => {},\n      new CacheGroup(root.group.caching, root.group)\n    );\n  }\n\n  public removeLayer() {\n    // Never remove the Stump layer.\n    return this;\n  }\n\n  public merge(older: string | StoreObject, newer: string | StoreObject) {\n    // We never want to write any data into the Stump, so we forward any merge\n    // calls to the Root instead. Another option here would be to throw an\n    // exception, but the toReference(object, true) function can sometimes\n    // trigger Stump writes (which used to be Root writes, before the Stump\n    // concept was introduced).\n    return this.parent.merge(older, newer);\n  }\n}\n\nfunction storeObjectReconciler(\n  existingObject: StoreObject,\n  incomingObject: StoreObject,\n  property: string | number\n): StoreValue {\n  const existingValue = existingObject[property];\n  const incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store: any): store is EntityStore {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store instanceof EntityStore && store.group.caching);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}