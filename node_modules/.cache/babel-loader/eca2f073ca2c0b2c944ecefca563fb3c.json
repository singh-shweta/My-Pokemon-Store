{"ast":null,"code":"import { invariant } from \"../globals/index.js\";\nimport { visit, BREAK } from \"graphql\";\nexport function shouldInclude(_a, variables) {\n  var directives = _a.directives;\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(function (_a) {\n    var directive = _a.directive,\n      ifArgument = _a.ifArgument;\n    var evaledValue = false;\n    if (ifArgument.value.kind === \"Variable\") {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      invariant(evaledValue !== void 0, 70, directive.name.value);\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n    return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n  });\n}\nexport function getDirectiveNames(root) {\n  var names = [];\n  visit(root, {\n    Directive: function (node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\nexport var hasAnyDirectives = function (names, root) {\n  return hasDirectives(names, root, false);\n};\nexport var hasAllDirectives = function (names, root) {\n  return hasDirectives(names, root, true);\n};\nexport function hasDirectives(names, root, all) {\n  var nameSet = new Set(names);\n  var uniqueCount = nameSet.size;\n  visit(root, {\n    Directive: function (node) {\n      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n        return BREAK;\n      }\n    }\n  });\n  // If we found all the names, nameSet will be empty. If we only care about\n  // finding some of them, the < condition is sufficient.\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nexport function hasClientExports(document) {\n  return document && hasDirectives([\"client\", \"export\"], document, true);\n}\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === \"skip\" || value === \"include\";\n}\nexport function getInclusionDirectives(directives) {\n  var result = [];\n  if (directives && directives.length) {\n    directives.forEach(function (directive) {\n      if (!isInclusionDirective(directive)) return;\n      var directiveArguments = directive.arguments;\n      var directiveName = directive.name.value;\n      invariant(directiveArguments && directiveArguments.length === 1, 71, directiveName);\n      var ifArgument = directiveArguments[0];\n      invariant(ifArgument.name && ifArgument.name.value === \"if\", 72, directiveName);\n      var ifValue = ifArgument.value;\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(ifValue && (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 73, directiveName);\n      result.push({\n        directive: directive,\n        ifArgument: ifArgument\n      });\n    });\n  }\n  return result;\n}","map":{"version":3,"sources":["../../../src/utilities/graphql/directives.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from \"../globals/index.js\";\n\n// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport type {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n} from \"graphql\";\nimport { visit, BREAK } from \"graphql\";\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(\n    ({ directive, ifArgument }) => {\n      let evaledValue: boolean = false;\n      if (ifArgument.value.kind === \"Variable\") {\n        evaledValue =\n          variables && variables[(ifArgument.value as VariableNode).name.value];\n        invariant(\n          evaledValue !== void 0,\n          `Invalid variable referenced in @%s directive.`,\n          directive.name.value\n        );\n      } else {\n        evaledValue = (ifArgument.value as BooleanValueNode).value;\n      }\n      return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    }\n  );\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport const hasAnyDirectives = (names: string[], root: ASTNode) =>\n  hasDirectives(names, root, false);\n\nexport const hasAllDirectives = (names: string[], root: ASTNode) =>\n  hasDirectives(names, root, true);\n\nexport function hasDirectives(names: string[], root: ASTNode, all?: boolean) {\n  const nameSet = new Set(names);\n  const uniqueCount = nameSet.size;\n\n  visit(root, {\n    Directive(node) {\n      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n        return BREAK;\n      }\n    },\n  });\n\n  // If we found all the names, nameSet will be empty. If we only care about\n  // finding some of them, the < condition is sufficient.\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return document && hasDirectives([\"client\", \"export\"], document, true);\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === \"skip\" || value === \"include\";\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach((directive) => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @%s directive.`,\n        directiveName\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === \"if\",\n        `Invalid argument for the @%s directive.`,\n        directiveName\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"),\n        `Argument for the @%s directive must be a variable or a boolean value.`,\n        directiveName\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}