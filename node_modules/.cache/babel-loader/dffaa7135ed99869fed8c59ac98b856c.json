{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\nvar didWarnUncachedGetSnapshot = false;\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = React[uSESKey];\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport var useSyncExternalStore = realHook || function (subscribe, getSnapshot, getServerSnapshot) {\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  var value = getSnapshot();\n  if (\n  // DEVIATION: Using __DEV__\n  globalThis.__DEV__ !== false && !didWarnUncachedGetSnapshot &&\n  // DEVIATION: Not using Object.is because we know our snapshots will never\n  // be exotic primitive values like NaN, which is !== itself.\n  value !== getSnapshot()) {\n    didWarnUncachedGetSnapshot = true;\n    // DEVIATION: Using invariant.error instead of console.error directly.\n    globalThis.__DEV__ !== false && invariant.error(60);\n  }\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  var _a = React.useState({\n      inst: {\n        value: value,\n        getSnapshot: getSnapshot\n      }\n    }),\n    inst = _a[0].inst,\n    forceUpdate = _a[1];\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  if (canUseLayoutEffect) {\n    // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n    // which may seem like a conditional hook, but this code ends up behaving\n    // unconditionally (one way or the other) because canUseLayoutEffect is\n    // constant.\n    React.useLayoutEffect(function () {\n      Object.assign(inst, {\n        value: value,\n        getSnapshot: getSnapshot\n      });\n      // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({\n          inst: inst\n        });\n      }\n      // React Hook React.useLayoutEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [subscribe, value, getSnapshot]);\n  } else {\n    Object.assign(inst, {\n      value: value,\n      getSnapshot: getSnapshot\n    });\n  }\n  React.useEffect(function () {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({\n        inst: inst\n      });\n    }\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(function handleStoreChange() {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({\n          inst: inst\n        });\n      }\n    });\n    // React Hook React.useEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe]);\n  return value;\n};\nfunction checkIfSnapshotChanged(_a) {\n  var value = _a.value,\n    getSnapshot = _a.getSnapshot;\n  try {\n    return value !== getSnapshot();\n  } catch (_b) {\n    return true;\n  }\n}","map":{"version":3,"sources":["../../../src/react/hooks/useSyncExternalStore.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,QAAQ,kCAAkC;AAC5D,OAAO,KAAK,KAAK,MAAM,SAAS;AAEhC,SAAS,kBAAkB,QAAQ,0BAA0B;AAE7D,IAAI,0BAA0B,GAAG,KAAK;AAStC;AACA;AACA;AACA,IAAM,OAAO,GAAG,sBAA4C;AAC5D,IAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAmC;AAEjE;AACA;AAEA;AACA,OAAO,IAAM,oBAAoB,GAC/B,QAAQ,IACP,UAAC,SAAS,EAAE,WAAW,EAAE,iBAAiB,EAAA;EACzC;EACA;EACA;EACA;EACA,IAAM,KAAK,GAAG,WAAW,CAAA,CAAE;EAC3B;EACE;EACA,UAAO,CAAA,OAAA,KAAA,KAAA,IACP,CAAC,0BAA0B;EAC3B;EACA;EACA,KAAK,KAAK,WAAW,CAAA,CAAE,EACvB;IACA,0BAA0B,GAAG,IAAI;IACjC;IACA,UAAU,CAAA,OACR,KAAA,KAAA,IAAA,SAAA,CAAA,KAAA,CAAA,EAAA,CAAA;EAEJ;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACM,IAAA,EAAA,GAA0B,KAAK,CAAC,QAAQ,CAAC;MAC7C,IAAI,EAAE;QAAE,KAAK,EAAA,KAAA;QAAE,WAAW,EAAA;MAAA;KAC3B,CAAC;IAFO,IAAI,GAAA,EAAA,CAAA,CAAA,CAAA,CAAA,IAAA;IAAI,WAAW,GAAA,EAAA,CAAA,CAAA,CAE1B;EAEF;EACA;EACA;EACA,IAAI,kBAAkB,EAAE;IACtB;IACA;IACA;IACA;IACA,KAAK,CAAC,eAAe,CAAC,YAAA;MACpB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;QAAE,KAAK,EAAA,KAAA;QAAE,WAAW,EAAA;MAAA,CAAE,CAAC;MAC3C;MACA;MACA;MACA;MACA,IAAI,sBAAsB,CAAC,IAAI,CAAC,EAAE;QAChC;QACA,WAAW,CAAC;UAAE,IAAI,EAAA;QAAA,CAAE,CAAC;MACvB;MACA;MACA;IACF,CAAC,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;EACrC,CAAC,MAAM;IACL,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;MAAE,KAAK,EAAA,KAAA;MAAE,WAAW,EAAA;IAAA,CAAE,CAAC;EAC7C;EAEA,KAAK,CAAC,SAAS,CAAC,YAAA;IACd;IACA;IACA,IAAI,sBAAsB,CAAC,IAAI,CAAC,EAAE;MAChC;MACA,WAAW,CAAC;QAAE,IAAI,EAAA;MAAA,CAAE,CAAC;IACvB;IAEA;IACA,OAAO,SAAS,CAAC,SAAS,iBAAiB,CAAA,EAAA;MACzC;MACA;MACA;MACA;MAEA;MACA;MACA,IAAI,sBAAsB,CAAC,IAAI,CAAC,EAAE;QAChC;QACA,WAAW,CAAC;UAAE,IAAI,EAAA;QAAA,CAAE,CAAC;MACvB;IACF,CAAC,CAAC;IACF;IACA;EACF,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;EAEf,OAAO,KAAK;AACd,CAAE;AAEJ,SAAS,sBAAsB,CAAW,EAMzC,EAAA;MALC,KAAK,GAAA,EAAA,CAAA,KAAA;IACL,WAAW,GAAA,EAAA,CAAA,WAAA;EAKX,IAAI;IACF,OAAO,KAAK,KAAK,WAAW,CAAA,CAAE;EAChC,CAAC,CAAC,OAAA,EAAA,EAAM;IACN,OAAO,IAAI;EACb;AACF","sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\n\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType =\n  realHook ||\n  ((subscribe, getSnapshot, getServerSnapshot) => {\n    // Read the current snapshot from the store on every render. Again, this\n    // breaks the rules of React, and only works here because of specific\n    // implementation details, most importantly that updates are\n    // always synchronous.\n    const value = getSnapshot();\n    if (\n      // DEVIATION: Using __DEV__\n      __DEV__ &&\n      !didWarnUncachedGetSnapshot &&\n      // DEVIATION: Not using Object.is because we know our snapshots will never\n      // be exotic primitive values like NaN, which is !== itself.\n      value !== getSnapshot()\n    ) {\n      didWarnUncachedGetSnapshot = true;\n      // DEVIATION: Using invariant.error instead of console.error directly.\n      invariant.error(\n        \"The result of getSnapshot should be cached to avoid an infinite loop\"\n      );\n    }\n\n    // Because updates are synchronous, we don't queue them. Instead we force a\n    // re-render whenever the subscribed state changes by updating an some\n    // arbitrary useState hook. Then, during render, we call getSnapshot to read\n    // the current value.\n    //\n    // Because we don't actually use the state returned by the useState hook, we\n    // can save a bit of memory by storing other stuff in that slot.\n    //\n    // To implement the early bailout, we need to track some things on a mutable\n    // object. Usually, we would put that in a useRef hook, but we can stash it in\n    // our useState hook instead.\n    //\n    // To force a re-render, we call forceUpdate({inst}). That works because the\n    // new object always fails an equality check.\n    const [{ inst }, forceUpdate] = React.useState({\n      inst: { value, getSnapshot },\n    });\n\n    // Track the latest getSnapshot function with a ref. This needs to be updated\n    // in the layout phase so we can access it during the tearing check that\n    // happens on subscribe.\n    if (canUseLayoutEffect) {\n      // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n      // which may seem like a conditional hook, but this code ends up behaving\n      // unconditionally (one way or the other) because canUseLayoutEffect is\n      // constant.\n      React.useLayoutEffect(() => {\n        Object.assign(inst, { value, getSnapshot });\n        // Whenever getSnapshot or subscribe changes, we need to check in the\n        // commit phase if there was an interleaved mutation. In concurrent mode\n        // this can happen all the time, but even in synchronous mode, an earlier\n        // effect may have mutated the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceUpdate({ inst });\n        }\n        // React Hook React.useLayoutEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      }, [subscribe, value, getSnapshot]);\n    } else {\n      Object.assign(inst, { value, getSnapshot });\n    }\n\n    React.useEffect(() => {\n      // Check for changes right before subscribing. Subsequent changes will be\n      // detected in the subscription handler.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({ inst });\n      }\n\n      // Subscribe to the store and return a clean-up function.\n      return subscribe(function handleStoreChange() {\n        // TODO: Because there is no cross-renderer API for batching updates, it's\n        // up to the consumer of this library to wrap their subscription event\n        // with unstable_batchedUpdates. Should we try to detect when this isn't\n        // the case and print a warning in development?\n\n        // The store changed. Check if the snapshot changed since the last time we\n        // read from the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceUpdate({ inst });\n        }\n      });\n      // React Hook React.useEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [subscribe]);\n\n    return value;\n  });\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}