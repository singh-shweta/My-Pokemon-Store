{"ast":null,"code":"import { newInvariantError } from \"../../utilities/globals/index.js\";\nexport var serializeFetchParameter = function (p, label) {\n  var serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    var parseError = newInvariantError(40, label, e.message);\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};","map":{"version":3,"sources":["../../../src/link/http/serializeFetchParameter.ts"],"names":[],"mappings":"AAAA,SAAS,iBAAiB,QAAQ,kCAAkC;AAOpE,OAAO,IAAM,uBAAuB,GAAG,SAAA,CAAC,CAAM,EAAE,KAAa,EAAA;EAC3D,IAAI,UAAU;EACd,IAAI;IACF,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;EAChC,CAAC,CAAC,OAAO,CAAM,EAAE;IACf,IAAM,UAAU,GAAG,iBAAiB,CAClC,EAAA,EAAA,KAAA,EAAA,CAAA,CAAA,OAAA,CAAA;IAIF,UAAU,CAAC,UAAU,GAAG,CAAC;IACzB,MAAM,UAAU;EAClB;EACA,OAAO,UAAU;AACnB,CAAC","sourcesContent":["import { newInvariantError } from \"../../utilities/globals/index.js\";\nimport type { InvariantError } from \"../../utilities/globals/index.js\";\n\nexport type ClientParseError = InvariantError & {\n  parseError: Error;\n};\n\nexport const serializeFetchParameter = (p: any, label: string) => {\n  let serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e: any) {\n    const parseError = newInvariantError(\n      `Network request failed. %s is not serializable: %s`,\n      label,\n      e.message\n    ) as ClientParseError;\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}